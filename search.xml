<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【聊聊认知】你的答案是什么</title>
      <link href="/2021/05/30/thoughts/what-is-your-answer/"/>
      <url>/2021/05/30/thoughts/what-is-your-answer/</url>
      
        <content type="html"><![CDATA[<p>每一个问题都有一个答案。</p><p>天空为什么是蓝色？因为太阳光发生了散射。</p><p>鸟为什么会飞？因为鸟有翅膀。</p><p>苹果为什么会掉下来？因为万有引力。</p><p>每个问题我们都可以为它找到一个答案，我们也总是习惯于为每个问题找到一个合理的解释。</p><p>因为这些解释可以让我们在这个充满不确定性的世界里增加一些确定性，为我们带来安全感。</p><p>但我想问的是，你真的知道答案吗？</p><p>天空是蓝色，是因为太阳光发生了散射，这就是答案吗？</p><p>我想，你应该知道太阳光其实是由七种颜色构成，那为什么我们看到的偏偏是蓝色？而不是其他颜色？</p><p>鸟会飞是因为鸟有翅膀，那鸡也有翅膀，为什么鸡不能飞？</p><p>既然存在万有引力，为什么地球没有掉进太阳里？</p><p>只要你多问几个为什么，你就会发现，其实很多时候，我们并不是真正知道答案，我们只是以为我们自己知道。</p><p>天空之所以看起来是蓝色，是因为太阳光在空气中发生了瑞利散射，光的波长越短，被散射的比例就越大，蓝光的波长比较短，所以我们看到的天空便是蓝色。</p><p>鸟能飞确实很大一部分原因是因为它的翅膀，鸟的翅膀往下扇动时，会让翅膀上下方产生压差，从而获得让鸟上升的升力。但另一方面，鸟的身体结构比较轻盈，骨骼轻而薄且充满空气，让它们只需要更少的升力便能飞起来。而家养的鸡在长期的进化过程中，翅膀逐渐弱化，而身材却不断变得臃肿，翅膀的力量已经不足以支撑肥胖的身体飞起来了。</p><p>地球没有掉入太阳里，是因为在绕着太阳公转的同时也在发生自转，产生的离心力与万有引力平衡了。</p><p>当然，只要你想，我们还可以再进一步提出更深层次的问题。</p><p>比如：我们为什么能看到蓝色？为什么会发生瑞利散射？鸟为什么会有翅膀？为什么人没有翅膀？地球为什么会自转？又为什么刚好是以这样的角速度自转？</p><p>通过不断的提问，你会发现自己的答案其实并不那么可靠，也许在继续探索的过程中，你能找到更深层的答案。</p><p>如果你细心一点的话，就会发现在解释过程中，我们其实是在用一些概念来解释和替换另一个概念，再往深处探索，便会追溯到一些定理、公理或者是规则和定义。</p><p>我们在追寻答案的过程中，身处不同认知层级，我们就会有不同的答案。</p><p>但这篇文章的目的并不是为了问倒你，只是想说，你以为的，可能只是你以为的。</p><p>你有你的答案，世界另有答案。</p><p>既然每个问题背后都有一个答案，每个问题也能引申出更深层的问题，那是否存在一个终极问题，这个世界又是否存在一个终极答案呢？</p><p>如果这个宇宙起源于大爆炸，那大爆炸之前又有什么呢？如果这个宇宙的终点是热寂，那热寂之后又会有什么呢？这个宇宙又究竟为何是这样运行？是否有什么东西在背后操控着这一切？</p><p>如果你求助于宗教，他们便会告诉你，这一切都是全知全能的神的安排，这个宇宙是神创造的，神掌控着这一切，于是一切便有了答案。毕竟大部分人只是想要得到一个答案，他们其实并不关心这个答案正确与否。</p><p>但我不接受这样的答案，因为这个答案太简单了。如果这个世界真的是神所创造，那神又是从何而来？宇宙之大，必然还有其他星球也存在生命和高级文明，那为何这些神又如此钟爱地球呢？</p><p>根据奥卡姆剃刀原理，如无必要，勿增实体。没有神，这个世界也能正常运转，所以神自然便没有存在的必要。</p><p>我们不妨假设这个世界真的存在一个终极答案，并且假设有一天你能得到这个终极答案，知道了这个世界的全部真相，在找到它的一瞬间，所有的问题都得到了解答，不再有问题困扰。听起来似乎很美好，但是，然后呢？接下来你要做什么呢？你还可以做什么呢？</p><p>在我看来，根本不存在最终的答案，但却可以追求更好的答案。与其在虚空之中苦苦追寻那虚无缥缈的真理，不如回归到生活中来求索。</p><p>也许人生的答案就隐藏在你追寻答案的路上，藏在那些辗转难眠的夜里，藏在觥筹交错的酒杯里，藏在春风得意马蹄疾，一日看尽长安花的年少轻狂里，藏在会当凌绝顶，一览众山小的雄心壮志里。</p><p>一心只想追寻答案，反而会离答案越来越远。</p><p>这个世界存在无数的问题，自然也存在无数的答案。如果妄图将每个问题都寻根探底，那这一生未免太过短暂。</p><p>面对这无数的问题，我倒是觉得不必感到惊慌失措，也不必感到焦虑，如果你换个角度来思考这个事情，也许会有趣的多。</p><p>这个世界就好比一座矿山，那些或大或小的问题便是这矿山表面的石头，下面都埋藏着金矿，与其纠结该从哪块开始挖，不如趁早换把好铲子。</p><p>我们的思想便是铲子，只有足够深度和广度才能挖出这金矿来。这样一来，那些问题不过都是送上门来的宝贝，何乐而不为呢？</p><p>当然，也不能太过贪心，毕竟光阴荏苒，转瞬即逝，我们不可能挖到所有的金矿，所以需要做出选择，解决那些需要和想要解决的问题即可。</p><p>至于那绝大多数问题，我们可以选择留白，允许自己不知道答案。</p><p>而事实上，我们也并不需要知道所有的答案。</p><p>古人并不知道地球其实是围绕太阳转的，但他们也一样能很好的生存下来。我们并不用知道汽车发动机的原理，也能轻易的开动一辆几吨重的汽车。我们不用知道电脑操作系统的实现细节，不用知道芯片的制作原理，也能很好的对电脑操控自如。</p><p>对于那些不知道事，如果真的很感兴趣，那便过去铲上几铲子，挖出背后的金矿来。</p><p>可以允许自己不知道答案，但却不能没有探索答案的能力。</p><p>那又该如何去做呢？</p><p>首先，也是最重要的一点，便是保持开放谦逊的态度，听得进他人意见，保持空杯心态。</p><p>说起来简单，但做起来却很难。每当别人反对自己的观点时，便很容易进入防御状态，一心只想驳倒对方，观点的对错已经不再重要。</p><p>而这往往是没有把自己的观点和自己这个人区分开来，别人反对的只是观点，并不是针对人。</p><p>我们每个人都会有很多错误的观点，这算不上什么羞耻的事。如果被别人提出反对意见的观点刚好是错的，那又是一次自我修正和提升的机会。</p><p>这次别人把金矿都挖出来送到你面前了，你却还在生闷气吗？</p><p>承认自己错误，是追寻答案路上一个好的开端。</p><p>在《三体》中有一句让我印象深刻。“弱小和无知不是生存的障碍，傲慢才是”。</p><p>什么是傲慢，傲慢便是自以为掌握了这个世界的所有答案，并且拒绝接受其它可能的答案。</p><p>但世界之大，宇宙之浩瀚，岂是我们可以轻易掌握的。正确的态度是，承认自己的无知，承认自己的答案可能是错的，随时准备好接受更好的答案。</p><p>否则，当答案来敲门时，你可能无法认出它的模样，只能眼睁睁看它溜走。</p><p>明清朝的闭关锁国与西方列强的大航海时代便是鲜明的对比。明清时期的统治者自认为天朝地大物博，心高气傲，他们的世界地图上，天朝处在世界的中心，而其它未知地方都填充着妖物野兽，不愿与其它文明平起平坐，实行闭关锁国政策，不仅严格限制通商，也进一步限制了人们的思想，禁止学习西方思想和技术，用四书五经来禁锢和控制人们的思想，导致在世界的发展浪潮中逐渐落后，一步步被西方列强分割瓦解。</p><p>而与此同时，葡萄牙、西班牙等西方列强的世界地图上，还留有大量空白，吸引着他们不断朝外探索，而随着哥伦布对新大陆的发现，给他们带来了巨大的财富，彻底点燃了他们的探险欲望，让他们能极速扩张和发展，加速了资本的原始积累，开启了重新划分世界格局的大航海时代。</p><p>明清的傲慢与自负，最终在西方列强的坚船利炮下破碎一地，以惨痛的结局落魄收场，让人唏嘘不已。</p><p>“以史为鉴，可以知兴替，以铜为鉴，可以正衣冠，以人为鉴，可以知得失”。</p><p>新时代的我们，自然不能重蹈覆辙，回顾历史，是为了更好的前行。只有保持开放谦逊的态度，才不至于在追寻答案的旅途中迷失。</p><p>其次，作为一个很好切入点，可以多关注那些不符合自己预期的事物。如果有些事没有按照你期待的样子出现，不应该去质疑他人或者质疑这个世界，而应及时调整自己对这个世界的认知。</p><p>我想你可能听说过“尤里卡时刻”，也就是常说的“啊哈时刻”，是人们在探索答案之时突然发现了答案线索的欢喜。</p><p>但还有一个时刻，其实更加关键，那便是说出“这有点奇怪啊”的时刻。这是新的问题出现在眼前的时刻，是认知碰到壁垒的时刻，突破它便能打开更广阔的世界。</p><p>十九世纪末，经典物理学已经达到了辉煌的顶点，开尔文男爵在英国皇家学会的演讲中宣称。物理大厦已经落成，后辈物理学家只需要做一些修补工作就行了。物理学的未来，将只有在小数点第六位后去寻找。但他也补充说，但物理学晴朗天空的不远处，还悬挂着两朵乌云。</p><p>而真理与宝藏总会留给喜欢探索的冒险者，后辈物理学家沿着那两朵乌云探索，便发展出了开启现代物理学的相对论和量子力学，差点掀翻了经典物理学的大厦。而物理学也随之跨入了一个崭新的阶段，往前踏了一大步。</p><p>那些意料之外的事物，也许正是突破认知的关键，积极面对，勇敢探索，往往有意想不到的收获。</p><p>我们手里的答案，只是在当前认知下的临时答案，并不是最终答案。所以我们不必坚守自己的答案， 也不必坚守基于手中答案得来的观点。</p><p>也许我今天的观点跟昨天的观点不一致了，但相对真理来说，却更加一致了。</p><p>这个世界已经存在了很长时间，光是从人类出现开始算起，便已有了几百万年。</p><p>在数万年前，便同样有人类和我们一样抬头望天，对这个宇宙的运行法则提出了疑问。他们站在这广阔的大地上，便觉“天圆如张盖，地方如棋局”，对这个世界形成了“天圆地方”的感性认知。其后又有人在质疑中不断探索，从盖天说到浑天说，从地心说到日心说，经过了无数代人的苦苦探寻，才有了我们现在习以为常的认知。</p><p>但这个世界太大了，我们对这个世界的认识，不过只是盲人摸象。</p><p>摸到象腿的人以为这个世界是根柱子，摸到象尾的人以为这个世界是根鞭子，而摸到象耳的人以为这个世界是把扇子，他们都以为自己掌握的就是真理，我们又何尝不是如此呢。</p><p>但有幸的是，在这漫长的探索过程中，无数的名人大家已在他们的领域取得了可叹的成就，并且将他们的知识以文字的形式流传了下来，让我们能站在巨人的肩膀上重新认识世界，而不必一切都从头开始。</p><p>我们不是站在终点回望过程，而是在中途回望过去。尽管每一个答案都是只临时的，但每一个答案的发现也都意味着我们又往前进了一步。</p><p>怕什么真理无穷，进一寸有一寸的欢喜。</p><p>生活很大，世界更大。如何认识这个世界，便会如何去生活，好好审视一下自己手中的答案吧，它能把你带到更好的未来吗？</p><p>你是准备在这临时停靠站就此止步，还是准备继续奋力前行，奔往下一站？</p><p>过去的早已过去，未来正呼啸而来。</p><p>关于这个世界，你的答案是什么？</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conclusion/2020-conclusion-working</title>
      <link href="/2021/05/30/conclusion/2020-conclusion-working/"/>
      <url>/2021/05/30/conclusion/2020-conclusion-working/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的2020【健身篇】</title>
      <link href="/2021/02/17/conclusion/2020-conclusion-slim/"/>
      <url>/2021/02/17/conclusion/2020-conclusion-slim/</url>
      
        <content type="html"><![CDATA[<h2 id="难忘的一年"><a href="#难忘的一年" class="headerlink" title="难忘的一年"></a>难忘的一年</h2><p>从几年前到上海工作不久，我便开始了我的健身之旅。一开始的目的其实很简单，只是想要增强一下体能，增加一些肌肉。几年下来，在健身的路上走走停停，肌肉块头确实有所增大，但身材却一言难尽，体重也随着生活的烦恼与日俱增。</p><p>2020年换了工作后，更是开始放飞自我。巅峰时期我的体重一度接近180斤，让我承受着这个年纪不该承受的负担。在此期间，身边的朋友开始时不时拿我的体重开玩笑，我的某位同事也一直拿我工牌上的照片来嘲讽我，而我却总是置若罔闻，并没有太放在心上。</p><p>到了年中的时候，突然变得有些彷徨和犹豫，想做的事情太多，一时间不知该如何入手。转念一想，要不先减减肥吧，毕竟身体是革命的本钱，身体变强了，做事效率应该也能有所提升。而且身体健康是一直以来都是我比较重视的一方面，也符合“坚持长期主义”的革命纲领。</p><p>于是说干就干，撸起袖子，开始了为期两个月的魔鬼训练。说是魔鬼训练，那可能还是有点夸张，但强度确实挺大，每天累的跟狗一样，严格控制饮食，每天只吃健身餐、牛奶、麦片、水果。一顿操作猛如虎，幸好结果也还差强人意。我的体重从接近180斤降到了140左右，肚子上的赘肉明显少了很多，脸也瘦了一圈，同事都说我简直像是变了一个人。听着同事们的夸赞，我表面上波澜不惊，其实心里乐开了花。</p><p>经过半年的努力，我发现自己的身材也变得更好了，肌肉开始有了线条，脸上也开始有了棱角，每次洗完澡，都忍不住在镜子面前多看几眼。</p><p>回顾过去的半年，在健身减肥方面感慨良多，我想也是时候好好总结反思一下了。</p><h2 id="放飞自我的半年"><a href="#放飞自我的半年" class="headerlink" title="放飞自我的半年"></a>放飞自我的半年</h2><p>2020年初，我换了一份工作。刚进入新公司的我，对一切都充满着新鲜感。食堂新鲜的饭菜略合我胃口，加上不断供的零食诱惑以及每天贴心的下午茶，让我的嘴处于长期劳作状态，鲜有罢工之时。与此同时，由于接触了新的工作内容，编程语言也从Java转入了Go，工作上压力也增加不少。</p><p>于是在各类因素的加持下，我的体重便有些不受约束了。去年的时候体重还被我压制在170以下，进新公司之后，体重实现了快速增长，瞬间突破170，以迅雷不及掩耳盗铃之势直奔180而去。</p><p>当时的我，还身在胖中不知胖，总安慰自己，这不是胖，是壮，只要身体健康就好。但身边总是会有人有意无意的提到这一点，让我开始明白，我是真的变胖了，还不少。</p><p>七月底的时候，我在朋友圈发了一张照片，本是想自嘲一下，没想到引来了无数朋友的调侃。</p><p><img src="1.jpg" alt="1.jpg"></p><p><img src="2.jpg" alt="2.jpg"></p><p>绝大多数的评论都是惊叹于我怎么变得这么胖了。虽然嘴上开着玩笑，但说实话还是有一点点受伤。这让我开始正视自己的体重问题了。</p><h2 id="八月相约减肥"><a href="#八月相约减肥" class="headerlink" title="八月相约减肥"></a>八月相约减肥</h2><p>于是，痛定思痛，我开始下定决心减肥。八月份便正式开始踏上减肥之旅。</p><p><img src="3.jpeg" alt="3.jpeg"></p><p>一个人减肥总是难以坚持，我深知这一点，所以怂恿了我的 mentor 和我一起减肥。身宽体胖的他刚好也有这样的想法，于是一拍即合，我们约下战书，看一个月后，谁能减掉更多的体重。</p><p>公司附近就有一个游泳馆，我们每天中午都会去游泳半小时左右，游完泳后相互对比体重，看自己的体重又下降了多少。他比较喜欢开玩笑，也经常调侃我的体重，这让我更加充满动力，心想着这个月一定要比过他。</p><p><img src="4.png" alt="4.png"></p><p>在前半个月里，我们的减肥效果都还不错。在饮食上也有所控制，很少吃零食，中午改成了健身餐，晚饭改成了牛奶麦片，但周末还是没能忍住，放开肚子吃过两次，导致体重迅速反弹。到月底的时候，他以两斤的优势略胜我一筹。</p><p><img src="5.png" alt="5.png"></p><p><img src="7.jpeg" alt="7.jpeg"></p><p><img src="8.jpeg" alt="8.jpeg"></p><p><img src="6.png" alt="6.png"></p><p><img src="9.jpeg" alt="9.jpeg"></p><p>八月份减肥小有所成，虽然体重减少的不算太多，但能一天天的看到自己的进步，还是挺高兴的。在这个月的减肥过程中，也顺便学会了游泳这项新技能，这一点倒是挺不错的。</p><h2 id="九月加速减肥"><a href="#九月加速减肥" class="headerlink" title="九月加速减肥"></a>九月加速减肥</h2><p>在八月的减肥比试中落败，心有不甘，于是从九月份开始加大训练量，增加训练的强度，并更严格的控制饮食。结果发现效果显著，只用了半个月时间，就成功的减掉了10斤。在健身房完成了第一百次打卡，体重也从163.9降到了153.7。</p><p><img src="10.png" alt="10.png"></p><p><img src="12.jpeg" alt="12.jpeg"></p><p><img src="11.jpeg" alt="11.jpeg"></p><p><img src="13.jpeg" alt="13.jpeg"></p><p><img src="14.jpeg" alt="14.jpeg"></p><p>随后的一段时间，又吃了两顿没控制住，体重应声反弹，但随即被控制住了。到了九月底，目标也顺利完成了。</p><p>到了九月底，体重来到150以下了，体脂率也下降到了23%。而且，减肥后脸也瘦了不少，精神面貌确实要好了很多。</p><p><img src="15.png" alt="15.png"></p><p><img src="16.jpeg" alt="16.jpeg"></p><p><img src="18.jpeg" alt="18.jpeg"></p><p><img src="2.jpg" alt="2.jpg"></p><p><img src="17.jpeg" alt="17.jpeg"></p><p><img src="19.jpeg" alt="19.jpeg"></p><p>九月份的训练说是魔鬼训练一点也不过分，不仅严格控制饮食，而且有大量的无氧和有氧运动，每次练完都累到怀疑人生，回到家总是腰酸背痛，好几次在半夜里腿抽筋痛醒了过来。</p><p>我知道这样的运动确实有些过量了，但还在身体可以接受的范围之内，只要注意不做太大重量拉伤肌肉，尚在可控范围之内。</p><p>在慢慢养成习惯之后，每天不出一身汗反而会觉得不自在。健身成了我生活中不可或缺的一部分。</p><h2 id="十月小幅反弹"><a href="#十月小幅反弹" class="headerlink" title="十月小幅反弹"></a>十月小幅反弹</h2><p>经过十一长假的放纵，体重也成功起飞，虽然在假期之后的调整中得到了一些控制，但在饮食控制上有所松懈，所以体重一直有所反复，到月底的时候，体重反弹了1.5斤。</p><p>那时候无意中在知乎上看到一款叫红魔的产品，说是可以提升运动效果，增加运动消耗，于是买了两瓶试了试。第一次使用的那天，早上有一段时间手一直在不由自主的发抖，精神有些异常亢奋，锻炼的时候确实感觉更有力量，但可能大部分是咖啡因的效果。</p><p><img src="20.png" alt="20.png"></p><p><img src="23.jpeg" alt="23.jpeg"></p><p><img src="21.jpeg" alt="21.jpeg"></p><p><img src="22.jpeg" alt="22.jpeg"></p><p>现在两瓶已经吃完了，刚吃完那几天会有明显的精神萎靡不振的感觉，好在现在已经基本调整过来了。记得有一次吃错了药，在晚上的时候吃了两颗红魔，效果是真的好，不管怎样都睡不着，直到五点多才实在困得不行睡了一会。</p><p>现在想想确实有些乱来了，以后不会再乱吃这些东西了。</p><h2 id="十一月疯狂跑步"><a href="#十一月疯狂跑步" class="headerlink" title="十一月疯狂跑步"></a>十一月疯狂跑步</h2><p>经历了一个萎靡不振的十月，自我反思之后，决定尝试一下跑步减肥，之前只是在健身完成之后跑跑步放松一下，没有做太多的跑步运动。</p><p>在11月份里，我每天平均跑步5公里，一路坚持下来，效果确实也还可以。</p><p><img src="28.jpeg" alt="28.jpeg"></p><p>虽然体重也多次反弹，但目标还是完成了。体重也成功从153降到了141。同时，脸上也不再是一团浆糊，逐渐开始有了棱角。同事都说我简直像是换了一张脸。</p><p><img src="31.png" alt="31.png"></p><p><img src="26.jpeg" alt="26.jpeg"></p><p><img src="24.jpeg" alt="24.jpeg"></p><p><img src="29.jpeg" alt="29.jpeg"></p><p><img src="25.jpeg" alt="25.jpeg"></p><p><img src="30.jpeg" alt="30.jpeg"></p><p><img src="27.jpeg" alt="27.jpeg"></p><h2 id="十二月后休养生息"><a href="#十二月后休养生息" class="headerlink" title="十二月后休养生息"></a>十二月后休养生息</h2><p>十一月跑步有些过头了，膝盖有些受不了了，所以十二月调整了策略，基本没有跑步，运动量也减半了。</p><p>因为体重逐渐接近目标，我知道短期快速的减肥很容易反弹，所以希望让体重在没那么大的运动量下，在一个范围内保持稳定。</p><p>经过十二月和一月两个月的摸索，体重也成功的维持在145上下，虽然波动也还是不小，不过一两顿的增肥不会再造成太大的困扰，短期体重的骤增也能在随后两天运动下降下来，生活也开始走向常态化。</p><p>一月份开始使用keep来锻炼，主要做减脂运动和腹肌训练，目标是把体脂率减下来，并且让腹肌线条更加明显。</p><p><img src="32.png" alt="32.png"></p><p>但腹肌训练远比我想象的要难，虽然每次都竭尽全力，但一个月下来，腹肌并没有明显的改善。。。</p><h2 id="重新起航"><a href="#重新起航" class="headerlink" title="重新起航"></a>重新起航</h2><p>一转眼，新年增肥期就已经过去了，不出意外，应该胖了五斤以上。所以准备回上海后重新启动减脂增肌计划。本来计划用一年时间练出六块腹肌，但后来看了一些文章，发现如果训练得当，三个月就够了。再加上自己腹肌力量已经有一定的基础了，三个月时间应该还算充裕，也就是五月结束之前练出六块腹肌。</p><p>为此，我需要将体脂率控制在14%左右，相应的体重应该要在125左右。因此我还需要减掉20斤，三个月减20斤，确实不容易，但也不算太难，毕竟之前的减肥经历已经磨练过一次了，所以我还是充满信心。</p><p>至于为什么对腹肌有如此的执念，是因为减肥之后发现自己的身材得到了很大的改善，肌肉开始有线条了，胸肌明显增大，肱二头肌和肱三头肌也有明显变化，但腹部堆积的脂肪还是有点多，所以想继续练练，让身形更好看一点。</p><p>当然，六块腹肌只是一个中间目标，其背后代表的健康生活方式才是我所追求的，所以也不能舍本逐末，为了锻炼腹肌反而损害了自己的健康。</p><p>等完成了六块腹肌之后，需要的便是增加对敏捷、爆发、重量和耐力的综合训练来维持一个健康的身材，等时机成熟再进军八块腹肌。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>2020年的减脂和增肌效果显著，让我成功的甩掉了胖子的标签，也让我的肌肉力量得到很大的增强。每月一个flag的方式，让我在减肥的路上不再对遥远的目标感到遥遥无期，而是自信面对每天的挑战。把一个大目标拆解成一个个小目标，然后各个击破，并根据实际情况灵活调整，让看似难以实现的目标也能得以完成。</p><p>实现目标有很多种方法论，但找到最适合自己的方法论才能更好的完成目标。一路走来，也逐渐发现，制定计划和目标并不难，方法论也只能提供达成目标的工具，对实现目标的那份激情和执着才是源源不断的动力源泉。</p><p>当发现生活被迷雾缠绕，无法看清方向时，逃避现实或者自甘堕落都无济于事，雪球最终只会越滚越大。与其等到雪球大到无力解决时被砸得遍体鳞伤，不如提早把问题解决掉。在看似繁杂的问题中，其实只有少数几个关键的问题，只要解决了这几个关键问题，其它问题都会迎刃而解。</p><p>每个人的行为方式都是基于自己对生活和人生的理解，都是对自己人生观和价值观的一种践行。每个人经历的生活不一样，所以对人生的理解也会不一样。很多人的行为方式看似很难理解，但在他们的视角里，一切都能自圆其说。事实无对错，但观点分高下。善弈者通盘无妙手，我所追寻的，是深思熟虑之后的步步为营，而不是剑走偏锋式的出奇制胜。</p><p>我想这一年收获的不仅仅是健身留下的好身材，更多的是关于健身知识的积累和健身习惯的形成。随着健身习惯的养成，健身早已成为日常生活中不可缺少的一部分，我想不仅要活到老学到老，也要练到老，让强健的身体成为生活和事业的发动机，提供源源不断的精力支持。</p><p>2021的序幕已经拉开，如果说，站在2021的尾巴上回顾这一整年，完成哪些事会让我觉得这一年没有虚度，那么六块腹肌和保持较低的体脂率一定位列其中。</p><p>路漫漫其修远兮，吾将上下而求索。2021，再接再厉！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go语言绘图】图片添加文字（二）</title>
      <link href="/2020/12/22/picture/go-draw-word-in-pic2/"/>
      <url>/2020/12/22/picture/go-draw-word-in-pic2/</url>
      
        <content type="html"><![CDATA[<p>这一篇将继续介绍gg库中绘制文字相关的方法，主要包括：<code>DrawStringAnchored()</code>、<code>DrawStringWrapped()</code>、<code>MeasureMultilineString()</code>、<code>WordWrap()</code>下面来分别进行介绍。</p><h2 id="DrawStringAnchored"><a href="#DrawStringAnchored" class="headerlink" title="DrawStringAnchored"></a>DrawStringAnchored</h2><p>如果不细究，可能会觉得这个方法是 <code>DrawString()</code> 方法的一个封装，但看看里面的实现就能发现，实际情况正好相反。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// DrawString draws the specified text at the specified point.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DrawString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringAnchored</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// DrawStringAnchored draws the specified text at the specified anchor point.</span><span class="token comment" spellcheck="true">// The anchor point is x - w * ax, y - h * ay, where w, h is the size of the</span><span class="token comment" spellcheck="true">// text. Use ax=0.5, ay=0.5 to center the text at the specified point.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DrawStringAnchored</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    w<span class="token punctuation">,</span> h <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    x <span class="token operator">-=</span> ax <span class="token operator">*</span> w    y <span class="token operator">+=</span> ay <span class="token operator">*</span> h    <span class="token keyword">if</span> dc<span class="token punctuation">.</span>mask <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        dc<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span>im<span class="token punctuation">,</span> s<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        im <span class="token operator">:=</span> image<span class="token punctuation">.</span><span class="token function">NewRGBA</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dc<span class="token punctuation">.</span>width<span class="token punctuation">,</span> dc<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">)</span>        dc<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> s<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>        draw<span class="token punctuation">.</span><span class="token function">DrawMask</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span>im<span class="token punctuation">,</span> dc<span class="token punctuation">.</span>im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> im<span class="token punctuation">,</span> image<span class="token punctuation">.</span>ZP<span class="token punctuation">,</span> dc<span class="token punctuation">.</span>mask<span class="token punctuation">,</span> image<span class="token punctuation">.</span>ZP<span class="token punctuation">,</span> draw<span class="token punctuation">.</span>Over<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>DrawStringAnchored()</code> 方法主要有5个参数，第一个参数是要绘制的字符串，后面四个参数共同决定了锚点的位置，具体计算逻辑是<code>(x - w * ax, y - h * ay)</code>，所以，当<code>ax</code>、<code>ay</code>设置为<code>0</code>时就是左对齐，此时锚点位置处于文字框左下角；设置为<code>0.5</code>时就是居中，此时锚点位置处于文字框正中央；设置为<code>1</code>时就是右对齐，此时锚点位置处于文字控右上角。</p><p>我们来看下效果：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestDrawStringAnchored</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"gilmer-heavy.ttf"</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringAnchored</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringAnchored</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringAnchored</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> S<span class="token operator">-</span>dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="1.png" alt=""></p><p>这里需要注意的就是锚点的位置，当左对齐时，锚点在左下角，所以设置的 <code>(0, dc.FontHeight())</code>  代表的是文字框左下角的位置，同理，当居中对齐时，<code>(S/2, S/2)</code> 代表的是文字框中心点的位置，右对齐时，<code>(S, S-dc.FontHeight())</code> 代表的是文字框右上顶点的位置。</p><h2 id="DrawStringWrapped"><a href="#DrawStringWrapped" class="headerlink" title="DrawStringWrapped"></a>DrawStringWrapped</h2><p>这个方法可以比较方便的绘制多行文字，还能自动折行，基本上相当于真正文字框的效果。</p><p>先看个例子简单的熟悉一下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestDrawStringWrapped</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"gilmer-heavy.ttf"</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span><span class="token string">"Hello world! Hello Frank! Hello Alice!"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gg<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>绘制的效果如下：</p><p><img src="2.png" alt=""></p><p>可以看到，不仅自动换行，而且还保持了单词的完整性，没有将一个单词从中间分割开来。</p><p>这个方法的参数有点多，一共有8个参数。</p><p>第1个参数代表的是要绘制的字符串，比如这里的<code>Hello world! Hello Frank! Hello Alice!</code>。第6个参数代表文本框的宽度。第7个参数代表行间距。</p><p>第2～5和第8个参数共同决定了锚点的位置。这里的计算比之前稍微复杂一点，让我们来看看里面的具体实现：</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// DrawStringWrapped word-wraps the specified string to the given max width</span><span class="token comment" spellcheck="true">// and then draws it at the specified anchor point using the given line</span><span class="token comment" spellcheck="true">// spacing and text alignment.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay<span class="token punctuation">,</span> width<span class="token punctuation">,</span> lineSpacing <span class="token builtin">float64</span><span class="token punctuation">,</span> align Align<span class="token punctuation">)</span> <span class="token punctuation">{</span>    lines <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">WordWrap</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> width<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// sync h formula with MeasureMultilineString</span>    h <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight <span class="token operator">*</span> lineSpacing    h <span class="token operator">-=</span> <span class="token punctuation">(</span>lineSpacing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight    x <span class="token operator">-=</span> ax <span class="token operator">*</span> width    y <span class="token operator">-=</span> ay <span class="token operator">*</span> h    <span class="token keyword">switch</span> align <span class="token punctuation">{</span>    <span class="token keyword">case</span> AlignLeft<span class="token punctuation">:</span>        ax <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">case</span> AlignCenter<span class="token punctuation">:</span>        ax <span class="token operator">=</span> <span class="token number">0.5</span>        x <span class="token operator">+=</span> width <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">case</span> AlignRight<span class="token punctuation">:</span>        ax <span class="token operator">=</span> <span class="token number">1</span>        x <span class="token operator">+=</span> width    <span class="token punctuation">}</span>    ay <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> lines <span class="token punctuation">{</span>        dc<span class="token punctuation">.</span><span class="token function">DrawStringAnchored</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay<span class="token punctuation">)</span>        y <span class="token operator">+=</span> dc<span class="token punctuation">.</span>fontHeight <span class="token operator">*</span> lineSpacing    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>首先通过 <code>WordWrap()</code> 方法来得到根据指定宽度处理过后的每一行需要展示的字符串信息。</p><pre class=" language-go"><code class="language-go">lines <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">WordWrap</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> width<span class="token punctuation">)</span></code></pre><p>然后计算行高，这里计算的时候是用行数乘以字体高度再乘以行间距，得到结果后再减去一个行间距。所以这个 <code>lineSpacing</code> 的含义是行间距相对于字体高度的倍数，当 <code>lineSpacing</code> 设置为1时，也就是行间距为0，设置为1.1时，代表行间距为字体高度的0.1倍。</p><pre class=" language-go"><code class="language-go">h <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight <span class="token operator">*</span> lineSpacingh <span class="token operator">-=</span> <span class="token punctuation">(</span>lineSpacing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight</code></pre><p>然后是有点绕的计算。</p><pre class=" language-go"><code class="language-go">x <span class="token operator">-=</span> ax <span class="token operator">*</span> widthy <span class="token operator">-=</span> ay <span class="token operator">*</span> h<span class="token keyword">switch</span> align <span class="token punctuation">{</span><span class="token keyword">case</span> AlignLeft<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">case</span> AlignCenter<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0.5</span>    x <span class="token operator">+=</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">case</span> AlignRight<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">1</span>    x <span class="token operator">+=</span> width<span class="token punctuation">}</span>ay <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> lines <span class="token punctuation">{</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringAnchored</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> ax<span class="token punctuation">,</span> ay<span class="token punctuation">)</span>    y <span class="token operator">+=</span> dc<span class="token punctuation">.</span>fontHeight <span class="token operator">*</span> lineSpacing<span class="token punctuation">}</span></code></pre><p>可以看到，整体逻辑是先计算好首行文字的锚点位置，然后对处理过的每个字符串调用 <code>DrawStringAnchored()</code> 方法进行最终文字绘制。我们可以从下往上看，在循环绘制之前，先设置了 <code>ay = 1</code>，也就是说锚点的偏移位置会在每一行的顶部，然后我们来看这个<code>ax</code>：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> align <span class="token punctuation">{</span><span class="token keyword">case</span> AlignLeft<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">case</span> AlignCenter<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0.5</span>    x <span class="token operator">+=</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">case</span> AlignRight<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">1</span>    x <span class="token operator">+=</span> width<span class="token punctuation">}</span></code></pre><p>根据传入的最后一个参数的不同值，<code>ax</code> 会设置为不同的值。当最后一个参数分别为 <code>AlignLeft</code>、<code>AlignCenter</code>、<code>AlignRight</code>时，<code>ax</code> 和 <code>ay</code> 的组合分别为：<code>(0,1)</code>、<code>(0.5,1)</code>、<code>(1,1)</code>，锚点相对于单行文字的位置分别为左上顶点、上中位置、右上顶点。</p><p>然后我们再来看这个 <code>y</code> 的值：</p><pre class=" language-go"><code class="language-go">y <span class="token operator">-=</span> ay <span class="token operator">*</span> h</code></pre><p><code>y</code> 的初始位置为传入的 <code>y</code> 值减去 <code>ay</code> (y轴偏移) 乘以整体文本框高度，代表的含义是初始锚点<code>(x,y)</code>相对于文本框的位置，分别传入<code>0</code>、<code>0.5</code>、<code>1</code>时分别代表锚点处于文本框的上边线、正中线和下边线上。在循环绘制文字时，<code>y</code> 的值也会不断调整，代表单行文字的锚点位置也在不断变化。</p><pre class=" language-go"><code class="language-go">y <span class="token operator">+=</span> dc<span class="token punctuation">.</span>fontHeight <span class="token operator">*</span> lineSpacing</code></pre><p>最后来看下 <code>x</code> 的值，初始值为初始锚点相对于传入的文本框宽度的相对位置，<code>ax</code> 分别为 <code>0</code>、<code>0.5</code>、<code>1</code> 时，分别代表初始锚点位于整体文本框的左边线、居中竖线和右边线上。</p><pre class=" language-go"><code class="language-go">x <span class="token operator">-=</span> ax <span class="token operator">*</span> width</code></pre><p>根据传入的最后一个参数的不同，又会对x进行一次调整，这样调整之后，便能实现文字在文本框中左对齐、居中和右对齐的效果了。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">switch</span> align <span class="token punctuation">{</span><span class="token keyword">case</span> AlignLeft<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">case</span> AlignCenter<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">0.5</span>    x <span class="token operator">+=</span> width <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">case</span> AlignRight<span class="token punctuation">:</span>    ax <span class="token operator">=</span> <span class="token number">1</span>    x <span class="token operator">+=</span> width<span class="token punctuation">}</span></code></pre><p>看起来确实挺好用，不用再操心换行的事情了。但别高兴的太早，有一点需要注意。这个方法只会根据空格来分割字符串，如果字符串没有空格，就会变成只有一行文字的效果。</p><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span><span class="token string">"HelloWorld!HelloFrank!HelloAlice!"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gg<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span></code></pre><p><img src="3.png" alt=""></p><p>你可能会觉得，英文单词之间都会有空格的嘛，应该不用担心，但如果是中文呢？</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Downloads/font/方正楷体简体.ttf"</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>dc<span class="token punctuation">.</span><span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span><span class="token string">"如果我们把文字换成中文效果就没那么好了"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gg<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span></code></pre><p><img src="4.png" alt=""></p><p>另外，这个方法不会限制文本框整体高度，所以如果文本很长，即使可能正确换行，仍旧会超出图片范围。</p><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span><span class="token string">"比如这是一段很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 很长很长很长很长很长 的文字"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gg<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span></code></pre><p><img src="5.png" alt=""></p><p>另外，它是按照空格进行词元素分割的，所以不会从单词的中间进行拆分，这既是优点，也是缺点。因为如果有长单词的话，可能会导致提前换行，让某些行看起来比其它行短很多。所以要想精确控制，还是得用笨办法。</p><h3 id="MeasureMultilineString"><a href="#MeasureMultilineString" class="headerlink" title="MeasureMultilineString"></a>MeasureMultilineString</h3><p><code>MeasureMultilineString()</code> 方法可以测量多行文本的整体高度和宽度，需要传入用换行符分割好的文本行字符串和行间距，里面的计算逻辑也很简单。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">MeasureMultilineString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> lineSpacing <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>width<span class="token punctuation">,</span> height <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    lines <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// sync h formula with DrawStringWrapped</span>    height <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight <span class="token operator">*</span> lineSpacing    height <span class="token operator">-=</span> <span class="token punctuation">(</span>lineSpacing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight    d <span class="token operator">:=</span> <span class="token operator">&amp;</span>font<span class="token punctuation">.</span>Drawer<span class="token punctuation">{</span>        Face<span class="token punctuation">:</span> dc<span class="token punctuation">.</span>fontFace<span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// max width from lines</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> lines <span class="token punctuation">{</span>        adv <span class="token operator">:=</span> d<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>        currentWidth <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span>adv <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// from gg.Context.MeasureString</span>        <span class="token keyword">if</span> currentWidth <span class="token operator">></span> width <span class="token punctuation">{</span>            width <span class="token operator">=</span> currentWidth        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> width<span class="token punctuation">,</span> height<span class="token punctuation">}</span></code></pre><p>行高的计算跟上面<code>DrawStringWrapped()</code>方法是一样的：</p><pre class=" language-go"><code class="language-go">h <span class="token operator">:=</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight <span class="token operator">*</span> lineSpacingh <span class="token operator">-=</span> <span class="token punctuation">(</span>lineSpacing <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> dc<span class="token punctuation">.</span>fontHeight</code></pre><p>宽度则是取这些文本行中宽度最大的那个。</p><h3 id="WordWrap"><a href="#WordWrap" class="headerlink" title="WordWrap"></a>WordWrap</h3><p>这个方法是用来处理文本的，负责对文本根据指定宽度进行分行，在 <code>DrawStringWrapped()</code> 方法中已经有所调用。它内部是调用<code>wordWrap()</code>函数来实现的。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// WordWrap wraps the specified string to the given max width and current</span><span class="token comment" spellcheck="true">// font face.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">WordWrap</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> w <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">wordWrap</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> s<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><code>wordWrap()</code> 函数做的事情便是先将文字按换行符分割，然后对每一个子字符串按空格进行分割，再通过一个元素一个元素的拼接来判断出适合当前行宽的最大字符串。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">wordWrap</span><span class="token punctuation">(</span>m measureStringer<span class="token punctuation">,</span> s <span class="token builtin">string</span><span class="token punctuation">,</span> width <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> result <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fields <span class="token operator">:=</span> <span class="token function">splitOnSpace</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>            fields <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        x <span class="token operator">:=</span> <span class="token string">""</span>        <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span> <span class="token punctuation">{</span>            w<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>x <span class="token operator">+</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> w <span class="token operator">></span> width <span class="token punctuation">{</span>                <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    x <span class="token operator">=</span> <span class="token string">""</span>                    <span class="token keyword">continue</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> x<span class="token punctuation">)</span>                    x <span class="token operator">=</span> <span class="token string">""</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            x <span class="token operator">+=</span> fields<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> fields<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> x<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> result <span class="token punctuation">{</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSpace</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span></code></pre><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><h3 id="otf-字体文件加载"><a href="#otf-字体文件加载" class="headerlink" title="otf 字体文件加载"></a>otf 字体文件加载</h3><p>前面的内容中，加载字体文件都使用的是 <code>LoadFontFace()</code> 方法进行的，但需要注意的是，这个方法只能加载 <code>ttf</code> 字体文件，也就是 <code>true type font</code>，无法加载 <code>otf</code> 字体文件，也就是 <code>open type font</code>。 所以如果需要加载 <code>otf</code> 字体文件，则需要换一个姿势。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getOpenTypeFontFace</span><span class="token punctuation">(</span>fontFilePath <span class="token builtin">string</span><span class="token punctuation">,</span> fontSize<span class="token punctuation">,</span> dpi <span class="token builtin">float64</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">*</span>font<span class="token punctuation">.</span>Face<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    fontData<span class="token punctuation">,</span> fontFileReadErr <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>fontFilePath<span class="token punctuation">)</span>    <span class="token keyword">if</span> fontFileReadErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fontFileReadErr    <span class="token punctuation">}</span>    otfFont<span class="token punctuation">,</span> parseErr <span class="token operator">:=</span> opentype<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>fontData<span class="token punctuation">)</span>    <span class="token keyword">if</span> parseErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> parseErr    <span class="token punctuation">}</span>    otfFace<span class="token punctuation">,</span> newFaceErr <span class="token operator">:=</span> opentype<span class="token punctuation">.</span><span class="token function">NewFace</span><span class="token punctuation">(</span>otfFont<span class="token punctuation">,</span> <span class="token operator">&amp;</span>opentype<span class="token punctuation">.</span>FaceOptions<span class="token punctuation">{</span>        Size<span class="token punctuation">:</span> fontSize<span class="token punctuation">,</span>        DPI<span class="token punctuation">:</span>  dpi<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> newFaceErr <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> newFaceErr    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>otfFace<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><p>来测试一下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestUseOtfFile</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    filePath <span class="token operator">:=</span> <span class="token string">"SourceHanSansCN-Bold-2.otf"</span>    fontFace<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getOpenTypeFontFace</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetFontFace</span><span class="token punctuation">(</span><span class="token operator">*</span>fontFace<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span><span class="token string">"比如这是一段 很长很长很长 很长很长很长 的文字"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gg<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="6.png" alt=""></p><h3 id="行高的问题"><a href="#行高的问题" class="headerlink" title="行高的问题"></a>行高的问题</h3><p>还有一个需要注意的问题，之前在开发时也踩过坑。<code>SetFontFace</code> 与 <code>LoadFontFace</code> 计算 <code>fontHeight</code> 时姿势不一样，所以导致设置同样的字体大小时，最终的字体高度却不一致。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SetFontFace</span><span class="token punctuation">(</span>fontFace font<span class="token punctuation">.</span>Face<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dc<span class="token punctuation">.</span>fontFace <span class="token operator">=</span> fontFace    dc<span class="token punctuation">.</span>fontHeight <span class="token operator">=</span> <span class="token function">float64</span><span class="token punctuation">(</span>fontFace<span class="token punctuation">.</span><span class="token function">Metrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Height<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">64</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">LoadFontFace</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> points <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    face<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">LoadFontFace</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> points<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        dc<span class="token punctuation">.</span>fontFace <span class="token operator">=</span> face        dc<span class="token punctuation">.</span>fontHeight <span class="token operator">=</span> points <span class="token operator">*</span> <span class="token number">72</span> <span class="token operator">/</span> <span class="token number">96</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span></code></pre><p>可以看到对于行高的计算逻辑有着较大区别，我们可以用一个例子来简单验证一下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestUseOtfFile</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>    filePath <span class="token operator">:=</span> <span class="token string">"/Users/bytedance/Downloads/font/方正楷体简体.ttf"</span>    fontFace1<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getOpenTypeFontFace</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetFontFace</span><span class="token punctuation">(</span><span class="token operator">*</span>fontFace1<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span><span class="token string">"比如这是一段文字"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gg<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Downloads/font/方正楷体简体.ttf"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dc<span class="token punctuation">.</span><span class="token function">DrawStringWrapped</span><span class="token punctuation">(</span><span class="token string">"比如这是一段文字"</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> S<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> gg<span class="token punctuation">.</span>AlignCenter<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="7.png" alt=""></p><p>可以看到，两行文字大小明显不一样。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，关于文字绘制的相关内容就说完了。这两篇讲解了gg库中关于文字绘制相关的内容，相信对于文字绘制已经有了比较好的掌握。实践出真知，还是需要多改改多用用才知道是怎么一回事。在之后的一篇里，会根据前面的内容进行一个小小的实战应用，让我们的知识真正应用起来～</p><p>如果本篇内容对你有帮助，别忘了点赞关注加收藏～</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go语言绘图】图片添加文字（一）</title>
      <link href="/2020/12/20/picture/go-draw-word-in-pic/"/>
      <url>/2020/12/20/picture/go-draw-word-in-pic/</url>
      
        <content type="html"><![CDATA[<p>前一篇讲解了利用gg包来进行图片旋转的操作，这一篇我们来看看怎么在图片上添加文字。</p><h2 id="绘制纯色背景"><a href="#绘制纯色背景" class="headerlink" title="绘制纯色背景"></a>绘制纯色背景</h2><p>首先，我们先绘制一个纯白色的背景，作为添加文字的背景板。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/fogleman/gg"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出图片如下：</p><p><img src="1.png" alt=""></p><p>这样我就得到了一张纯青色的背景图。回顾一下上一篇里绘制背景图的步骤：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestRotateImage</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    width <span class="token operator">:=</span> <span class="token number">1000</span>    height <span class="token operator">:=</span> <span class="token number">1000</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB255</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>我们是通过先绘制跟画布同样大小的矩形，然后将它的颜色进行填充来实现纯色背景效果的，但实际上使用 <code>Clear()</code> 方法便能直接使用当前颜色对画布进行填充。</p><p>查看一下 <code>Clear()</code> 方法便能发现，里面是通过调用 <code>draw.Draw()</code> 函数来实现的，这也是go语言自带的 <code>image</code> 包里很有用的一个函数，后面会有文章来做更详细的介绍。简单来说，<code>Clear()</code> 方法是通过调用<code>draw.Draw()</code> 函数，通过将纯色图片覆盖到原画布的方式来实现纯色背景的效果的。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// Clear fills the entire image with the current color.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    src <span class="token operator">:=</span> image<span class="token punctuation">.</span><span class="token function">NewUniform</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span>color<span class="token punctuation">)</span>    draw<span class="token punctuation">.</span><span class="token function">Draw</span><span class="token punctuation">(</span>dc<span class="token punctuation">.</span>im<span class="token punctuation">,</span> dc<span class="token punctuation">.</span>im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> image<span class="token punctuation">.</span>ZP<span class="token punctuation">,</span> draw<span class="token punctuation">.</span>Src<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="添加文字"><a href="#添加文字" class="headerlink" title="添加文字"></a>添加文字</h2><p>背景板已经准备就绪，接下来，我们来添加一些文字。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/fogleman/gg"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"gilmer-heavy.ttf"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    dc<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>输出如下，一个硕大、黑色的“Hello, World!”就出现在了图片中央。</p><p><img src="2.png" alt=""></p><p>这里我们添加了三个步骤，首先是设置了字体颜色为黑色。</p><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>然后加载了字体文件，这里需要注意的是，通过 <code>LoadFontFace()</code> 方法加载的字体文件只支持 <code>ttf</code> 后缀的文件，也就是 <code>true type font</code>，</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"gilmer-heavy.ttf"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>里面的实现也比较简单：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">LoadFontFace</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> points <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    face<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">LoadFontFace</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> points<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        dc<span class="token punctuation">.</span>fontFace <span class="token operator">=</span> face        dc<span class="token punctuation">.</span>fontHeight <span class="token operator">=</span> points <span class="token operator">*</span> <span class="token number">72</span> <span class="token operator">/</span> <span class="token number">96</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> err<span class="token punctuation">}</span></code></pre><p>内部调用了 <code>LoadFontFace()</code> 函数，在这个函数内部进行了字体文件读取，并用 <code>freetype</code> 包里的<code>Parse()</code>函数进行字体的加载，最后在调用 <code>NewFace()</code> 函数来创建一个 <code>font.Face</code> 对象，在外面的<code>LoadFontFace()</code>方法里，将这个对象保存在 <code>fontFace</code> 字段中，并且根据传入的<code>point</code>大小设置了一下字体高度。</p><p>至于为什么是乘以<code>72</code>然后除以<code>96</code>，这个查了一下资料，简单的说，字体的大小单位磅(<code>points</code>) 是<code>1/72</code>逻辑英寸，屏幕的分辨率是<code>96DPI</code>（96点每逻辑英寸），那么屏幕每个点就是<code>72/96</code>=<code>0.75</code>磅。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">LoadFontFace</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> points <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>font<span class="token punctuation">.</span>Face<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fontBytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    f<span class="token punctuation">,</span> err <span class="token operator">:=</span> truetype<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>fontBytes<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    face <span class="token operator">:=</span> truetype<span class="token punctuation">.</span><span class="token function">NewFace</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token operator">&amp;</span>truetype<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>        Size<span class="token punctuation">:</span> points<span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// Hinting: font.HintingFull,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> face<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span></code></pre><h3 id="调整字体大小"><a href="#调整字体大小" class="headerlink" title="调整字体大小"></a>调整字体大小</h3><p>如果想调整字体大小，也很简单，只需要调整<code>LoadFontFace()</code> 方法传入的值即可，让我们来调大一点字体看看效果。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"gilmer-heavy.ttf"</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="3.png" alt=""></p><p>这样就大很多了。不知道聪明的你注意到了没有，在调用<code>dc.DrawString("Hello, world!", 0, S/2)</code>时，我们设置的坐标是 <code>(0, S/2)</code> ，也就是左侧边的正中心点，<strong>这个位置刚好是绘制出来的文字的左下角的坐标</strong>，这是需要注意的一点。</p><h3 id="居中显示"><a href="#居中显示" class="headerlink" title="居中显示"></a>居中显示</h3><p>如果想要文字居中显示怎么办呢？比如我们想要这个 <code>Hello,World!</code> 显示在图片的正中央，要怎么处理呢？一个笨办法当然是通过调整字体位置来实现这个效果，让我们先来试试：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"gilmer-heavy.ttf"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>dc<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> S<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p><img src="4.png" alt=""></p><p>通过多次调整，字体大小设置为<code>120</code>时，<code>x</code>的位置设置为<code>130</code>，基本上可以看起来是居中的。但这样的话每次换文字都得反复调整位置，显然不科学。</p><p>别慌，有一个方法可以得到文字的宽度，<code>MeasureString()</code> 可以得到在当前字体下指定字符串的宽度和高度，这个高度其实就是前面通过 <code>points * 72 / 96</code> 计算得到的，然后我们再将左下角的位置设置为<code>((S-sWidth)/2, (S+sHeight)/2)</code>即可实现文字居中的效果，注意y轴坐标是<code>(S+sHeight)/2</code>，因为文字的左上顶点位置y轴坐标应该是<code>(S-sHeight)/2</code>，左下顶点坐标只需要再加上字体高度即可得出。</p><pre class=" language-go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">"Hello, world!"</span>sWidth<span class="token punctuation">,</span> sHeight <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>dc<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>S<span class="token operator">-</span>sWidth<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>S<span class="token operator">+</span>sHeight<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p><img src="5.png" alt=""></p><p>这样看来，居中显示也不过如此嘛。但别高兴的太早，有没有想过，如果文字过长该怎么处理？比如我们来调整一下文字内容，再看下生成的效果。</p><pre class=" language-go"><code class="language-go">s <span class="token operator">:=</span> <span class="token string">"Hello,world! Hello,ByteDancer!"</span></code></pre><p><img src="6.png" alt=""></p><p>文字已经超出边界了，显然不是理想的效果，这个时候有两种处理方法，一种是添加省略号，一种是换行。</p><h3 id="单行长文本处理"><a href="#单行长文本处理" class="headerlink" title="单行长文本处理"></a>单行长文本处理</h3><p>先来说一下添加省略号的处理方案，听起来好像挺简单，但实际上处理起来也挺麻烦的。</p><p>首先需要确定一个文字展示的最大宽度，因为如果满打满算整行都塞满文字显然不好看。其次是要逐个字符进行宽度计算，并判断是否会超过最大宽度，最后截取并保留刚好小于最大宽度时的字符串（需要考虑省略号的宽度）。</p><p>我们来逐个处理。首先拍脑袋定一个文字最大宽度为图片宽度的<code>0.75</code>倍。</p><pre class=" language-go"><code class="language-go">maxTextWidth <span class="token operator">:=</span> S <span class="token operator">*</span> <span class="token number">0.75</span></code></pre><p>然后来逐个字符计算宽度，直到刚好大于最大宽度为止。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TruncateText</span><span class="token punctuation">(</span>dc <span class="token operator">*</span>gg<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> originalText <span class="token builtin">string</span><span class="token punctuation">,</span> maxTextWidth <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    tmpStr <span class="token operator">:=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>originalText<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        tmpStr <span class="token operator">=</span> tmpStr <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>originalText<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        w<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>tmpStr<span class="token punctuation">)</span>        <span class="token keyword">if</span> w <span class="token operator">></span> maxTextWidth <span class="token punctuation">{</span>            <span class="token keyword">return</span> tmpStr<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">:</span> i<span class="token number">-1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tmpStr<span class="token punctuation">}</span></code></pre><p>然后我们调整一下调用的地方。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"gilmer-heavy.ttf"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    s <span class="token operator">:=</span> <span class="token string">"Hello,world! Hello,ByteDancer!"</span>    ellipsisWidth<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span>    maxTextWidth <span class="token operator">:=</span> S <span class="token operator">*</span> <span class="token number">0.75</span>    s <span class="token operator">=</span> <span class="token function">TruncateText</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> s<span class="token punctuation">,</span> maxTextWidth <span class="token operator">-</span> ellipsisWidth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"..."</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    sWidth<span class="token punctuation">,</span> sHeight <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token punctuation">(</span>S<span class="token operator">-</span>sWidth<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>S<span class="token operator">+</span>sHeight<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这里我们先计算了省略号的宽度，然后用最大字符串宽度减去省略号宽度作为最大宽度传入，得到最终要展示的字符串。生成的效果如下：</p><p><img src="7.png" alt=""></p><p>看起来好像没什么毛病，但如果我们把文字换成中文，情况可能就不一样了。我们换一个中文字体，然后把字符串设置成中文。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"方正楷体简体.ttf"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>s <span class="token operator">:=</span> <span class="token string">"如果我们把文字换成中文"</span></code></pre><p>就变成了这个样子。</p><p><img src="8.png" alt=""></p><p>发现图片上只剩下了省略号，原因是中文字符串分割不正确导致出现了乱码，而这个乱码在字体里找不到对应的文字，所以无法展示。这时，需要先将字符串先转化为<code>rune</code>数组，或者通过直接对字符串使用 <code>for range</code> 遍历，可以避免在中文的情况出现乱码的情况。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TruncateText</span><span class="token punctuation">(</span>dc <span class="token operator">*</span>gg<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> originalText <span class="token builtin">string</span><span class="token punctuation">,</span> maxTextWidth <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    tmpStr <span class="token operator">:=</span> <span class="token string">""</span>    result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> originalText <span class="token punctuation">{</span>        tmpStr <span class="token operator">=</span> tmpStr <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        w<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>tmpStr<span class="token punctuation">)</span>        <span class="token keyword">if</span> w <span class="token operator">></span> maxTextWidth <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>tmpStr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">""</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这样文字就能按照我们的预期进行展示了。</p><p><img src="9.png" alt=""></p><h3 id="多行文本处理"><a href="#多行文本处理" class="headerlink" title="多行文本处理"></a>多行文本处理</h3><p>接下来，我们来看看怎么处理多行文本，即当一行文字展示不下时，把文字切割成多行进行展示。如果我们仍旧使用之前的方法来处理的话，就需要先计算好每行展示的字以及行数，然后再进行展示。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/fogleman/gg"</span>    <span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> S <span class="token operator">=</span> <span class="token number">1024</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> S<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">LoadFontFace</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Downloads/方正楷体简体.ttf"</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    s <span class="token operator">:=</span> <span class="token string">"这是我的一个秘密，再简单不过的秘密：一个人只有用心去看，才能看到真实。事情的真相只用眼睛是看不见的。        --《小王子》"</span>    ellipsisWidth<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span><span class="token string">"..."</span><span class="token punctuation">)</span>    maxTextWidth <span class="token operator">:=</span> S <span class="token operator">*</span> <span class="token number">0.9</span>    lineSpace <span class="token operator">:=</span> <span class="token number">25.0</span>    maxLine <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>S <span class="token operator">/</span> <span class="token punctuation">(</span>dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineSpace<span class="token punctuation">)</span><span class="token punctuation">)</span>    line <span class="token operator">:=</span> <span class="token number">0</span>    lineTexts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">{</span>        line<span class="token operator">++</span>        <span class="token keyword">if</span> line <span class="token operator">></span> maxLine <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> line <span class="token operator">==</span> maxLine <span class="token punctuation">{</span>            sw<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token keyword">if</span> sw <span class="token operator">></span> maxTextWidth <span class="token punctuation">{</span>                maxTextWidth <span class="token operator">-=</span> ellipsisWidth            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        lineText <span class="token operator">:=</span> <span class="token function">TruncateText</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> s<span class="token punctuation">,</span> maxTextWidth<span class="token punctuation">)</span>        <span class="token keyword">if</span> line <span class="token operator">==</span> maxLine <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>lineText<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lineText <span class="token operator">+=</span> <span class="token string">"..."</span>        <span class="token punctuation">}</span>        lineTexts <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>lineTexts<span class="token punctuation">,</span> lineText<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>lineText<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span>        <span class="token punctuation">}</span>        s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>lineText<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    lineY <span class="token operator">:=</span> <span class="token punctuation">(</span>S <span class="token operator">-</span> dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lineTexts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> lineSpace<span class="token operator">*</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lineTexts<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    lineY <span class="token operator">+=</span> dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> text <span class="token operator">:=</span> <span class="token keyword">range</span> lineTexts <span class="token punctuation">{</span>        sWidth<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        lineX <span class="token operator">:=</span> <span class="token punctuation">(</span>S <span class="token operator">-</span> sWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        dc<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> lineX<span class="token punctuation">,</span> lineY<span class="token punctuation">)</span>        lineY <span class="token operator">+=</span> dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineSpace    <span class="token punctuation">}</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TruncateText</span><span class="token punctuation">(</span>dc <span class="token operator">*</span>gg<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> originalText <span class="token builtin">string</span><span class="token punctuation">,</span> maxTextWidth <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>    tmpStr <span class="token operator">:=</span> <span class="token string">""</span>    result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">rune</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> originalText <span class="token punctuation">{</span>        tmpStr <span class="token operator">=</span> tmpStr <span class="token operator">+</span> <span class="token function">string</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>        w<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>tmpStr<span class="token punctuation">)</span>        <span class="token keyword">if</span> w <span class="token operator">></span> maxTextWidth <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>tmpStr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token string">""</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这段逻辑其实也很简单，首先根据行高和行间距计算出当前图片最多能展示多少行字，然后遍历需要展示的字符串进行逐行截取，截取出一行行的文字来。</p><p>遍历时有一个小细节，那就是判断是否已经到达最后一行，如果到达最后一行，则要考虑是否添加省略号了。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">//如果已经是最后一行，则需要判断剩余字符串是否仍旧超过最大宽度</span><span class="token keyword">if</span> line <span class="token operator">==</span> maxLine <span class="token punctuation">{</span>    sw<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 如果超过则需要在末尾添加省略号，截取的最大宽度需要减去省略号的宽度</span>    <span class="token keyword">if</span> sw <span class="token operator">></span> maxTextWidth <span class="token punctuation">{</span>        maxTextWidth <span class="token operator">-=</span> ellipsisWidth    <span class="token punctuation">}</span><span class="token punctuation">}</span>lineText <span class="token operator">:=</span> <span class="token function">TruncateText</span><span class="token punctuation">(</span>dc<span class="token punctuation">,</span> s<span class="token punctuation">,</span> maxTextWidth<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果是最后一行并且文字仍旧是被截取过，那么在末尾添加省略号</span><span class="token keyword">if</span> line <span class="token operator">==</span> maxLine <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>lineText<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    lineText <span class="token operator">+=</span> <span class="token string">"..."</span><span class="token punctuation">}</span></code></pre><p>在绘制文本时，先考虑整个文本框的左上顶点位置，因为需要居中展示，每一行的宽度是变化的，X轴坐标是不确定的，但是Y轴坐标是可以先计算出来的，因为每一行的高度和行间距我们都已经知道了。整个文本框的高度就是<code>dc.FontHeight()*float64(len(lineTexts)) - lineSpace*float64(len(lineTexts)-1))</code> ，用图片高度减去文本框高度再除以2，就能得到左上顶点高度了。</p><pre class=" language-go"><code class="language-go">lineY <span class="token operator">:=</span> <span class="token punctuation">(</span>S <span class="token operator">-</span> dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lineTexts<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> lineSpace<span class="token operator">*</span><span class="token function">float64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>lineTexts<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span></code></pre><p>然后开始逐行绘制文字，计算每一行的左下顶点X轴和Y轴坐标即可。</p><pre class=" language-go"><code class="language-go">lineY <span class="token operator">+=</span> dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> text <span class="token operator">:=</span> <span class="token keyword">range</span> lineTexts <span class="token punctuation">{</span>    sWidth<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> dc<span class="token punctuation">.</span><span class="token function">MeasureString</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>    lineX <span class="token operator">:=</span> <span class="token punctuation">(</span>S <span class="token operator">-</span> sWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    dc<span class="token punctuation">.</span><span class="token function">DrawString</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> lineX<span class="token punctuation">,</span> lineY<span class="token punctuation">)</span>    lineY <span class="token operator">+=</span> dc<span class="token punctuation">.</span><span class="token function">FontHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineSpace<span class="token punctuation">}</span></code></pre><p>最后的效果如下图：</p><p><img src="10.png" alt=""></p><p>这样虽然实现了效果，但是显然有些太过复杂，我们还能再简化一下这个过程。</p><p>在gg库中，还有两个方法可以绘制文字，<code>DrawStringAnchored()</code> 和 <code>DrawStringWrapped()</code>。前者可以在指定一个点为偏移起点。后者则类似于一个文本框的效果，可以指定文本框中心点和文本框宽度，这些将在下一篇中进行介绍。</p><p>这里的处理没有考虑原文本中有换行符的情况，所以其实还不够完善，在处理时可以先对文本进行换行符分割，然后再依次进行上述处理。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这一篇中，主要讲解了如何在纯色背景图上进行文字的绘制，说明了 <code>DrawString()</code> 方法和 <code>MeasureString()</code> 的使用，并利用它们来实现了文字居中的效果。在下一篇中，将对通过另外几个方法的讲解来了解文字绘制的更多技巧。</p><p>如果本篇内容对你有帮助，别忘了点赞关注加收藏～</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go语言绘图】图片的旋转</title>
      <link href="/2020/12/16/picture/go-pic-rotate-use-gg-package/"/>
      <url>/2020/12/16/picture/go-pic-rotate-use-gg-package/</url>
      
        <content type="html"><![CDATA[<p>在上一篇中，我们了解了gg库的基本使用，包括调整大小、调整圆形参数、设置颜色、保存图片、加载图片和裁剪。这一篇我们来学习一下图片的旋转。</p><h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><p>首先，我们先来一张黄图。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestRotateImage</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    width <span class="token operator">:=</span> <span class="token number">1000</span>    height <span class="token operator">:=</span> <span class="token number">1000</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB255</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="1.png" alt=""></p><p>然后加载好我们要旋转的图片，用的仍旧是我们上一篇中使用的图。</p><p><img src="2.png" alt=""></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestRotateImage</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    im<span class="token punctuation">,</span> err <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Desktop/test.png"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    w <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>X    h <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Y    width <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> w    height <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> h    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB255</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> width<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span> height<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这里为了更好的看到旋转的效果，对之前的代码做了一些调整。把画布大小设置为2倍图片的长宽。</p><pre class=" language-go"><code class="language-go">width <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> wheight <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> hdc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span></code></pre><p>然后绘制了一个矩形，并且将它的颜色填充为黄色（因为图片比较白，用黑色背景更容易看到边界）。</p><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>dc<span class="token punctuation">.</span><span class="token function">SetRGB255</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>顺便纠正一下上一篇中的遗漏的点，使用 <code>setRGB()</code> 方法来设置颜色确实需要使用转换函数来将RGB值进行映射，但还有另一个方法 <code>SetRGB255()</code> 可以直接设置RGB值，就不需要先进行一次转换了。</p><p>然后我们将图片加载到了正中心的位置，<code>(w/4,h/4)</code> 对应图片左上角在画布上的位置。</p><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> width<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span> height<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span></code></pre><p>输出的图片如下：</p><p><img src="3.png" alt=""></p><h2 id="旋转图片"><a href="#旋转图片" class="headerlink" title="旋转图片"></a>旋转图片</h2><p>图片加载好了，下面我们开始添加一个旋转操作。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestRotateImage</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    im<span class="token punctuation">,</span> err <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Desktop/test.png"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    w <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>X    h <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Y    width <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> w    height <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> h    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB255</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Rotate</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> width<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span> height<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>其实只添加了一行代码，就是在加载图片前先调用了 <code>Rotate()</code> 方法。想象之中，我们会把图片旋转45度，但实际上是这样的：</p><p><img src="4.png" alt=""></p><p>好像不太符合预期，实际上，仔细研究一下就会发现，这里的旋转是围绕原点也就是整个画布的左上角进行旋转的，那我想要它围绕中心点旋转该怎么办呢？别慌，换一个方法就可以了。<code>RotateAbout()</code> 方法可以指定图片的旋转中心点，换这个来试试看：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestRotateImage</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    im<span class="token punctuation">,</span> err <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Desktop/test.png"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    w <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>X    h <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Y    width <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> w    height <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> h    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB255</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">RotateAbout</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> width<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span> height<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="5.png" alt=""></p><p>这下图片确实绕中心点旋转了，但转45度好像不应该是这样的，再来看看这个方法的说明：</p><pre><code>// RotateAbout updates the current matrix with a clockwise rotation.// Rotation occurs about the specified point. Angle is specified in radians.</code></pre><p>可以看到，第一个参数的意思其实代表的是弧度，而不是角度，所以想要旋转45度当然不能这么传，我们换一个姿势再试试。</p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestRotateImage</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>    im<span class="token punctuation">,</span> err <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Desktop/test.png"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    w <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>X    h <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Y    width <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> w    height <span class="token operator">:=</span> <span class="token number">2</span> <span class="token operator">*</span> h    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawRectangle</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB255</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">RotateAbout</span><span class="token punctuation">(</span>gg<span class="token punctuation">.</span><span class="token function">Radians</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>width<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>height<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> width<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span> height<span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"test.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="6.png" alt=""></p><p>这下终于得到了我们想要的图。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>图片旋转其实很简单，只需要在绘制前调用 <code>Rotate()</code> 或 <code>RotateAbout()</code> 方法即可。但需要注意几点：</p><ol><li>旋转是顺时针旋转</li><li><code>Rotate</code> 方法是绕左上角旋转</li><li>第一个参数都代表的是弧度而不是角度</li></ol><p>这样旋转我们也能掌握了，图片处理功能又进了一步。喜欢本文的朋友欢迎点赞收藏加关注～</p><p><img src="7.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Go语言绘图】gg 库的基本使用</title>
      <link href="/2020/11/29/picture/go-basic-usage-of-gg-package/"/>
      <url>/2020/11/29/picture/go-basic-usage-of-gg-package/</url>
      
        <content type="html"><![CDATA[<p>最近接了个比较大的需求，需要做很多图片处理的事情，比如图片的旋转裁截拼接，各种渐变处理，文字排列，一开始光是想想就头疼。但没有办法，既然已经需求已经到手上了，那就得把它做好才行，于是便开始被迫营业，无证上岗了。</p><p>经过一番查找，找到了一个Go语言图片处理的库，经过调研发现还挺强的，能满足需求，于是决定写点文章，记录一下使用心得，以便日后不时之需。</p><h2 id="gg-库的安装和简单使用"><a href="#gg-库的安装和简单使用" class="headerlink" title="gg 库的安装和简单使用"></a>gg 库的安装和简单使用</h2><p>使用之前，我们当然得先来安装一下这个库：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">go</span> get <span class="token operator">-</span>u github<span class="token punctuation">.</span>com<span class="token operator">/</span>fogleman<span class="token operator">/</span>gg</code></pre><p>这个库的一个好处是有很多测试代码，可以拿来跑跑看，就知道它大概能实现什么样的效果了。</p><p><img src="1.png" alt=""></p><p>这是它例子的大概效果图，可以看到，能实现的图形效果还是挺多的。</p><p><img src="2.png" alt=""></p><p>我们拿其中的一个代码来简单体验一下：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"github.com/fogleman/gg"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>duang 的一下，一张黑不溜秋的圆形图就生成了。</p><p><img src="3.png" alt=""></p><p>关于上面的代码，下面会进行逐一说明。</p><h2 id="调整生成图片的大小"><a href="#调整生成图片的大小" class="headerlink" title="调整生成图片的大小"></a>调整生成图片的大小</h2><pre class=" language-go"><code class="language-go">dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span></code></pre><p>这是先初始化一个 <code>Context</code> 对象，使用库之前都需要先初始化一个 <code>Context</code> 对象，后面的两个 <code>1000</code>，分别对应着最终生成图片的宽度和高度。我们可以修改一下高度为 <code>500</code> 看看效果。</p><pre class=" language-go"><code class="language-go">dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></code></pre><p><img src="4.png" alt=""></p><p>可以看到图片被腰斩了，高度矮了一半，同样修改宽度参数也可以得到类似的效果，这里就不演示了。</p><h2 id="调整圆形参数"><a href="#调整圆形参数" class="headerlink" title="调整圆形参数"></a>调整圆形参数</h2><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span></code></pre><p>这里是画一个圆心位置在 <code>(500,500)</code>，半径为 <code>400</code> 的圆形。需要说明的一点是，这里的坐标轴是以左上角为原点的，水平向右是横轴正方向，竖直向下是纵轴正方向，所以<code>(500,500)</code>正是中心位置。我们可以调整一下参数值来看下效果。</p><pre class=" language-go"><code class="language-go">dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>dc<span class="token punctuation">.</span><span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span></code></pre><p><img src="5.png" alt=""></p><p>可以看到，圆心往左上角移动了。还可以调整一下半径参数试试：</p><pre class=" language-go"><code class="language-go">dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>dc<span class="token punctuation">.</span><span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span></code></pre><p><img src="6.png" alt=""></p><p>这样我们又得到了一个完整的圆。</p><h2 id="调整颜色"><a href="#调整颜色" class="headerlink" title="调整颜色"></a>调整颜色</h2><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这两句的意思是先设置颜色值为 <code>(0,0,0)</code>，也就是黑色，乍眼一看这三个值分别对应的是颜色的 <code>R、G、B</code>值，但实际上完全不是这么回事，这里需要注意的是，这三个值分别代表红色、绿色、蓝色的程度，所以如果分别设置为，会得到下面的三张图。</p><p><img src="7.png" alt=""><br><img src="8.png" alt=""><br><img src="9.png" alt=""></p><p>那如果想要根据RGB值来设置颜色该怎么处理呢？其实也很简单，做一个压缩映射即可，<code>RGB</code>值的范围是0～255，表示的含义也是对应色值的程度，这里不过将范围变成了0～1，那我们将需要使用到的值除以255就可以得到对应的映射值了。具体的颜色RGB值跟颜色的对应关系可以在网上搜到。</p><p><a href="https://tool.oschina.net/commons?type=3" target="_blank" rel="noopener">https://tool.oschina.net/commons?type=3</a></p><p>下面我们用淡黄色做一个例子，对应的 <code>RGB</code> 值是 <code>(255,222,173)</code> ，我们添加一下映射转换的代码即可：</p><pre class=" language-go"><code class="language-go"><span class="token keyword">var</span> rbgConverter <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>r <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span> <span class="token punctuation">{</span>    result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>    rgb <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">float64</span><span class="token punctuation">{</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">173</span><span class="token punctuation">}</span>    newRgb <span class="token operator">:=</span> <span class="token function">rbgConverter</span><span class="token punctuation">(</span>rgb<span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SetRGB</span><span class="token punctuation">(</span>newRgb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newRgb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> newRgb<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">Fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>这样我们就得到了一张黄图。</p><p><img src="10.png" alt=""></p><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><pre class=" language-go"><code class="language-go">dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span></code></pre><p><code>SavePNG()</code> 方法可以将当前图形保存成 <code>PNG</code> 格式文件，路径可以是相对路径，也可以是绝对路径。</p><p><code>SaveJPG()</code> 方法可以将当前图形保存成 <code>JPG</code> 格式文件。</p><p>当然，这里的两个方法其实也只是包装了一下，点进代码可以看到，里面并没有什么奇奇怪怪的逻辑。</p><pre class=" language-go"><code class="language-go"><span class="token comment" spellcheck="true">// SavePNG encodes the image as a PNG and writes it to disk.</span><span class="token keyword">func</span> <span class="token punctuation">(</span>dc <span class="token operator">*</span>Context<span class="token punctuation">)</span> <span class="token function">SavePNG</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">SavePNG</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> dc<span class="token punctuation">.</span>im<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">SavePNG</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">,</span> im image<span class="token punctuation">.</span>Image<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    file<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> file<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> png<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> im<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>所以，我们也可以根据自己的需要将图片保存成其它格式或者存到其它地方。</p><h2 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h2><p>加载图片有三个方法可以实现，<code>LoadPNG()</code> 用来加载 <code>PNG</code> 格式的图片，<code>LoadJPG()</code> 用来加载 <code>JPG</code> 格式的图片，如果不清楚该用什么方法，可以直接使用 <code>LoadImage()</code> 方法来加载图片。</p><p>加载图片后，得到的是一个 <code>image.Image</code> 对象，可以通过该对象来获取图片的一些基本信息，如：图片的长和宽、图片某一点的颜色RGB值。</p><p>加载图片之后，可以使用 <code>DrawImage()</code> 方法来将图片绘制出来，以便用于后续操作。</p><pre class=" language-go"><code class="language-go">im<span class="token punctuation">,</span> err <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span><span class="token string">"/Users/bytedance/Desktop/test.jpg"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>w <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Xh <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Ydc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span>dc<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h2 id="裁剪"><a href="#裁剪" class="headerlink" title="裁剪"></a>裁剪</h2><p>有一个经常使用到的方法叫 <code>Clip()</code> ，该方法可以将图像进行裁剪，裁剪的形状取决于之前画的图形。</p><p>下面来举个例子，这是我们要裁剪的图，我们用一个圆形来对它进行裁剪。</p><p><img src="11.png" alt=""></p><pre class=" language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 加载图片，这里路径换成自己的</span>    im<span class="token punctuation">,</span> err <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">LoadImage</span><span class="token punctuation">(</span><span class="token string">"test.jpg"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取图片的宽度和高度</span>    w <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>X    h <span class="token operator">:=</span> im<span class="token punctuation">.</span><span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Y    dc <span class="token operator">:=</span> gg<span class="token punctuation">.</span><span class="token function">NewContext</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 取宽度和高度的最小值作为直径</span>    radius <span class="token operator">:=</span> math<span class="token punctuation">.</span><span class="token function">Min</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true">// 画圆形</span>    dc<span class="token punctuation">.</span><span class="token function">DrawCircle</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>w<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> radius<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 对画布进行裁剪</span>    dc<span class="token punctuation">.</span><span class="token function">Clip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 加载图片</span>    dc<span class="token punctuation">.</span><span class="token function">DrawImage</span><span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    dc<span class="token punctuation">.</span><span class="token function">SavePNG</span><span class="token punctuation">(</span><span class="token string">"out.png"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="12.png" alt=""></p><p>这样一来，头像就做好了【手动狗头】。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Go 语言也可以实现对图片进行很多类型的操作，今天主要介绍了图片的加载、保存、绘制圆形、调整大小和颜色以及裁剪。之后还会进一步介绍其它功能。</p><p>我觉得如果不是需要使用并没有熟悉它的必要，但知道有这么个东西，知道它能实现什么样的效果，可以让你手上的牌又多了一张，以后有需要的时候便不至于捉襟见肘了。所以还在等什么，赶紧点赞收藏加关注吧～</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【R语言入门】R语言中的变量与基本数据类型</title>
      <link href="/2020/11/28/data-analysis/r-study-basic-type/"/>
      <url>/2020/11/28/data-analysis/r-study-basic-type/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在前一篇中，我们介绍了 <code>R</code> 语言和 <code>R Studio</code> 的安装，并简单的介绍了一个示例，接下来让我们由浅入深的学习 <code>R</code> 语言的相关知识。</p><p>本篇将主要介绍 <code>R</code> 语言的基本操作、变量和几种基本数据类型，好对 <code>R</code> 语言的使用方法有一个基本的概念。通过本篇的学习，你将了解到：</p><ol><li><code>R</code> 语言有哪些基本操作</li><li>什么是变量，以及如何给变量赋值</li><li><code>R</code> 语言有哪些基本数据类型，如何确定变量的数据类型</li></ol><h2 id="R-语言的基本操作"><a href="#R-语言的基本操作" class="headerlink" title="R 语言的基本操作"></a>R 语言的基本操作</h2><p><code>R</code> 语言的默认提示符是 <code>&gt;</code> ，它表示正在等待输入命令，每次输入命令后敲击回车即可执行当前命令。</p><p><img src="1.png" alt=""></p><p><code>R</code> 语言支持的基本操作主要有加、减、乘、除、取余和幂运算，对应的运算符分别为：+、-、*、/、%%、^。</p><p>加减乘除就不必多说了，但有一点需要提一下，跟许多语言不一样的是，<code>R</code> 语言中，除法运算得到的不是整数部分，而是包含小数部分的结果。</p><pre class=" language-R"><code class="language-R">> 9/2[1] 4.5> 9/4[1] 2.25> 11/3[1] 3.666667</code></pre><p>取余运算的含义是计算整除后的余数：</p><pre class=" language-R"><code class="language-R">> 9 %% 2[1] 1> 9 %% 4[1] 1> 9 %% 3[1] 0> 11 % 4错误: unexpected input in "11 % 4"</code></pre><p>在使用时需要注意的是有两个百分号组成，输入错误则会得上上述错误提示。</p><p>幂运算跟数学中的幂运算含义一致，<code>2^3</code> 代表的是2的3次幂：</p><pre class=" language-R"><code class="language-R">> 2 ^ 3[1] 8> 3 ^ 2[1] 9> 2 ^ 10[1] 1024> 2 ^ 100[1] 1.267651e+30</code></pre><h2 id="R-语言中的变量"><a href="#R-语言中的变量" class="headerlink" title="R 语言中的变量"></a>R 语言中的变量</h2><p>在使用 <code>R</code> 语言时，我们通常很难一步到位得到最终的结果，需要进行一些复杂的计算。这时我们便需要使用变量来存放计算得到的中间结果。</p><p><code>R</code> 语言中，可以将变量想象成一个盒子，我们可以将任何数据暂存到这个盒子里，但同一时刻，这个盒子只能保存一个数据，如果被多次赋值，则只会保存最后一次放入的数据。</p><p><code>R</code> 语言中的赋值符号是 <code>-&gt;</code>，虽然也可以使用 <code>=</code> 进行赋值，但强烈建议不要这样做，这样不仅显得不专业，而且在一些情况下会出现问题。</p><pre class=" language-R"><code class="language-R">> x <- 3> x <- 4> x <- 9> x[1] 9</code></pre><p><code>R</code> 语言中的变量不需要事先声明，直接使用即可。如果使用了一个之前没有出现过的变量，则会创建一个新的变量。<code>R</code> 语言中变量是区分大小写的，<code>x</code> 与 <code>X</code> 是两个不同的变量。</p><pre class=" language-R"><code class="language-R">> X错误: 找不到对象'X'> X <- 1> X <- 3> X[1] 3> x[1] 9</code></pre><p>变量都是有名字的，比如<code>x</code>、<code>y</code>、<code>stu_score</code>，变量的命名必须满足以下规则：</p><ol><li>只能使用字母（区分大小写）、数字、“_”（下划线）、“.”（英文句号），不能有中文、空格和其它特殊字符存在</li><li>不能以数字、下划线开头，开头必须是英文字母或者点</li><li>可以以点号开头，但点号后面的符号不能是数字</li></ol><p>在 <code>R</code> 语言中，如果非要搞一些骚操作，用一些奇怪的变量名，也不是不可以，需要用反引号来包裹。</p><pre class=" language-R"><code class="language-R">> `* 90` <- 10> `* 90`[1] 10> `变量` <- 20> `变量`[1] 20</code></pre><p>当然，不建议这样做，变量取名最好简单且有意义，这样可以减少与其他人的沟通成本以及日后的理解成本。</p><h2 id="R-语言中的基本数据类型"><a href="#R-语言中的基本数据类型" class="headerlink" title="R 语言中的基本数据类型"></a>R 语言中的基本数据类型</h2><p><code>R</code> 语言中主要数据类型有：向量、列表、矩阵、因子、数据框、数组。这些会在后面的文章中进行介绍，本篇只介绍基本的几种数据类型。</p><h3 id="1-逻辑型-logical"><a href="#1-逻辑型-logical" class="headerlink" title="1. 逻辑型(logical)"></a>1. 逻辑型(logical)</h3><p>逻辑型数据有两种可能的值，<code>TRUE</code> 或 <code>FALSE</code> 。</p><pre class=" language-R"><code class="language-R">> v <- TRUE> class(v)[1] "logical"> y <- FALSE> class(v)[1] "logical"> y <- false错误: 找不到对象'false'</code></pre><p><code>class</code> 函数可以获取变量的类型信息，可以看到，变量 <code>v</code> 和 <code>y</code> 都是 <code>logical</code> 类型。需要注意的是 <code>TRUE</code> 和 <code>FALSE</code> 必须全部大写，否则会出现上面的错误提示。</p><h3 id="2-数值型-numeric"><a href="#2-数值型-numeric" class="headerlink" title="2. 数值型(numeric)"></a>2. 数值型(numeric)</h3><p><code>R</code> 语言中数字的默认类型为数值型，在运算时需要注意其精度问题，当整数部分大于等于7位时，将舍弃小数部分，当整数部分小于7位时，与小数部分一起最多保留7位数字。</p><pre class=" language-R"><code class="language-R">> i <- 10> class(i)[1] "numeric"> j <- 11.1> class(j)[1] "numeric"> k <- 1.1234567890> class(k)[1] "numeric"> k[1] 1.123457> k <- 123456789.123456789> k[1] 123456789> k <- 1234567.123456789> k[1] 1234567> k <- 123456.123456789> k[1] 123456.1</code></pre><h3 id="3-整数型-integer"><a href="#3-整数型-integer" class="headerlink" title="3. 整数型(integer)"></a>3. 整数型(integer)</h3><p><code>R</code> 语言中，整数型需要使用数字+L来表示，如：<code>2L</code>、<code>11L</code>、<code>-10L</code>。</p><pre class=" language-R"><code class="language-R">> i <- 1L> class(i)[1] "integer"> j <- 22L> class(j)[1] "integer"> k <- -10L> class(k)[1] "integer"</code></pre><h3 id="4-字符型-character"><a href="#4-字符型-character" class="headerlink" title="4. 字符型(character)"></a>4. 字符型(character)</h3><p><code>R</code> 语言中字符型即字符串类型，通常为用单引号或双引号包围的字符串。</p><pre class=" language-R"><code class="language-R">> name <- "Frank"> class(name)[1] "character"> doc_name <- "study.mp4"> class(doc_name)[1] "character"</code></pre><h3 id="5-复数型-Complex"><a href="#5-复数型-Complex" class="headerlink" title="5. 复数型(Complex)"></a>5. 复数型(Complex)</h3><p><code>R</code> 语言是支持复数计算的，复数也是 <code>R</code> 语言的基本类型之一。</p><pre class=" language-R"><code class="language-R">> c1 <- 3 + 2i> class(c1)[1] "complex"> c2 <-6 - 3i> class(c2)[1] "complex"</code></pre><h3 id="6-原型-Raw"><a href="#6-原型-Raw" class="headerlink" title="6. 原型(Raw)"></a>6. 原型(Raw)</h3><p><code>R</code> 语言还有一种不太常见的基本数据类型，叫原型(<code>raw</code>)。<code>raw</code> 类型是直接使用其二进制内容来进行保存和使用的类型。</p><pre class=" language-R"><code class="language-R">> v <- charToRaw("Hello")> class(v)[1] "raw"> v[1] 48 65 6c 6c 6f</code></pre><h3 id="如何判断变量的类型"><a href="#如何判断变量的类型" class="headerlink" title="如何判断变量的类型"></a>如何判断变量的类型</h3><p>当我们拿到一个变量之后，如何判断它的数据类型呢？上面的例子中，其实已经有所提及，使用 <code>class()</code> 函数可以简单方便的查看变量的类型，但还有更简单的方式，为了判断某个变量<code>x</code> 保存的基本类型，可以用 <code>is.xxx()</code> 类函数，如<code>is.integer(x)</code>, <code>is.double(x)</code>, <code>is.numeric(x)</code>, <code>is.logical(x)</code>, <code>is.character(x)</code>, <code>is.complex(x)</code>, <code>is.raw(x)</code>。 其中 <code>is.numeric(x)</code> 对 <code>integer</code> 和 <code>double</code> 内容都返回真值。</p><pre class=" language-R"><code class="language-R">> is.character(s)[1] TRUE> is.character(v)[1] FALSE> is.raw(v)[1] TRUE> is.integer(i)[1] TRUE> is.numeric(i)[1] TRUE> is.complex(c1)[1] TRUE> is.integer(c1)[1] FALSE</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，本篇就告一段落了，相信通过本篇的学习，对 <code>R</code> 语言的基本数据类型能有一个整体的掌握，别忘了回顾一下之前的问题，这些你都了解了吗：</p><ol><li><code>R</code> 语言有哪些基本操作</li><li>什么是变量，以及如何给变量赋值</li><li><code>R</code> 语言有哪些基本数据类型，如何确定变量的数据类型</li></ol><p>之后的篇章中，将会继续介绍 <code>R</code> 语言的各方各面，让 <code>R</code> 语言能为我们的数据分析提供更强力的支持！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【R语言入门】R语言环境搭建</title>
      <link href="/2020/11/28/data-analysis/r-study-install/"/>
      <url>/2020/11/28/data-analysis/r-study-install/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>R</code> 语言是一个功能十分强大的工具，几乎绝大多数的数据分析工作都可以在 <code>R</code> 中完成，并且拥有很极强的绘图功能支持，能让你手中的数据以各种姿势进行可视化呈现，而且支持 <code>Windows</code>、<code>Mac OS</code>、<code>Linux</code> 系统，而且使用起来也比较简单方便。</p><p>如果想要开始学习数据分析，或者仅仅是想做出狂拽炫酷屌的数据分析图，那么 <code>R</code> 语言会是个不错的选择。</p><h2 id="R-下载与安装"><a href="#R-下载与安装" class="headerlink" title="R 下载与安装"></a>R 下载与安装</h2><p>打开 <code>https://cran.r-project.org/mirrors.html</code> ，根据自己所在的位置选择对应的镜像站，通常选择 <code>China</code> 下的镜像站。</p><p><img src="2.png" alt=""></p><p>根据自己使用的平台，选择对应安装包进行下载安装即可。</p><p>如果是 <code>Windows</code> 选择 <code>base</code> 版本进行下载安装即可。安装过程全部选择默认选项即可。</p><p><img src="3.png" alt=""><br><img src="4.png" alt=""><br><img src="5.png" alt=""></p><p>如果用的是 <code>Mac</code> ，则选择 <code>Download R for (Mac) OS X</code>，下载最新版本的安装包后进行默认安装即可。</p><p><img src="6.png" alt=""></p><p>安装完成之后，你将会看到一个朴实无华的图标，没错，这就是 <code>R</code> 语言本尊了。</p><p><img src="7.png" alt=""></p><h2 id="R-studio-下载与安装"><a href="#R-studio-下载与安装" class="headerlink" title="R studio 下载与安装"></a>R studio 下载与安装</h2><p>打开 <code>https://www.rstudio.com/products/rstudio/download/</code> ，选择 <code>Free</code> 版本进行下载。</p><p><img src="8.png" alt=""></p><p>这里会根据你所在平台显示对应的下载链接，点击下载即可。</p><p><img src="9.png" alt=""></p><p>安装时，除了安装位置，其余均选择默认选项即可。</p><p>安装好之后，你又能收获一个新图标，这次要更加圆润一点。</p><p><img src="10.png" alt=""></p><h2 id="R-语言简单实例"><a href="#R-语言简单实例" class="headerlink" title="R 语言简单实例"></a>R 语言简单实例</h2><p>主要工作已经完成，让我们动动小手，优雅的单击（或双击）<code>R Studio</code> 图标，来感受一下R 语言的魅力。</p><p>打开 <code>RStudio</code>，会在 <code>Consule</code> 面板看到 <code>R</code> 语言的版本、版权信息和一些有用的提示。</p><pre><code>R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"Copyright (C) 2020 The R Foundation for Statistical ComputingPlatform: x86_64-apple-darwin17.0 (64-bit)R是自由软件，不带任何担保。在某些条件下你可以将其自由散布。用'license()'或'licence()'来看散布的详细条件。R是个合作计划，有许多人为之做出了贡献.用'contributors()'来看合作者的详细情况用'citation()'会告诉你如何在出版物中正确地引用R或R程序包。用'demo()'来看一些示范程序，用'help()'来阅读在线帮助文件，或用'help.start()'通过HTML浏览器来看帮助文件。用'q()'退出R.</code></pre><p>整体界面如下图：</p><p><img src="11.png" alt=""></p><p>在 <code>consule</code> 面板中输入：<code>example(plot)</code>，轻轻敲击几次回车，就能看到 <code>plot</code> 函数的一些实例了。</p><pre class=" language-R"><code class="language-R">> example(plot)plot> Speed <- cars$speedplot> Distance <- cars$distplot> plot(Speed, Distance, panel.first = grid(8, 8),plot+      pch = 0, cex = 1.2, col = "blue")按<Return>键来看下一个图: plot> plot(Speed, Distance,plot+      panel.first = lines(stats::lowess(Speed, Distance), lty = "dashed"),plot+      pch = 0, cex = 1.2, col = "blue")按<Return>键来看下一个图: plot> ## Show the different plot typesplot> x <- 0:12plot> y <- sin(pi/5 * x)plot> op <- par(mfrow = c(3,3), mar = .1+ c(2,2,3,1))plot> for (tp in c("p","l","b",  "c","o","h",  "s","S","n")) {plot+    plot(y ~ x, type = tp, main = paste0("plot(*, type = \"", tp, "\")"))plot+    if(tp == "S") {plot+       lines(x, y, type = "s", col = "red", lty = 2)plot+       mtext("lines(*, type = \"s\", ...)", col = "red", cex = 0.8)plot+    }plot+ }按<Return>键来看下一个图: plot> par(op)plot> ##--- Log-Log Plot  with  custom axesplot> lx <- seq(1, 5, length = 41)plot> yl <- expression(e^{-frac(1,2) * {log[10](x)}^2})plot> y <- exp(-.5*lx^2)plot> op <- par(mfrow = c(2,1), mar = par("mar")-c(1,0,2,0), mgp = c(2, .7, 0))plot> plot(10^lx, y, log = "xy", type = "l", col = "purple",plot+      main = "Log-Log plot", ylab = yl, xlab = "x")按<Return>键来看下一个图: plot> plot(10^lx, y, log = "xy", type = "o", pch = ".", col = "forestgreen",plot+      main = "Log-Log plot with custom axes", ylab = yl, xlab = "x",plot+      axes = FALSE, frame.plot = TRUE)plot> my.at <- 10^(1:5)plot> axis(1, at = my.at, labels = formatC(my.at, format = "fg"))plot> e.y <- -5:-1 ; at.y <- 10^e.yplot> axis(2, at = at.y, col.axis = "red", las = 1,plot+      labels = as.expression(lapply(e.y, function(E) bquote(10^.(E)))))plot> par(op)> </code></pre><p>下面是输出的图片：</p><p><img src="12.png" alt=""><br><img src="13.png" alt=""><br><img src="14.png" alt=""><br><img src="15.png" alt=""></p><p>这是基础绘图函数 <code>plot</code> 的几个示例，可以看出它能支持的图形已经有许多了，后面会有专门的文章来介绍 <code>plot</code> 函数的详细使用方法。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>到此为止，<code>R</code> 语言就已经顺利的收入囊中了，恭喜你，又掌握了一门语言（的 <code>Hello world</code>）了。【此处应有掌声】</p><p>接下来，会继续介绍 <code>R</code> 语言的基本用法和其中比较重要的函数使用方法，目标是能使用 <code>R</code> 语言对数据进行初步分析，以便能在生活和工作之中有所应用。</p><p>之所以开始写 <code>R</code> 语言相关的文章，是因为在工作中察觉到了数据的重要性，虽说应该让专业的人来做专业的事情，但如果对此一无所知，又怎么知道专业的人能够做什么事情呢，何况如果一点点小事情就要找数据的同学提需求未免不太合适，自己先有头绪和初步验证后也许会更有效率。而且技多不压身嘛。加之在大学时就对数据分析感兴趣，也曾经学过 <code>R</code> 语言，现在算是重温和复习吧。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> R </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【周末随想】我思故我在</title>
      <link href="/2020/11/01/thoughts/cogito-ergo-sum/"/>
      <url>/2020/11/01/thoughts/cogito-ergo-sum/</url>
      
        <content type="html"><![CDATA[<p>又是一个周末的晚上，刚在客厅看完令人爆笑的脱口秀，回到自己房间，关了灯，做几次深呼吸，把心情平静了下来。虽然刚才的脱口秀确实让人忍俊不禁，但此刻的独处更让我欢喜。在这漆黑的房间里，闭上眼，聆听周围的一切，感受心跳的旋律和呼吸的节奏，能获得一种独特的平静。</p><p>闭目养神了片刻，睁开双眼，路由器的信号灯在角落里跳动着。我打开窗，一阵微风吹入，周身泛起一股寒意。不知不觉，已是深秋，习惯性的抬头看了一眼天空，窗外的夜空，被周围的建筑切割成了好几片，那一个个小方格里，透出或黄或白的灯光，每一盏灯背后，都在上演着各自的故事。</p><p>我披了外套，在小区里踱起步来。今晚的月亮挂的很高，漆黑的夜空散布着几片白云，在这漆黑的画布上，启明星的光芒显得格外耀眼，皓月悬空，孤星伴月，给这深秋的夜色凭添了几分孤冷。周遭路灯的光影，让这薄弱的月光毫无抗衡之力，只得往暗黑处避让。于是我往黑暗里走，去寻找这散落的月光。</p><p>此时的小区已经没有了白日里的热闹景象，路上只有稀疏几个晚归的行人。路旁白日里还妖艳绽放的小花，在黑夜里黯然失色，只剩下孤零零的身影，在这微冷的晚风中摇曳。行至暗处，才终于寻得几许月光。月光如流水般轻盈，静静地从树叶的夹缝中滑落下来，洒在地上，仿佛给周围的树木都披上了一层薄纱。突然想到苏轼的诗词，“何处无月，何处无竹柏，但少闲人如吾两人耳”，此刻倒是羡慕起他来，虽已成闲人，毕竟还有人可以共赏这月色。</p><p>抬头望向那月亮，月光流转千年，见证了无数的历史变迁，兴衰荣辱，此时此刻，却仍旧安安静静地在夜空中凝视着这一切，让我觉得沧桑而又孤傲。细细想来，我也只是这历史长河里茫茫众生中的一个，无法超脱于世，不禁又想到王国维的那句“试上高峰窥皓月，偶开天眼觑红尘，可怜身是眼中人”，好一个“可怜身是眼中人”，让词人苦闷又无奈的情绪跃然纸上。但这一切就应如此，或只能如此了吗。我想，关于人生的这道题，也许还有其他解法。</p><p>白日里看到一些关于笛卡尔“我思故我在”的文章，觉得很有意思，于是又回味起来。</p><p>笛卡尔是一位很有意思的哲学家，他主张怀疑一切，对自己所学的一切都表示怀疑，他认为一切知识都是不可靠的，因为它们都建立在不可靠的基础之上。但他并不是怀疑论者，而是希望为怀疑论找到一个答案，希望在一切怀疑中找到绝对可靠的“阿基米德点”。他构思了一个有趣的思想实验，如果有一个邪恶的魔鬼，可以让我们产生各种幻觉，包括我们所见所闻所知所感，甚至连最简单的事物也可以欺骗我们，甚至可以让我们以为一加一等于三，而且不会发现这其实是错的，那有没有什么是它绝对不可能骗过我们的，有没有什么事情是绝对不可怀疑的。就像盗梦空间里的梦境，我们如何知道自己是否身处梦境，是否能找到那只陀螺？又如同黑客帝国里，我们怎么知道自己是不是被连在一台巨大的超级计算机背后，我们所有的感觉也许只是计算机生成的指令，有没有什么是绝对正确的？</p><p>“我思故我在”便是笛卡尔给出的答案，即使所见所闻都是假象，至少有一事无论如何都是真的，那便是“我在思考”，这便证明作为思考主体的我必定也存在，当然，这里说的“我”并不是指作为客观身体而存在的我，而是作为精神主体而存在的我。很多人对这句话都有着误解，把“故”理解成了“所以”，于是“我思”成了“我在”的原因，更有甚者，甚至说出“不思考便不存在”这样的荒诞逻辑。这两者都犯了逻辑错误，“我在思考，所以我存在”和“我在思考，证明我存在”，这两个解释听起来没什么区别，但再仔细品品，“所以”如果用“导致”来替换的话，区别就能比较明显的看出来了，看看下面这个例子：“我午饭吃了很多，证明我很饿”，“我吃了很多”确实可以作为“我很饿”的证据，但如果换成“我午饭吃了很多，所以我很饿”，从逻辑上就不对了，“我午饭吃了很多”并不少导致“我很饿”的原因，它们并不是因果关系，“我饿”在先，“吃很多”在后。同样，“我思”并不是“我在”的原因，“我在”也并不是“我思”的结果，而是“我思”能证明“我在”，“我在”在先，“我思”在后。至于“不思考便不存在”更是逻辑错的离谱，举个例子，“湖南人是人”这个命题是正确的，但“不是湖南人便不是人”这个命题显然就错的有些嚣张了。</p><p>这样咬文嚼字似乎略显无趣，但有时为了追寻真理，却不得不如此。</p><p>我曾经也有一段时间经常有这样的困惑，认为我所知道的一切不过是建立在不可靠的认识之下的，我所见所闻未必为真，我看到的也许只是故事的某个片段，甚至不排除是被人刻意剪辑过具有误导性的片段，就此得出的知识经验实在难说有什么价值。在这种思想的影响下，我对身边的一切都产生着怀疑，并怀疑真理是否真的存在，求知是否还有意义。经过一番思索，我终于给出了自己的答案。</p><p>我必须承认我所有的知识都有可能是错误的，也许只是真实世界经过某种转换后出现在我心中的映射，所以我接受它随时会被驳倒的可能性，但只要它能很好的服务于当下，并且没有有力的证据表明其错误时，我便仍旧能够相信它。也许我确实只是一个缸中之脑，所有的一切都是虚幻，但如果没有足够的证据来支持，这个只会让我徒增烦恼的猜想便不再有什么意义。当然，由于对这个世界没有足够的了解，有些事也许确实跟我所理解的不一样，我所理解的世界跟真实的世界也许是两回事，所以需要不断去探索和学习，才能了解更多关于这个世界的真相。活在当下，便是我的选择。</p><p>说回当下，老实说，今年的状态一直很差劲。也许是因为失去了情感的寄托，生活少了很多乐趣和期待，学习上也懈怠了，从博客更新的频率便可以看出。一直想方设法想要调整，也试图通过减肥来转移注意力。虽然在两个月的时间里，成功减掉了二十多斤，但仍旧没有找到生活的激情。以前我总以为只要足够努力，便能过上想要的生活。但仔细想想，我对于理想生活的构想其实还很模糊，对于自己追求的事物都尚未确定，又怎么知道该如何努力，如何选择。所以我决定放慢脚步，多思考问题的本质，尝试更多的可能性。人类的存在也许并没有什么意义，但我相信每个人的生活各有各的意义。</p><p>一阵FunHub吹过，把我从无尽的思绪中拉回现实。月光如水，依旧流淌怀中，我轻叹一声，捧了一捧月光，一饮而尽。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【聊聊认知】你以为你以为的就是你以为的吗</title>
      <link href="/2020/05/31/thoughts/why-are-we-biased/"/>
      <url>/2020/05/31/thoughts/why-are-we-biased/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这周是双休，时间比较充裕，睡睡懒觉后发现还有时间，便想写写文章，来对前段时间的思考做一个总结。</p><p>似乎是从知识付费兴起之后，<code>认知</code>这个词便开始成为了热门词汇，似乎只要谈到<code>认知</code>，便能将自身高度提升一个档次。</p><p>刚来上海的时候，还是一个愣头青（虽然一直都是），对<code>认知</code>这种东西嗤之以鼻，觉得不过是资本主义用来收割年轻韭菜的迷魂汤，但后来经历的一些事，改变了我的看法。其中有一件事让我记忆犹新。</p><p>时间回到2018年，那时的创业新风口是带有大数据和人工智能加持的<em>新零售</em>，而我也刚好进入了一家做新零售的创业公司，在货架组做着后端开发的工作。</p><p>一天，朋友约我一起吃饭，在吃饭聊天时，相互寒暄了近况，我说我在的公司是做<em>新零售</em>的，朋友对此似乎很感兴趣，并说了很多关于<em>新零售</em>的见解，大数据、推荐算法、人工智能、用户画像等等名词顺手捏来，当我听得一头雾水时，朋友问我有什么看法，我却支支吾吾的说道，我们做的不就是把货架铺到人家公司里，让商品离人更近一点，缩短商品的最后一公里，然后再弄一个小程序入口给用户使用，不就这么多东西吗。可想而知，最后只得跟朋友面面相觑。</p><p>现在想来，当时我对于自己所从事行业的认识确实有失偏颇，只知道<em>新零售</em>是当时热门的风口，大家都在讨论，大家都觉得这个行业前途无量，而离它太近却反而看不到它的全貌，只见树木不见森林。但这也跟我并没有主动去思考这件事有着莫大的关系。那天的聊天，让我逐渐意识到自己的思维定势和盲区，而且不仅仅是工作，对于生活中其它很多事情，关于未来的思考，也是如此。我想，要是一直这样下去，恐怕真要做一辈子低阶码农了。</p><p>于是，我便开始认真对待提升<code>认知</code>这件事了。</p><p>把我领进门的第一本书，应该算是<code>成甲</code>老师的《好好学习》，学习了关于如何管理个人知识的方法论。里面有几处提到了<code>万维钢</code>老师的《精英日课》，于是我又去学习了这门课程，万老师的《精英日课》里会讲解历史上重要的科学发现和现在最前沿的科学理论，也会挑一些有意思的书来进行讲解，极大的扩展了我的认知视野。其中万老师讲解的一本书让我觉得很有意思，那便是以色列作家<code>尤瓦尔赫拉利</code>的《人类简史》，听完后觉得不过瘾，于是又找到书来读。这本书可以说给予了我极大的震惊，让我发现原来我生活的世界并不是像我以为的那样，就像万老师所说，<strong>“你有你的计划，世界另有计划”</strong>。而且，我发现，如果思考一些比我自身更大的事物时，生活中那些繁琐的小事便显得不足一提，很多烦恼也随之消失。</p><p>我想，不能在将来被这个世界所抛弃，我必须知道这个世界正在发生什么，未来最有可能的方向是什么。于是我找了更多的书和课程来学习，也不断提升自己认知的高度。过年回家跟好友聊天时，他说，你好像成熟了许多，我微笑着，因为我知道这一切是怎么发生的。</p><p>说了这么多废话，无非是想表达<code>认知</code>这个东西确实很重要。下面是我关于“<code>认知</code>是什么”以及“<code>认知偏差</code>是如何产生的”这两件事的一些见解和总结，希望也能对你有所帮助。</p><h2 id="什么是认知"><a href="#什么是认知" class="headerlink" title="什么是认知"></a>什么是认知</h2><blockquote><p><code>认知</code>是指人们<strong>获得知识</strong>或<strong>应用知识</strong>的过程，或<strong>信息加工</strong>的过程，这是人的最基本的心理过程。它包括<em>感觉</em>、<em>知觉</em>、<em>记忆</em>、<em>思维</em>、<em>想像</em>和<em>语言</em>等。人脑接受外界输入的信息，经过头脑的加工处理，转换成内在的心理活动，进而支配人的行为，这个过程就是<strong>信息加工</strong>的过程，也就是<code>认知过程</code>。（来自<code>百度百科</code>）</p></blockquote><p>简单来说，<code>认知</code>就是我们如何去认识和了解这个世界的过程。我们通过五官感觉来收集信息，然后在大脑中进行处理加工，从而产生知识。这是一个看似简单，却极其复杂的过程，涉及到我们人体内的一系列生化神经过程，最终产生出知识，“存储”在我们的大脑中，进而为后续行动提供支持和指导。</p><p>我们出生时认知过程其实大同小异，虽然智力水平有高低，不过出类拔萃者总是少数，但成年后形成的认知水平却千差万别。有人说，<em>人与人之间的差距比人与猪之间的差距还大</em>，这里说的差距，其实就是<code>认知</code>上的差距。想要提升<code>自我认知</code>，便需要对<code>认知过程</code>有一个正确的认识。</p><p><code>认知过程</code>是我们获取知识的必要手段，而这些知识可以指导我们的生存发展。</p><p>如果把从信息中提炼知识的过程比作是从金矿中提取黄金，有的人可以提取出纯度很高的金子，而有人却只能从中得到一堆的杂质。<strong>提升认知，本质上来说，就是提升从复杂信息中筛选提取出有用信息并归纳总结的能力</strong>。</p><h2 id="认知偏差"><a href="#认知偏差" class="headerlink" title="认知偏差"></a>认知偏差</h2><p>随着信息技术的发展，我们每天能接触到信息成指数型增加，每天都有无数的信息试图进入我们的视野，这些信息有真有假，质量也参差不齐。</p><p>那些以牟利为目的而批量生产的垃圾文章，看似有用却食之无味的鸡汤文，看起来大快人心却误人心智的网络爽文，就像迷魂汤一样，试图麻醉我们的心智，抢占我们的注意力，让我们活在虚无的幻想世界里。更不用说越来越多为了吸引眼球而造谣生事的文章，通过片面截取，东拼西凑，断章取义甚至直接捏造是非，从而推导出看似有趣实则荒谬的结论。</p><p>如果你相信了一个错误的观点，从而产生了错误的知识，那么很可能会从这个错误的知识推导出更多错误的知识。<strong>这些错误的知识会像病毒一样会自我繁殖</strong>，占据你的大脑，扰乱你的行为。所以只有掌握正确的炼金法则，才能在这个复杂的世界里找到生存发展之路。</p><p>我们每隔一段时间都会检测自己的视力，以对我们的眼镜度数做出调整，来更好的看清这个世界。如果把我们的思想则比作是认知这个世界的眼镜的话，你可曾检测过自己的<code>认知视力</code>？如果眼镜度数不对，那我们对世界的认知也会是模糊失真的。而我们的<code>认知</code>也会指导我们的判断和行为，<strong>错误的认知很可能会带来错误的判断和选择</strong>。</p><p>那么我们为什么会产生错误的认知呢？这就跟我们大脑的运行机制有关。</p><p>我们大脑的思考框架由两部分组成：<code>系统1</code>和<code>系统2</code>。<code>系统1</code>代指<em>无意识</em>的思考模式，<code>系统2</code>代指<em>有意识</em>进行的思考模式。<code>系统1</code>思考或判断非常快捷，因此我们往往第一时间通过它在脑海中形成主观印象和初步判断。但有时<code>系统1</code>可能得不到结论或是得到错误的结论，因此我们也经常求助<code>系统2</code>进行更为复杂和费力的思考过程，以图补充或纠正系统1。但不等于<code>系统1</code>是感性的、<code>系统2</code>是理性的。实际上<code>系统2</code>经常受到<code>系统1</code>的影响。这种影响可能是正确的，也可能是错误的。而且<code>系统2</code>很懒惰，经常疏于校验，从而无法纠正<code>系统1</code>形成的错误。</p><p>当<code>系统1</code>产生的错误被<code>系统2</code>所接受或者<code>系统2</code>犯错时，<code>认知偏差</code>就产生了。</p><h2 id="演绎法"><a href="#演绎法" class="headerlink" title="演绎法"></a>演绎法</h2><p>我们认知这个世界主要通过两种方式，<code>演绎法</code>和<code>归纳法</code>。</p><p><code>演绎法</code>是使用我们自定的一些客观规律、基本原则和基本假设作为前提，对已知的信息进行加工处理，进一步推演得出未知的结论。</p><p>下面是来自维基百科的解释：</p><blockquote><p><code>演绎推理</code>、<code>正向推理</code>在传统的亚里士多德逻辑中是“结论，可从叫做‘前提’的已知事实，‘必然地’得出的推理”。如果前提为真，则结论必然为真。这区别于溯因推理和归纳推理：它们的前提可以预测出高概率的结论，但是不确保结论为真。<br>“演绎推理”还可以定义为结论在普遍性上不大于前提的推理，或“结论在确定性上，同前提一样”的推理。</p></blockquote><p>举例来说，如果我们知道明天要下雨，便会做出一个决策，明天出门要带伞。我们把这个简单的决策过程拆解一下：</p><blockquote><p>基本判断：下雨出门要带伞<br>信息：明天会下雨<br>结论：明天出门要带伞</p></blockquote><p>再举一个例子，亚里士多德的三段论：</p><blockquote><p>基本判断：所有人都会死<br>信息：苏格拉底是人<br>结论：苏格拉底会死</p></blockquote><p>这个过程是一个<code>逻辑推演</code>的过程，<strong>根据基本假设和信息来推断出未知的信息</strong>。</p><p>如果你看过《名侦探柯南》或者《福尔摩斯》等侦探题材的小说或电影，一定会对侦探们对逻辑推理的巧妙运用留下深刻印象。</p><p>演绎法看似严谨，但对于普通人来说，其实每一步都有可能会出错，从而导致<code>认知偏差</code>的出现。</p><p>首先，<strong>我们用作前提的基本假设和原则也许来源于人云亦云或当下流行的观点</strong>。比如“仗义每逢屠狗辈，负心多是读书人”，“长得帅的人通常性格不好”，“渣男锡纸烫，渣女大波浪”，这些简单粗暴而又朗朗上口，能迎合内心意淫想法的观点很容易在不经意间溜进我们的思想。</p><p>其次，<strong>基本规律可能来自于我们的生活经验总结</strong>，而由于我们生活范围和经历有限，加上我们以自我为中心的心理因素，总结出的基本规律也许只是小范围内有效，甚至可能完全无效。</p><p>另外，<strong>我们得到的信息可能并不准确甚至完全是错的</strong>。你也许只是在跟朋友聊天时听朋友随口说了一句天气情况，而他可能看错了日期。更何况天气还隐含了概率的因素，即使是大概率事件也不代表一定会发生。</p><p>最后，我们在<strong>推演结论的过程中可能会因为逻辑错误而得出错误的结论</strong>。比如：“美国人会说英语，Alice 会说英语，所以 Alice 是美国人”，“你喜欢用苹果手机，而苹果手机很贵，所以你喜欢用很贵的东西”，这些让人很容易疏忽的常见的<code>逻辑谬误</code>也是产生<code>认知偏差</code>的重要原因。</p><h2 id="归纳法"><a href="#归纳法" class="headerlink" title="归纳法"></a>归纳法</h2><p>说完了<code>演绎法</code>再来看看<code>归纳法</code>。</p><p><code>演绎法</code>的推演过程是<strong>由一般到特殊</strong>，而<code>归纳法</code>恰好相反。<code>归纳法</code>是<strong>对事物进行归纳总结，从普遍的现象中总结出一般性的结论</strong>。</p><p>下面解释来自维基百科：</p><blockquote><p><code>归纳法</code>或<code>归纳推理</code>，有时叫做<code>归纳逻辑</code>，是论证的前提支持结论但不确保结论的推理过程。它基于对特殊的代表的有限观察，把性质或关系归结到类型；或基于对反复再现的现象的模式的有限观察，公式表达规律。</p></blockquote><p>举个例子：</p><blockquote><p>冰是冷的。<br>弹子球在击打球杆的时候移动。</p></blockquote><p>推断出普遍的命题如：</p><blockquote><p>所有冰都是冷的。<br>所有弹子球都在击打球杆的时候移动。</p></blockquote><p>正如你看到的那样，归纳法很容易出现过度普遍化的情况，我们经常会根据我们观察到的有限例子具有某种特性，便轻率的得出其它事物也具有相同特性的结论。</p><p>举个很常见的例子，很多人都会说，“湖南人都喜欢吃辣”，于是遇到像我这样不那么喜欢吃辣的湖南人时，反而会质问我，“你到底是不是湖南人”。他们似乎把“大多数”这个词给省略掉了，“大多数湖南人喜欢吃辣”不代表“所有湖南人都喜欢吃辣”。而且这个大多数也仅仅是观测到的结果，具体比例也并没有数据支撑。</p><p>（关于吃辣，我刚好在一席上发现了一个很有意思的视频，可以消除一些大家对于辣椒的误解，大家有兴趣也可以看看：<a href="https://yixi.tv/speech/831。）" target="_blank" rel="noopener">https://yixi.tv/speech/831。）</a></p><p>还有一个更出名的例子，那便是<code>黑天鹅</code>，这也是塔勒布的<code>《黑天鹅》</code>一书中所阐述的主要概念。</p><blockquote><p>在18世纪欧洲人发现澳洲之前，由于他们所见过的天鹅都是白色的，所以在当时欧洲人眼中，天鹅只有白色的品种。直到欧洲人发现了澳洲，看到当地的黑天鹅后，人们认识天鹅的视野才打开，只需一个黑天鹅的观察结果就能使从无数次对白天鹅的观察中归纳推理出的一般结论失效，引起了人们对认知的反思－以往认为对的不等于以后总是对的。“黑天鹅”隐喻那些意外事件：它们极为罕见，在通常的预期之外，在发生前，没有任何前例可以证明，但一旦发生，就会产生极端的影响。</p></blockquote><p><code>归纳推理</code>过程中也<strong>很容易由于样本的有限性和特殊性而导致统计偏差，得出一些错误的结论</strong>。比如<code>幸存者偏差</code>、<code>辛普森悖论</code>、<code>选择性偏差</code>、<code>伯克森悖论</code>等等，关于这些统计偏差，后面会有文章来做更详细的说明，这里就不展开讨论了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看完上面的说明，我们的<code>认知体系</code>似乎显得有些弱不经风。但事实上并非如此，<strong>我们的认知是能够在成长过程中不断学习进化的</strong>，能够调整和提升认知的人便有机会取得更多的资源，机会来临时也更容易抓住。而认知有限的人，在发展到一定程度后，认知水平就会成为成长的瓶颈，很难取得更高的成就。有一句话说的好，你只能赚到你认知水平范围内的钱，凭运气赚的钱，迟早会凭本事亏掉。</p><p>也许你还是会问，这跟我们在现实生活中看到的似乎又不太一样。为什么有些学习差的人反而赚了大钱，而很多大学生却只能碌碌无为的度过一生？难道大学生的认知水平反而更低吗？</p><p>如果你问出这样的问题，显然又掉入了<code>幸存者偏差</code>的陷进里，那些学习不好，过得也很差的人并没有出现在你的视野里，而那些学习成绩好也取得了巨大成就的人也被你选择性忽略掉了。<strong>因为他们的新闻和传播阈值都比较低，反常的事物更容易吸引人目光和注意</strong>。</p><p>既然我们的认知如此脆弱，那我们该怎么做呢？我觉得可以从这几个方面入手改善：</p><ol><li><strong>放平心态，认清现实</strong>。</li></ol><p>如果你跟我一样，也发现自己的认知水平亟待提高，那么承认并接受这个事实，然后摆平心态，是我们必须做的一步。接受事实是改变的第一步。如果拒绝承认，每次提及都主动回避，进入自我保护姿态，那改变就无从谈起了。</p><ol start="2"><li><strong>多结交优秀的朋友</strong>。</li></ol><p>如果你身边都是跟你一样，甚至不如你的人，那你可能会沉溺在虚无的自我满足中。与优秀的人为伍，并努力让自己跟上他们的脚步，学习他们思考的方式。“想要得到某样东西的最好方法，就是让自己配得上它”，所以需要努力提升自我并向他们靠近。这里有一个很容易陷入的心理陷进，对于优秀的人，近的会嫉妒，远的会羡慕；够得着的会嫉妒，够不着的会羡慕。想要加入他们的队伍，就必须先克服这样的心理状态。</p><ol start="3"><li><strong>分清事实和观点</strong>。</li></ol><p>无论是交流还是阅读，我们很容易把观点和事实混为一谈，但大部分时候，它们都有着明显的边界。关于事实，我们不应该产生争论和分歧，而关于观点，我们可以相互交流探讨。很多时候，我们就是因为把二者混为一谈，导致产生偏见和谬误。</p><ol start="4"><li><strong>多阅读，努力提升自我认知</strong>。</li></ol><p>这也是我觉得最有效，最直接的方式。多看看那些优秀前辈们写的书，可以从中得到不少启发。比如<code>尤瓦尔赫拉利</code>的<code>《人类简史》</code>、<code>《今日简史》</code>和<code>《未来简史》</code>，塔勒布的<code>《黑天鹅》</code>、<code>《随机漫步的傻瓜》</code>、<code>《反脆弱》</code>、<code>《非对称风险》</code>，<code>丹尼尔卡尼曼</code>的<code>《思考，快与慢》</code>，这类的书籍很多，多加阅读可以增加对自我和世界的认知。</p><p><strong>活到老，学到老</strong>，未来的世界还会有很多新鲜的事，只要活得足够久，就会遇到各种情况，如何再这个复杂多变的世界里坦然应对可能来临的变化，我想你心中已有了答案。所以，一起加油吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thoughts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】使用Hexo+github pages+travis ci搭建好看的个人博客（三）</title>
      <link href="/2020/05/04/hexo/hexo-theme/"/>
      <url>/2020/05/04/hexo/hexo-theme/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>前两篇文章介绍了 <code>Hexo</code> + <code>github pages</code> + <code>travis ci</code> 进行自动化部署，并介绍了 <code>Hexo</code> 的配置文件中的各个属性，相信通过前两篇文章的学习，你已经学会了如何搭建自己的博客，并能够根据自己的需要进行个性化配置。</p><p>这一篇将以 <code>Matery</code> 这款主题为例，说明一下主题应该如何配置。包括主题配置、插件设置、注意事项等。</p><h2 id="设置博客主题"><a href="#设置博客主题" class="headerlink" title="设置博客主题"></a>设置博客主题</h2><p>先到<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a> 选择你喜欢的主题，点击它的标题（注意，点图片是进去 <em>demo</em> 站点，点标题才是跳转到对应到 <em>github</em> 仓库），跳转到 <em>github</em> 仓库，复制其仓库地址。</p><p>比如我使用到主题是 <code>Matery</code> ，其项目地址为：<code>git@github.com:blinkfox/hexo-theme-matery.git</code>。</p><p>打开本地目录，来到与我们的博客项目同级的目录（注意是同级，不是在博客项目内部），将主题项目克隆到本地。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:blinkfox/hexo-theme-matery.git</code></pre><p>在博客项目下的 <em>themes</em> 文件夹里新建一个叫 <em>matery</em> 的文件夹，然后将主题文件复制到这个文件夹里：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> breeze-blog/themes/matery<span class="token function">cp</span> -r hexo-theme-matery/* breeze-blog/themes/matery</code></pre><p>这里的 <em>breeze-blog</em> 是我的博客项目所在的文件夹，这里替换成你的即可。</p><p>再次打开我们的配置文件(<em>_config.yml</em>)，修改 <em>theme</em> 属性，设置为博客主题所在的文件夹名，这里即为 <em>matery</em>，注意要与文件夹名称完全一致。</p><p>然后我们重新生成一下博客静态文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> breeze-bloghexo clean <span class="token operator">&amp;&amp;</span> hexo generatehexo server</code></pre><p>然后再打开我们的博客地址：<code>localhost:4000</code>，我们的主题便设置好了。</p><p><img src="https://i.loli.net/2020/05/04/YKwFax1NrtVL6Zo.jpg" alt="hexo-theme-1.jpg"></p><p>但现在大部分信息都是默认数据，所以我们需要根据需要进行自定义设置，不同主题的配置文件都不太一样，因此设置方法也有所不同，这里仅介绍 <code>Matery</code> 主题的设置方法。</p><h2 id="主题内容自定义"><a href="#主题内容自定义" class="headerlink" title="主题内容自定义"></a>主题内容自定义</h2><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>如果你点击首页最上面的那一栏，会发现很多页面打开是没有的，因为我们还没有创建对应的页面，所以需要先创建对应的页面。</p><p><img src="https://i.loli.net/2020/05/04/9o7sjVdBMcm24TP.jpg" alt="hexo-theme-2.jpg"></p><p>先新建分类 <code>categories</code> 页，<code>categories</code> 页是用来展示所有分类的页面，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑新建的页面文件 <em>/source/categories/index.md</em>，写入以下内容：</p><pre><code>---title: categoriesdate: 2020-05-04 10:40:13type: "categories"layout: "categories"---</code></pre><p>然后新建标签 <code>tags</code> 页，<code>tags</code> 页是用来展示所有标签的页面，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑新建的页面文件 <em>/source/tags/index.md</em>，写入以下内容：</p><pre><code>---title: tagsdate: 2020-05-04 10:40:14type: "tags"layout: "tags"---</code></pre><p>接下来是新建 <code>about</code> 页，<code>about</code> 页是用来展示关于我和我的博客信息的页面，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑新建的页面文件 <code>/source/about/index.md</code>，写入以下内容：</p><pre><code>---title: aboutdate: 2020-05-04 10:40:15type: "about"layout: "about"---</code></pre><p>然后新建留言板 <code>contact</code> 页，<code>contact</code> 页是用来展示留言板信息的页面，方便其他人进行统一留言，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑新建的页面文件 <em>/source/contact/index.md</em>，写入以下内容：</p><pre><code>---title: contactdate: 2020-05-04 10:40:16type: "contact"layout: "contact"---</code></pre><p>注意，留言板功能依赖于第三方评论系统，需要先激活评论系统才有效果，如果嫌麻烦不想使用，也可以不处理，后面在菜单栏里去掉这一选项即可。</p><p>最后，新建友情链接 <code>friends</code> 页，<code>friends</code> 页是用来展示友情链接信息的页面，命令如下：</p><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑新建的页面文件 <em>/source/friends/index.md</em>，写入以下内容：</p><pre><code>---title: friendsdate: 2020-05-04 10:40:17type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <em>_data</em> 目录，在 <em>_data</em> 目录中新建 <em>friends.json</em> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://mfrank2016.github.io/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"FunHub"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"技术博主，文章还不错"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://mfrank2016.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://draveness.me/images/draven-logo.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"真没什么逻辑"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"面向信仰编程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://draveness.me/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>这里可以根据需要进行删减，当然，要看效果可以先这样设置，之后再来修改也不迟。</p><p>新建完页面后，我们再重新生成一下博客静态页，然后运行一下项目，便能看到效果了。这里标签页和分类页都只会展示现有博客的标签和分类数据，所以如果还没有文章设置标题或者分类，那么对应页面是没有数据的。要想看到效果，就得先写几篇文章。</p><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中查找</p><pre class=" language-yml"><code class="language-yml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p><pre class=" language-yml"><code class="language-yml">menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre class=" language-yml"><code class="language-yml">highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">search:  path: search.xml  field: post</code></pre><p>效果图如下：</p><p><img src="https://i.loli.net/2020/05/04/RrE3pQdq9CmtcTP.jpg" alt="hexo-theme-3.jpg"></p><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 <em>Hexo</em> 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin" target="_blank" rel="noopener">hexo-permalink-pinyin</a> <em>Hexo</em> 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i hexo-permalink-pinyin --save</code></pre><p>在 <em>Hexo</em> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre class=" language-yml"><code class="language-yml">postInfo:  date: true  update: true  wordCount: true # 设置文章字数统计为 true.  totalCount: true # 设置站点文章总字数统计为 true.  min2read: true # 阅读时长.  readCount: true # 阅读次数.</code></pre><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p><em>Matery</em> 主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis" target="_blank" rel="noopener">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save</code></pre><p>在 <em>Hexo</em> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">githubEmojis:  enable: true  className: github-emoji  inject: true  styles:  customEmojis:</code></pre><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><pre><code>npm install hexo-generator-feed --save</code></pre><p>在 <em>Hexo</em> 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre class=" language-yml"><code class="language-yml">feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/" target="_blank" rel="noopener">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/" target="_blank" rel="noopener">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code>&lt;% if (theme.socialLink.github) { %&gt;    &lt;a href="&lt;%= theme.socialLink.github %&gt;" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-github"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% } %&gt;</code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre class=" language-yml"><code class="language-yml"># 是否在首页显示音乐music:  enable: true  title:             #非吸底模式有效    enable: true    show: 听听音乐  server: netease   #require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    #require song, playlist, album, search, artist  id: 503838841     #require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取示例: 打开手机版网易云音乐，选择喜欢的歌单，然后点击分享</p></blockquote><p>我这里随便选了一个歌单，分享后的文字长这样：</p><blockquote><p>分享真咸鱼饼干的歌单《青年节：致逐梦人，有志者事竟成》<a href="http://music.163.com/playlist/4965675848/1548006936/?userid=120124365" target="_blank" rel="noopener">http://music.163.com/playlist/4965675848/1548006936/?userid=120124365</a> (@网易云音乐)</p></blockquote><p><code>4965675848</code> 这就是歌单的id，文件里默认设置的歌单其实也还不错，歌挺多的，所以如果没什么特殊要求，使用默认歌单也不错。</p><p>⚠️这里需要注意一点，如果你想要替换成自己的歌单时，会发现，后续歌单的更新是不会影响到它的，这也是我捣鼓半天才发现的，音乐插件使用的是 <em>Aplayer</em> 播放器，在 <em><a href="https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js" target="_blank" rel="noopener">https://cdn.jsdelivr.net/npm/meting@2/dist/Meting.min.js</a></em> 这个文件里可以看到，数据是从这个接口获取的：<em><a href="https://api.i-meto.com/meting/api?server=:server&amp;type=:type&amp;id=:id&amp;r=:r" target="_blank" rel="noopener">https://api.i-meto.com/meting/api?server=:server&amp;type=:type&amp;id=:id&amp;r=:r</a></em>，猜测服务端是直接将获取到的榜单列表写进里数据库，但后续不会进行更新，所以导致无论多少次刷新，都只能获取第一次取到的数据。</p><p>所以有两种解决办法，第一种是创建新歌单，然后一次性添加足够多的歌，然后在配置文件中替换成你的歌单id，另一种是自己写一个网易云音乐歌单解析接口，来获取网易云音乐数据。我比较懒，所以选择了第一种方案，23333，还在充实歌单中。</p><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><p>最简示例</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---</code></pre><p>最全示例</p><pre><code>---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: 赵奇img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><p>上述大部分内容都来自主题说明文档，只是添加了一下我觉得需要注意的地方。这里还有一些没有说到到的属性，这配置文件里都有详细的介绍，确实不需要过多解释。</p><p>最后再介绍一下我折腾比较久的插件，valine 评价插件。</p><h2 id="Valine-评价插件"><a href="#Valine-评价插件" class="headerlink" title="Valine 评价插件"></a>Valine 评价插件</h2><p>插件主页：<em><a href="https://valine.js.org/" target="_blank" rel="noopener">https://valine.js.org/</a></em> ，上面有详细的介绍，可以查看<a href="https://valine.js.org/quickstart.html" target="_blank" rel="noopener">这里</a>，注册后，验证邮箱，绑定手机号，然后新建一个应用，获取到对应的 <code>AppId</code> 和 <code>AppKey</code>，然后写回到主题文件下到 <code>_config.yml</code> 文件里，但是要<strong>注意一点，不要直接使用国内版进行注册，而要用国际版，否则无法申请二级域名</strong>。</p><pre class=" language-yml"><code class="language-yml">valine:  enable: true  appId: XXX  appKey: XXX  notify: true  verify: false  visitor: true  avatar: 'retro' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide  pageSize: 10  placeholder: 'Comment here' # Comment Box placeholder  background: /medias/comment_bg.png</code></pre><p>最新版的 <code>Valine</code> 已经移除了邮件通知功能。如果没有邮件通知，很可能别人评价之后，你却毫不知情，后续回复对方也收不到。因此，需要再配置一个插件来实现， ++<a href="https://github.com/zhaojun1998/Valine-Admin++" target="_blank" rel="noopener">https://github.com/zhaojun1998/Valine-Admin++</a> 。在配置这个插件之前，需要确保 <code>Valine</code> 可以正常工作，可以自己给自己评论一下进行测试。</p><p>配置好之后，别人在你的文章下评论后你便能收到邮件通知了。</p><p>至此，<code>Matery</code> 主题就搭建配置完成了，接下来就只需要安心写博客了～</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RabbitMQ】一文带你搞定RabbitMQ延迟队列</title>
      <link href="/2020/05/04/rabbitmq/rabbitmq-how-to-use-delay-queue/"/>
      <url>/2020/05/04/rabbitmq/rabbitmq-how-to-use-delay-queue/</url>
      
        <content type="html"><![CDATA[<p>本文口味：鱼香肉丝   预计阅读：10分钟</p><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>在上一篇中，介绍了RabbitMQ中的死信队列是什么，何时使用以及如何使用RabbitMQ的死信队列。相信通过上一篇的学习，对于死信队列已经有了更多的了解，这一篇的内容也跟死信队列息息相关，如果你还不了解死信队列，那么建议你先进行上一篇文章的阅读。</p><p>这一篇里，我们将继续介绍RabbitMQ的高级特性，通过本篇的学习，你将收获：</p><ol><li>什么是延时队列</li><li>延时队列使用场景</li><li>RabbitMQ中的TTL</li><li>如何利用RabbitMQ来实现延时队列</li></ol><h2 id="二、本文大纲"><a href="#二、本文大纲" class="headerlink" title="二、本文大纲"></a>二、本文大纲</h2><p>以下是本文大纲：</p><p><img src="https://i.loli.net/2019/07/28/5d3d74d99699d43032.png" alt="1.png"></p><p>本文阅读前，需要对RabbitMQ以及死信队列有一个简单的了解。</p><h2 id="三、什么是延时队列"><a href="#三、什么是延时队列" class="headerlink" title="三、什么是延时队列"></a>三、什么是延时队列</h2><p><code>延时队列</code>，首先，它是一种队列，队列意味着内部的元素是<code>有序</code>的，元素出队和入队是有方向性的，元素从一端进入，从另一端取出。</p><p>其次，<code>延时队列</code>，最重要的特性就体现在它的<code>延时</code>属性上，跟普通的队列不一样的是，<code>普通队列中的元素总是等着希望被早点取出处理，而延时队列中的元素则是希望被在指定时间得到取出和处理</code>，所以延时队列中的元素是都是带时间属性的，通常来说是需要被处理的消息或者任务。</p><p>简单来说，延时队列就是用来存放需要在指定时间被处理的元素的队列。</p><h2 id="四、延时队列使用场景"><a href="#四、延时队列使用场景" class="headerlink" title="四、延时队列使用场景"></a>四、延时队列使用场景</h2><p>那么什么时候需要用延时队列呢？考虑一下以下场景：</p><ol><li>订单在十分钟之内未支付则自动取消。</li><li>新创建的店铺，如果在十天内都没有上传过商品，则自动发送消息提醒。</li><li>账单在一周内未支付，则自动结算。</li><li>用户注册成功后，如果三天内没有登陆则进行短信提醒。</li><li>用户发起退款，如果三天内没有得到处理则通知相关运营人员。</li><li>预定会议后，需要在预定的时间点前十分钟通知各个与会人员参加会议。</li></ol><p>这些场景都有一个特点，需要在某个事件发生之后或者之前的指定时间点完成某一项任务，如：发生订单生成事件，在十分钟之后检查该订单支付状态，然后将未支付的订单进行关闭；发生店铺创建事件，十天后检查该店铺上新商品数，然后通知上新数为0的商户；发生账单生成事件，检查账单支付状态，然后自动结算未支付的账单；发生新用户注册事件，三天后检查新注册用户的活动数据，然后通知没有任何活动记录的用户；发生退款事件，在三天之后检查该订单是否已被处理，如仍未被处理，则发送消息给相关运营人员；发生预定会议事件，判断离会议开始是否只有十分钟了，如果是，则通知各个与会人员。</p><p>看起来似乎使用定时任务，一直轮询数据，每秒查一次，取出需要被处理的数据，然后处理不就完事了吗？如果数据量比较少，确实可以这样做，比如：对于“如果账单一周内未支付则进行自动结算”这样的需求，如果对于时间不是严格限制，而是宽松意义上的一周，那么每天晚上跑个定时任务检查一下所有未支付的账单，确实也是一个可行的方案。但对于数据量比较大，并且时效性较强的场景，如：“订单十分钟内未支付则关闭“，短期内未支付的订单数据可能会有很多，活动期间甚至会达到百万甚至千万级别，对这么庞大的数据量仍旧使用轮询的方式显然是不可取的，很可能在一秒内无法完成所有订单的检查，同时会给数据库带来很大压力，无法满足业务要求而且性能低下。</p><p>更重要的一点是，不！优！雅！</p><p>没错，作为一名有追求的程序员，始终应该追求更优雅的架构和更优雅的代码风格，写代码要像写诗一样优美。【滑稽】</p><p>这时候，延时队列就可以闪亮登场了，以上场景，正是延时队列的用武之地。</p><p>既然<code>延时队列</code>可以解决很多特定场景下，带时间属性的任务需求，那么如何构造一个延时队列呢？接下来，本文将介绍如何用RabbitMQ来实现延时队列。</p><h2 id="五、RabbitMQ中的TTL"><a href="#五、RabbitMQ中的TTL" class="headerlink" title="五、RabbitMQ中的TTL"></a>五、RabbitMQ中的TTL</h2><p>在介绍延时队列之前，还需要先介绍一下RabbitMQ中的一个高级特性——<code>TTL（Time To Live）</code>。</p><p><code>TTL</code>是什么呢？<code>TTL</code>是RabbitMQ中一个消息或者队列的属性，表明<code>一条消息或者该队列中的所有消息的最大存活时间</code>，单位是毫秒。换句话说，如果一条消息设置了TTL属性或者进入了设置TTL属性的队列，那么这条消息如果在TTL设置的时间内没有被消费，则会成为“死信”（至于什么是死信，请翻看上一篇）。如果同时配置了队列的TTL和消息的TTL，那么较小的那个值将会被使用。</p><p>那么，如何设置这个TTL值呢？有两种方式，第一种是在创建队列的时候设置队列的“x-message-ttl”属性，如下：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> durable<span class="token punctuation">,</span> exclusive<span class="token punctuation">,</span> autoDelete<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样所有被投递到该队列的消息都最多不会存活超过6s。</p><p>另一种方式便是针对每条消息设置TTL，代码如下：</p><pre class=" language-java"><code class="language-java">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>builder<span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"6000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>AMQP<span class="token punctuation">.</span>BasicProperties properties <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> mandatory<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> <span class="token string">"msg body"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样这条消息的过期时间也被设置成了6s。</p><p>但这两种方式是有区别的，<strong>如果设置了队列的TTL属性，那么一旦消息过期，就会被队列丢弃，而第二种方式，消息即使过期，也不一定会被马上丢弃，因为消息是否过期是在即将投递到消费者之前判定的，如果当前队列有严重的消息积压情况，则已过期的消息也许还能存活较长时间。</strong></p><p>另外，还需要注意的一点是，如果不设置TTL，表示消息永远不会过期，如果将TTL设置为0，则表示除非此时可以直接投递该消息到消费者，否则该消息将会被丢弃。</p><h2 id="六、如何利用RabbitMQ实现延时队列"><a href="#六、如何利用RabbitMQ实现延时队列" class="headerlink" title="六、如何利用RabbitMQ实现延时队列"></a>六、如何利用RabbitMQ实现延时队列</h2><p>前一篇里介绍了如果设置死信队列，前文中又介绍了TTL，至此，利用RabbitMQ实现延时队列的两大要素已经集齐，接下来只需要将它们进行调和，再加入一点点调味料，延时队列就可以新鲜出炉了。</p><p>想想看，<code>延时队列</code>，不就是想要消息延迟多久被处理吗，TTL则刚好能让消息在延迟多久之后成为死信，另一方面，成为死信的消息都会被投递到死信队列里，这样只需要消费者一直消费死信队列里的消息就万事大吉了，因为里面的消息都是希望被立即处理的消息。</p><p>从下图可以大致看出消息的流向：</p><p><img src="https://i.loli.net/2019/07/28/5d3d743143ecc85643.png" alt="23.png"></p><p>生产者生产一条延时消息，根据需要延时时间的不同，利用不同的routingkey将消息路由到不同的延时队列，每个队列都设置了不同的TTL属性，并绑定在同一个死信交换机中，消息过期后，根据routingkey的不同，又会被路由到不同的死信队列中，消费者只需要监听对应的死信队列进行处理即可。</p><p>下面来看代码：</p><p>先声明交换机、队列以及他们的绑定关系：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAY_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAY_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAY_QUEUEA_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuea.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAY_QUEUEB_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queueb.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEA_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_10s.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEB_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_60s.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEB_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queueb"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明延时Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">delayExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明延时队列A 延时10s</span>    <span class="token comment" spellcheck="true">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">delayQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-message-ttl  声明队列的TTL</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明延时队列B 延时 60s</span>    <span class="token comment" spellcheck="true">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">delayQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-message-ttl  声明队列的TTL</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列A 用于接收延时10s处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">deadLetterQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列B 用于接收延时60s处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">deadLetterQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明延时队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">delayBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueA"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DELAY_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">delayBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueB"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DELAY_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">deadLetterBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">deadLetterBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来，创建两个消费者，分别对两个死信队列的消息进行消费：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLetterQueueConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveA</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},死信队列A收到消息：{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveB</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},死信队列B收到消息：{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是消息的生产者：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayMessageSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> DelayTypeEnum type<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> DELAY_10s<span class="token operator">:</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">,</span> DELAY_QUEUEA_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> DELAY_60s<span class="token operator">:</span>                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">,</span> DELAY_QUEUEB_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来，我们暴露一个web接口来生产消息：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"rabbitmq"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQMsgController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DelayMessageSender sender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"sendmsg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer delayType<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},收到请求，msg:{},delayType:{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> delayType<span class="token punctuation">)</span><span class="token punctuation">;</span>        sender<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>DelayTypeEnum<span class="token punctuation">.</span><span class="token function">getDelayTypeEnumByValue</span><span class="token punctuation">(</span>delayType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>准备就绪，启动！</p><p>打开rabbitMQ的<a href="http://localhost:15672" target="_blank" rel="noopener">管理后台</a>，可以看到我们刚才创建的交换机和队列信息：</p><p><img src="https://i.loli.net/2019/07/28/5d3d54e15534398514.png" alt="2.png"></p><p><img src="https://i.loli.net/2019/07/28/5d3d54e17df8183993.png" alt="4.png"></p><p><img src="https://i.loli.net/2019/07/28/5d3d54e16952546955.png" alt="3.png"></p><p>接下来，我们来发送几条消息，<a href="http://localhost:8080/rabbitmq/sendmsg?msg=testMsg1&amp;delayType=1" target="_blank" rel="noopener">http://localhost:8080/rabbitmq/sendmsg?msg=testMsg1&amp;delayType=1</a> <a href="http://localhost:8080/rabbitmq/sendmsg?msg=testMsg2&amp;delayType=2" target="_blank" rel="noopener">http://localhost:8080/rabbitmq/sendmsg?msg=testMsg2&amp;delayType=2</a></p><p>日志如下：</p><pre class=" language-powershell"><code class="language-powershell">2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:19<span class="token punctuation">.</span>813  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-9]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   : 当前时间：Sun Jul 28 16:02:19 CST 2019<span class="token punctuation">,</span>收到请求，msg:testMsg1<span class="token punctuation">,</span>delayType:12019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:19<span class="token punctuation">.</span>815  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-9]</span> <span class="token punctuation">.</span>l<span class="token punctuation">.</span>DirectReplyToMessageListenerContainer : SimpleConsumer <span class="token namespace">[queue=amq.rabbitmq.reply-to, consumerTag=amq.ctag-o-qPpkWIkRm73DIrOIVhig identity=766339]</span> started2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:25<span class="token punctuation">.</span>829  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer<span class="token comment" spellcheck="true">#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:02:25 CST 2019,死信队列A收到消息：testMsg1</span>2019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:02:41<span class="token punctuation">.</span>326  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token namespace">[nio-8080-exec-1]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   : 当前时间：Sun Jul 28 16:02:41 CST 2019<span class="token punctuation">,</span>收到请求，msg:testMsg2<span class="token punctuation">,</span>delayType:22019<span class="token operator">-</span>07<span class="token operator">-</span>28 16:03:41<span class="token punctuation">.</span>329  INFO 3860 <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer<span class="token comment" spellcheck="true">#0-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:03:41 CST 2019,死信队列B收到消息：testMsg2</span></code></pre><p>第一条消息在6s后变成了死信消息，然后被消费者消费掉，第二条消息在60s之后变成了死信消息，然后被消费掉，这样，一个还算ok的延时队列就打造完成了。</p><p>不过，等等，如果这样使用的话，岂不是每增加一个新的时间需求，就要新增一个队列，这里只有6s和60s两个时间选项，如果需要一个小时后处理，那么就需要增加TTL为一个小时的队列，如果是预定会议室然后提前通知这样的场景，岂不是要增加无数个队列才能满足需求？？</p><p>嗯，仔细想想，事情并不简单。</p><h2 id="七、RabbitMQ延时队列优化"><a href="#七、RabbitMQ延时队列优化" class="headerlink" title="七、RabbitMQ延时队列优化"></a>七、RabbitMQ延时队列优化</h2><p>显然，需要一种更通用的方案才能满足需求，那么就只能将TTL设置在消息属性里了。我们来试一试。</p><p>增加一个延时队列，用于接收设置为任意延时时长的消息，增加一个相应的死信队列和routingkey：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAY_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAY_QUEUEC_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuec"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAY_QUEUEC_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.business.queuec.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEC_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.delay_anytime.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEC_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.deadletter.queuec"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明延时Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">delayExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DELAY_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明延时队列C 不设置TTL</span>    <span class="token comment" spellcheck="true">// 并绑定到对应的死信交换机</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"delayQueueC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">delayQueueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>DELAY_QUEUEC_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列C 用于接收延时任意时长处理的消息</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueC"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">deadLetterQueueC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEC_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明延时列C绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">delayBindingC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayQueueC"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"delayExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DELAY_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列C绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">deadLetterBindingC</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueC"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEC_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>增加一个死信队列C的消费者：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEC_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveC</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},死信队列C收到消息：{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再次启动！然后访问：<a href="http://localhost:8080/rabbitmq/delayMsg?msg=testMsg1delayTime=5000" target="_blank" rel="noopener">http://localhost:8080/rabbitmq/delayMsg?msg=testMsg1delayTime=5000</a> 来生产消息，注意这里的单位是毫秒。</p><pre><code>2019-07-28 16:45:07.033  INFO 31468 --- [nio-8080-exec-4] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:45:07 CST 2019,收到请求，msg:testMsg1,delayTime:50002019-07-28 16:45:11.694  INFO 31468 --- [nio-8080-exec-5] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:45:11 CST 2019,收到请求，msg:testMsg2,delayTime:50002019-07-28 16:45:12.048  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:45:12 CST 2019,死信队列C收到消息：testMsg12019-07-28 16:45:16.709  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:45:16 CST 2019,死信队列C收到消息：testMsg2</code></pre><p>看起来似乎没什么问题，但不要高兴的太早，在最开始的时候，就介绍过，如果使用在消息属性上设置TTL的方式，消息可能并不会按时“死亡“，因为RabbitMQ只会检查第一个消息是否过期，如果过期则丢到死信队列，索引如果第一个消息的延时时长很长，而第二个消息的延时时长很短，则第二个消息并不会优先得到执行。</p><p>实验一下：</p><pre><code>2019-07-28 16:49:02.957  INFO 31468 --- [nio-8080-exec-8] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:49:02 CST 2019,收到请求，msg:longDelayedMsg,delayTime:200002019-07-28 16:49:10.671  INFO 31468 --- [nio-8080-exec-9] c.m.d.controller.RabbitMQMsgController   : 当前时间：Sun Jul 28 16:49:10 CST 2019,收到请求，msg:shortDelayedMsg,delayTime:20002019-07-28 16:49:22.969  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:49:22 CST 2019,死信队列C收到消息：longDelayedMsg2019-07-28 16:49:22.970  INFO 31468 --- [ntContainer#1-1] c.m.d.mq.DeadLetterQueueConsumer         : 当前时间：Sun Jul 28 16:49:22 CST 2019,死信队列C收到消息：shortDelayedMsg</code></pre><p>我们先发了一个延时时长为20s的消息，然后发了一个延时时长为2s的消息，结果显示，第二个消息会在等第一个消息成为死信后才会“死亡“。</p><h2 id="八、利用RabbitMQ插件实现延迟队列"><a href="#八、利用RabbitMQ插件实现延迟队列" class="headerlink" title="八、利用RabbitMQ插件实现延迟队列"></a>八、利用RabbitMQ插件实现延迟队列</h2><p>上文中提到的问题，确实是一个硬伤，如果不能实现在消息粒度上添加TTL，并使其在设置的TTL时间及时死亡，就无法设计成一个通用的延时队列。</p><p>那如何解决这个问题呢？不要慌，安装一个插件即可：<a href="https://www.rabbitmq.com/community-plugins.html" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html</a> ，下载rabbitmq_delayed_message_exchange插件，然后解压放置到RabbitMQ的插件目录。</p><p>接下来，进入RabbitMQ的安装目录下的sbin目录，执行下面命令让该插件生效，然后重启RabbitMQ。</p><pre class=" language-shell"><code class="language-shell">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</code></pre><p>然后，我们再声明几个Bean：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayedRabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DELAYED_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"delay.queue.demo.delay.routingkey"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">immediateQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> CustomExchange <span class="token function">customExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-delayed-type"</span><span class="token punctuation">,</span> <span class="token string">"direct"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomExchange</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"x-delayed-message"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingNotify</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"immediateQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"customExchange"</span><span class="token punctuation">)</span> CustomExchange customExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>customExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DELAYED_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller层再添加一个入口：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"delayMsg2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delayMsg2</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer delayTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},收到请求，msg:{},delayTime:{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    sender<span class="token punctuation">.</span><span class="token function">sendDelayMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>消息生产者的代码也需要修改：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendDelayMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Integer delayTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>DELAYED_EXCHANGE_NAME<span class="token punctuation">,</span> DELAYED_ROUTING_KEY<span class="token punctuation">,</span> msg<span class="token punctuation">,</span> a <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDelay</span><span class="token punctuation">(</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最后，再创建一个消费者：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DELAYED_QUEUE_NAME<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveD</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"当前时间：{},延时队列收到消息：{}"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一切准备就绪，启动！然后分别访问以下链接：</p><pre class=" language-url"><code class="language-url">http://localhost:8080/rabbitmq/delayMsg2?msg=msg1&delayTime=20000http://localhost:8080/rabbitmq/delayMsg2?msg=msg2&delayTime=2000</code></pre><p>日志如下：</p><pre class=" language-java"><code class="language-java"><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13.729</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   <span class="token operator">:</span> 当前时间：Sun Jul <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">13</span> CST <span class="token number">2019</span><span class="token punctuation">,</span>收到请求，msg<span class="token operator">:</span>msg1<span class="token punctuation">,</span>delayTime<span class="token operator">:</span><span class="token number">20000</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">20.607</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>nio<span class="token operator">-</span><span class="token number">8080</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>RabbitMQMsgController   <span class="token operator">:</span> 当前时间：Sun Jul <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">20</span> CST <span class="token number">2019</span><span class="token punctuation">,</span>收到请求，msg<span class="token operator">:</span>msg2<span class="token punctuation">,</span>delayTime<span class="token operator">:</span><span class="token number">2000</span><span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">22.624</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer#<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>DeadLetterQueueConsumer         <span class="token operator">:</span> 当前时间：Sun Jul <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">22</span> CST <span class="token number">2019</span><span class="token punctuation">,</span>延时队列收到消息：msg2<span class="token number">2019</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span><span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">33.751</span>  INFO <span class="token number">25804</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token punctuation">[</span>ntContainer#<span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> c<span class="token punctuation">.</span>m<span class="token punctuation">.</span>d<span class="token punctuation">.</span>mq<span class="token punctuation">.</span>DeadLetterQueueConsumer         <span class="token operator">:</span> 当前时间：Sun Jul <span class="token number">28</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">28</span><span class="token operator">:</span><span class="token number">33</span> CST <span class="token number">2019</span><span class="token punctuation">,</span>延时队列收到消息：msg1</code></pre><p>第二个消息被先消费掉了，符合预期。至此，RabbitMQ实现延时队列的部分就完结了。</p><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><p>延时队列在需要延时处理的场景下非常有用，使用RabbitMQ来实现延时队列可以很好的利用RabbitMQ的特性，如：消息可靠发送、消息可靠投递、死信队列来保障消息至少被消费一次以及未被正确处理的消息不会被丢弃。另外，通过RabbitMQ集群的特性，可以很好的解决单点故障问题，不会因为单个节点挂掉导致延时队列不可用或者消息丢失。</p><p>当然，延时队列还有很多其它选择，比如利用Java的DelayQueu，利用Redis的zset，利用Quartz或者利用kafka的时间轮，这些方式各有特点，但就像炉石传说一般，这些知识就好比手里的卡牌，知道的越多，可以用的卡牌也就越多，遇到问题便能游刃有余，所以需要大量的知识储备和经验积累才能打造出更出色的卡牌组合，让自己解决问题的能力得到更好的提升。</p><p>但另一方面，随着时间的流逝和阅历的增长，越来越感觉到自己的能力有限，无法独自面对纷繁复杂且多变的业务需求，在很多方面需要其他人的协助才能很好的完成任务。也知道闻道有先后，术业有专攻，不会再狂妄自大，觉得自己能把所有事情都搞定，也将重心慢慢转移到研究如何有效的进行团队合作上来，我相信一个高度协调的团队永远比一个人战斗要更有价值。</p><p>花了一个周末的时间完成了这篇文章，文中所有的代码都上传到了<a href="https://github.com/MFrank2016/delayed-queue-demo" target="_blank" rel="noopener">github</a>如有需要可以自行查阅，希望能对你有帮助，如果有错误的地方，欢迎指正，也欢迎关注我的公众号进行留言交流。</p><p><img src="https://i.loli.net/2019/07/14/5d2af6692a8f432182.png" alt="TIM图片20190714173105.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> DelayQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RabbitMQ】一文带你搞定RabbitMQ死信队列</title>
      <link href="/2020/05/04/rabbitmq/rabbitmq-how-to-use-dead-letter-queue/"/>
      <url>/2020/05/04/rabbitmq/rabbitmq-how-to-use-dead-letter-queue/</url>
      
        <content type="html"><![CDATA[<p>本文口味：爆炒鱿鱼   预计阅读：15分钟</p><h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>RabbitMQ是流行的开源消息队列系统，使用erlang语言开发，由于其社区活跃度高，维护更新较快，性能稳定，深得很多企业的欢心（当然，也包括我现在所在公司【手动滑稽】）。</p><p>为了保证订单业务的消息数据不丢失，需要使用到RabbitMQ的死信队列机制，当消息消费发生异常时，将消息投入死信队列中。但由于对死信队列的概念及配置不熟悉，导致曾一度陷入百度的汪洋大海，无法自拔，很多文章都看起来可行，但是实际上却并不能帮我解决实际问题。最终，在官网文档中找到了我想要的答案，通过官网文档的学习，才发现对于死信队列存在一些误解，导致配置死信队列之路困难重重。</p><p>于是本着记录和分享的精神，将死信队列的概念和配置完整的写下来，以便帮助遇到同样问题的朋友。</p><h2 id="二、本文大纲"><a href="#二、本文大纲" class="headerlink" title="二、本文大纲"></a>二、本文大纲</h2><p>以下是本文大纲：</p><p><img src="https://i.loli.net/2019/07/14/5d2af4176d1d483480.png" alt="AG4T332}_NEUNPUAU(A_)U6.png"></p><p>本文阅读前，需要对RabbitMQ有一个简单的了解，偏向实战配置讲解。</p><h2 id="三、死信队列是什么"><a href="#三、死信队列是什么" class="headerlink" title="三、死信队列是什么"></a>三、死信队列是什么</h2><p>死信，在官网中对应的单词为“Dead Letter”，可以看出翻译确实非常的简单粗暴。那么死信是个什么东西呢？</p><p>“死信”是RabbitMQ中的一种消息机制，当你在消费消息时，如果队列里的消息出现以下情况：</p><ol><li>消息被否定确认，使用 <code>channel.basicNack</code>  或 <code>channel.basicReject</code> ，并且此时<code>requeue</code> 属性被设置为<code>false</code>。</li><li>消息在队列的存活时间超过设置的TTL时间。</li><li>消息队列的消息数量已经超过最大队列长度。</li></ol><p>那么该消息将成为“死信”。</p><p>“死信”消息会被RabbitMQ进行特殊处理，如果配置了死信队列信息，那么该消息将会被丢进死信队列中，如果没有配置，则该消息将会被丢弃。</p><h2 id="四、如何配置死信队列"><a href="#四、如何配置死信队列" class="headerlink" title="四、如何配置死信队列"></a>四、如何配置死信队列</h2><p>这一部分将是本文的关键，如何配置死信队列呢？其实很简单，大概可以分为以下步骤：</p><ol><li>配置业务队列，绑定到业务交换机上</li><li>为业务队列配置死信交换机和路由key</li><li>为死信交换机配置死信队列</li></ol><p>注意，并不是直接声明一个公共的死信队列，然后所以死信消息就自己跑到死信队列里去了。而是为每个需要使用死信的业务队列配置一个死信交换机，这里同一个项目的死信交换机可以共用一个，然后为每个业务队列分配一个单独的路由key。</p><p>有了死信交换机和路由key后，接下来，就像配置业务队列一样，配置死信队列，然后绑定在死信交换机上。也就是说，死信队列并不是什么特殊的队列，只不过是绑定在死信交换机上的队列。死信交换机也不是什么特殊的交换机，只不过是用来接受死信的交换机，所以可以为任何类型【Direct、Fanout、Topic】。一般来说，会为每个业务队列分配一个独有的路由key，并对应的配置一个死信队列进行监听，也就是说，一般会为每个重要的业务队列配置一个死信队列。</p><p>有了前文这些陈述后，接下来就是惊险刺激的实战环节，这里省略了RabbitMQ环境的部署和搭建环节。</p><p>先创建一个Springboot项目。然后在pom文件中添加 <code>spring-boot-starter-amqp</code> 和 <code>spring-boot-starter-web</code> 的依赖，接下来创建一个Config类，这里是关键：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.business.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_QUEUEB_NAME <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.business.queueb"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_EXCHANGE <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.deadletter.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEA_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.deadletter.queuea.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEB_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.deadletter.queueb.routingkey"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.deadletter.queuea"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEAD_LETTER_QUEUEB_NAME <span class="token operator">=</span> <span class="token string">"dead.letter.demo.simple.deadletter.queueb"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明业务Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> FanoutExchange <span class="token function">businessExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span>BUSINESS_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列A</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">businessQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//       x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//       x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BUSINESS_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列B</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">businessQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//       x-dead-letter-exchange    这里声明当前队列绑定的死信交换机</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span> DEAD_LETTER_EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//       x-dead-letter-routing-key  这里声明当前队列的死信路由key</span>        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-routing-key"</span><span class="token punctuation">,</span> DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BUSINESS_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列A</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">deadLetterQueueA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列B</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">deadLetterQueueB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">businessBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessQueueA"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">businessBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessQueueB"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列A绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">deadLetterBindingA</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueA"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEA_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明死信队列B绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">deadLetterBindingB</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterQueueB"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                      <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"deadLetterExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>DEAD_LETTER_QUEUEB_ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里声明了两个Exchange，一个是业务Exchange，另一个是死信Exchange，业务Exchange下绑定了两个业务队列，业务队列都配置了同一个死信Exchange，并分别配置了路由key，在死信Exchange下绑定了两个死信队列，设置的路由key分别为业务队列里配置的路由key。</p><p>下面是配置文件application.yml：</p><pre class=" language-yml"><code class="language-yml">spring:  rabbitmq:    host: localhost    password: guest    username: guest    listener:      type: simple      simple:          default-requeue-rejected: false          acknowledge-mode: manual</code></pre><p>这里记得将<code>default-requeue-rejected</code>属性设置为false。</p><p>接下来，是业务队列的消费代码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMessageReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> BUSINESS_QUEUEA_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveA</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到业务消息A：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> ack <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        Exception exception <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"deadletter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"dead letter exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            ack <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            exception <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ack<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消息消费发生异常，error msg:{}"</span><span class="token punctuation">,</span> exception<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> BUSINESS_QUEUEB_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveB</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到业务消息B："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后配置死信队列的消费者：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLetterMessageReceiver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEA_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveA</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到死信消息A："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> DEAD_LETTER_QUEUEB_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveB</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收到死信消息B："</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后，为了方便测试，写一个简单的消息生产者，并通过controller层来生产消息。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMessageSender</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertSendAndReceive</span><span class="token punctuation">(</span>BUSINESS_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"rabbitmq"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQMsgController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BusinessMessageSender sender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"sendmsg"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        sender<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>一切准备就绪，启动！</p><p>可以从RabbitMQ的管理后台中看到一共有四个队列，除默认的Exchange外还有声明的两个Exchange。</p><p>![8(%(3A_Y`_N8XX8W5XHZMWY.png](<a href="https://i.loli.net/2019/07/14/5d2ae72753a8e90481.png" target="_blank" rel="noopener">https://i.loli.net/2019/07/14/5d2ae72753a8e90481.png</a>)</p><p><img src="https://i.loli.net/2019/07/14/5d2ae792598f781012.png" alt="123.png"></p><p>接下来，访问一下url，来测试一下：</p><pre><code>http://localhost:8080/rabbitmq/sendmsg?msg=msg</code></pre><p>日志：</p><pre class=" language-java"><code class="language-java">收到业务消息A：msg收到业务消息B：msg</code></pre><p>表示两个Consumer都正常收到了消息。这代表正常消费的消息，ack后正常返回。然后我们再来测试nck的消息。</p><pre><code>http://localhost:8080/rabbitmq/sendmsg?msg=deadletter</code></pre><p>这将会触发业务队列A的NCK，按照预期，消息被NCK后，会抛到死信队列中，因此死信队列将会出现这个消息，日志如下：</p><pre><code>收到业务消息A：deadletter消息消费发生异常，error msg:dead letter exceptionjava.lang.RuntimeException: dead letter exception...收到死信消息A：deadletter</code></pre><p>可以看到，死信队列的Consumer接受到了这个消息，所以流程到此为止就打通了。</p><h2 id="五、死信消息的变化"><a href="#五、死信消息的变化" class="headerlink" title="五、死信消息的变化"></a>五、死信消息的变化</h2><p>那么“死信”被丢到死信队列中后，会发生什么变化呢？</p><p>如果队列配置了参数 <code>x-dead-letter-routing-key</code> 的话，“死信”的路由key将会被替换成该参数对应的值。如果没有设置，则保留该消息原有的路由key。</p><p>举个栗子：</p><p>如果原有消息的路由key是<code>testA</code>，被发送到业务Exchage中，然后被投递到业务队列QueueA中，如果该队列没有配置参数<code>x-dead-letter-routing-key</code>，则该消息成为死信后，将保留原有的路由key<code>testA</code>，如果配置了该参数，并且值设置为<code>testB</code>，那么该消息成为死信后，路由key将会被替换为<code>testB</code>，然后被抛到死信交换机中。</p><p>另外，由于被抛到了死信交换机，所以消息的Exchange Name也会被替换为死信交换机的名称。</p><p>消息的Header中，也会添加很多奇奇怪怪的字段，修改一下上面的代码，在死信队列的消费者中添加一行日志输出：</p><pre class=" language-java"><code class="language-java">log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"死信消息properties：{}"</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后重新运行一次，即可得到死信消息Header中被添加的信息：</p><pre><code>死信消息properties：MessageProperties [headers={x-first-death-exchange=dead.letter.demo.simple.business.exchange, x-death=[{reason=rejected, count=1, exchange=dead.letter.demo.simple.business.exchange, time=Sun Jul 14 16:48:16 CST 2019, routing-keys=[], queue=dead.letter.demo.simple.business.queuea}], x-first-death-reason=rejected, x-first-death-queue=dead.letter.demo.simple.business.queuea}, correlationId=1, replyTo=amq.rabbitmq.reply-to.g2dkABZyYWJiaXRAREVTS1RPUC1DUlZGUzBOAAAPQAAAAAAB.bLbsdR1DnuRSwiKKmtdOGw==, contentType=text/plain, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=dead.letter.demo.simple.deadletter.exchange, receivedRoutingKey=dead.letter.demo.simple.deadletter.queuea.routingkey, deliveryTag=1, consumerTag=amq.ctag-NSp18SUPoCNvQcoYoS2lPg, consumerQueue=dead.letter.demo.simple.deadletter.queuea]</code></pre><p>Header中看起来有很多信息，实际上并不多，只是值比较长而已。下面就简单说明一下Header中的值：</p><table><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>x-first-death-exchange</td><td>第一次被抛入的死信交换机的名称</td></tr><tr><td>x-first-death-reason</td><td>第一次成为死信的原因，<code>rejected</code>：消息在重新进入队列时被队列拒绝，由于<code>default-requeue-rejected</code> 参数被设置为<code>false</code>。<code>expired</code>  ：消息过期。<code>maxlen</code> ： 队列内消息数量超过队列最大容量</td></tr><tr><td>x-first-death-queue</td><td>第一次成为死信前所在队列名称</td></tr><tr><td>x-death</td><td>历次被投入死信交换机的信息列表，同一个消息每次进入一个死信交换机，这个数组的信息就会被更新</td></tr></tbody></table><h2 id="六、死信队列应用场景"><a href="#六、死信队列应用场景" class="headerlink" title="六、死信队列应用场景"></a>六、死信队列应用场景</h2><p>通过上面的信息，我们已经知道如何使用死信队列了，那么死信队列一般在什么场景下使用呢？</p><p>一般用在较为重要的业务队列中，确保未被正确消费的消息不被丢弃，一般发生消费异常可能原因主要有由于消息信息本身存在错误导致处理异常，处理过程中参数校验异常，或者因网络波动导致的查询异常等等，当发生异常时，当然不能每次通过日志来获取原消息，然后让运维帮忙重新投递消息（没错，以前就是这么干的= =）。通过配置死信队列，可以让未正确处理的消息暂存到另一个队列中，待后续排查清楚问题后，编写相应的处理代码来处理死信消息，这样比手工恢复数据要好太多了。</p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>死信队列其实并没有什么神秘的地方，不过是绑定在死信交换机上的普通队列，而死信交换机也只是一个普通的交换机，不过是用来专门处理死信的交换机。</p><p>总结一下死信消息的生命周期：</p><ol><li>业务消息被投入业务队列</li><li>消费者消费业务队列的消息，由于处理过程中发生异常，于是进行了nck或者reject操作</li><li>被nck或reject的消息由RabbitMQ投递到死信交换机中</li><li>死信交换机将消息投入相应的死信队列</li><li>死信队列的消费者消费死信消息</li></ol><p>死信消息是RabbitMQ为我们做的一层保证，其实我们也可以不使用死信队列，而是在消息消费异常时，将消息主动投递到另一个交换机中，当你明白了这些之后，这些Exchange和Queue想怎样配合就能怎么配合。比如从死信队列拉取消息，然后发送邮件、短信、钉钉通知来通知开发人员关注。或者将消息重新投递到一个队列然后设置过期时间，来进行延时消费。</p><p>如果本文对你有帮助，记得点个赞，也希望能分享给更多的朋友。也欢迎关注我的公众号进行留言交流。</p><p><img src="https://i.loli.net/2019/07/14/5d2af6692a8f432182.png" alt="TIM图片20190714173105.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RabbitMQ】如何进行消息可靠投递【下篇】</title>
      <link href="/2020/05/04/rabbitmq/rabbitmq-how-to-ensure-reliable-delivery-of-message2/"/>
      <url>/2020/05/04/rabbitmq/rabbitmq-how-to-ensure-reliable-delivery-of-message2/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>上一篇文章里，我们了解了如何保证消息被可靠投递到<em>RabbitMQ</em>的交换机中，但还有一些不完美的地方，试想一下，如果向RabbitMQ服务器发送一条消息，服务器确实也接收到了这条消息，于是给你返回了ACK确认消息，但服务器拿到这条消息一看，找不到路由它的队列，于是就把它丢进了垃圾桶，emmm，我猜应该属于可回收垃圾。</p><p><img src="https://i.loli.net/2019/08/22/nmPFS3RkIMweEXc.png" alt="1"></p><h2 id="如何让消息可靠投递到队列"><a href="#如何让消息可靠投递到队列" class="headerlink" title="如何让消息可靠投递到队列"></a>如何让消息可靠投递到队列</h2><p>如果你对上面的描述还不是很清楚，那我再用代码来说明一次。</p><p>在仅开启了生产者确认机制的情况下，交换机接收到消息后，会直接给消息生产者发送确认消息，如果发现该消息不可路由，那么消息会被直接丢弃，此时，生产者是不知道消息被丢弃这个事件的。</p><p>我们将上一篇中的交换机类型改为<em>DirectExchange*，这样就只有当消息的 *RoutingKey</em> 和队列绑定时设置的 <em>Bindingkey</em> （这里即“key”）一致时，才会真正将该消息进行路由。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.tx.demo.simple.business.exchange"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.tx.demo.simple.business.queue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 声明业务 Exchange</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span><span class="token keyword">public</span> DirectExchange <span class="token function">businessExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>BUSINESS_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明业务队列</span><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessQueue"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Queue <span class="token function">businessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BUSINESS_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 声明业务队列绑定关系</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Binding <span class="token function">businessBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                               <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对消息生产者也稍作修改：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//        rabbitTemplate.setChannelTransacted(true);</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCustomMsg</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>    correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String id <span class="token operator">=</span> correlationData <span class="token operator">!=</span> null <span class="token operator">?</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息确认成功, id:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消息未成功投递, id:{}, cause:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们调用该方法，发送两条消息测试一下：</p><pre class=" language-java"><code class="language-java">消息id<span class="token operator">:</span>ba6bf502<span class="token operator">-</span><span class="token number">9381</span><span class="token operator">-</span><span class="token number">4220</span><span class="token operator">-</span>8dc9<span class="token operator">-</span>313d6a289a4e<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息id<span class="token operator">:</span>f0040a41<span class="token operator">-</span>dc02<span class="token operator">-</span><span class="token number">4e45</span><span class="token operator">-</span>b8af<span class="token operator">-</span>e3cfa8a118b2<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>ba6bf502<span class="token operator">-</span><span class="token number">9381</span><span class="token operator">-</span><span class="token number">4220</span><span class="token operator">-</span>8dc9<span class="token operator">-</span>313d6a289a4e消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>f0040a41<span class="token operator">-</span>dc02<span class="token operator">-</span><span class="token number">4e45</span><span class="token operator">-</span>b8af<span class="token operator">-</span>e3cfa8a118b2收到业务消息：<span class="token number">1</span></code></pre><p>可以看到，发送了两条消息，第一条消息的 <em>RoutingKey</em> 为 “key”，第二条消息的 RoutingKey 为 “key2”，两条消息都成功被交换机接收，也收到了交换机的确认回调，但消费者只收到了一条消息，因为第二条消息的 <em>RoutingKey</em> 与队列的 <em>BindingKey</em> 不一致，也没有其它队列能接收这个消息，所有第二条消息被直接丢弃了。</p><p>那么，如何让消息被路由到队列后再返回ACK呢？或者无法被路由的消息帮我想办法处理一下？最起码通知我一声，我好自己处理啊。</p><p>别慌别慌，<em>RabbitMQ</em>里有两个机制刚好可以解决我们上面的疑问：</p><p>1、mandatory 参数<br>2、备份交换机</p><h2 id="mandatory-参数"><a href="#mandatory-参数" class="headerlink" title="mandatory 参数"></a>mandatory 参数</h2><p>设置 <em>mandatory</em> 参数可以在当消息传递过程中不可达目的地时将消息返回给生产者。</p><p>当把 <em>mandotory</em> 参数设置为 true 时，如果交换机无法将消息进行路由时，会将该消息返回给生产者，而如果该参数设置为false，如果发现消息无法进行路由，则直接丢弃。</p><p><img src="https://i.loli.net/2019/09/01/YZ8acG1HxKQ9fLN.png" alt="2.png"></p><p>那么如何设置这个参数呢？在发送消息的时候，只需要在初始化方法添加一行代码即可：</p><pre class=" language-java"><code class="language-java">rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>开启之后我们再重新运行前面的代码：</p><pre class=" language-java"><code class="language-java">消息id<span class="token operator">:</span>19729f33<span class="token operator">-</span>15c4<span class="token operator">-</span>4c1b<span class="token operator">-</span>8d48<span class="token operator">-</span>044c301e2a8e<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息id<span class="token operator">:</span>4aea5c57<span class="token operator">-</span><span class="token number">3e71</span><span class="token operator">-</span>4a7b<span class="token operator">-</span>8a00<span class="token operator">-</span>1595d2b568eb<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>19729f33<span class="token operator">-</span>15c4<span class="token operator">-</span>4c1b<span class="token operator">-</span>8d48<span class="token operator">-</span>044c301e2a8eReturned message but no callback available消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>4aea5c57<span class="token operator">-</span><span class="token number">3e71</span><span class="token operator">-</span>4a7b<span class="token operator">-</span>8a00<span class="token operator">-</span>1595d2b568eb收到业务消息：<span class="token number">1</span></code></pre><p>我们看到中间多了一行提示 <code>Returned message but no callback available</code> 这是什么意思呢？</p><p>我们上面提到，设置 <em>mandatory</em> 参数后，如果消息无法被路由，则会返回给生产者，是通过回调的方式进行的，所以，生产者需要设置相应的回调函数才能接受该消息。</p><p>为了进行回调，我们需要实现一个接口 <code>RabbitTemplate.ReturnCallback</code>。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMsgProducer</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">,</span> RabbitTemplate<span class="token punctuation">.</span>ReturnCallback<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCustomMsg</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>        correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> correlationData <span class="token operator">!=</span> null <span class="token operator">?</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息确认成功, id:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消息未成功投递, id:{}, cause:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> String replyText<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span> String routingKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息被服务器退回。msg:{}, replyCode:{}. replyText:{}, exchange:{}, routingKey :{}"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们再来重新运行一次：</p><pre class=" language-java"><code class="language-java">消息id<span class="token operator">:</span>2e5c336a<span class="token operator">-</span>883a<span class="token operator">-</span>474e<span class="token operator">-</span>b40e<span class="token operator">-</span>b6e3499088ef<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息id<span class="token operator">:</span>85c771cb<span class="token operator">-</span>c88f<span class="token operator">-</span>47dd<span class="token operator">-</span>adea<span class="token operator">-</span>f0da57138423<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>2e5c336a<span class="token operator">-</span>883a<span class="token operator">-</span>474e<span class="token operator">-</span>b40e<span class="token operator">-</span>b6e3499088ef消息无法被路由，被服务器退回。msg<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> replyCode<span class="token operator">:</span><span class="token number">312</span><span class="token punctuation">.</span> replyText<span class="token operator">:</span>NO_ROUTE<span class="token punctuation">,</span> exchange<span class="token operator">:</span>rabbitmq<span class="token punctuation">.</span>tx<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>simple<span class="token punctuation">.</span>business<span class="token punctuation">.</span>exchange<span class="token punctuation">,</span> routingKey <span class="token operator">:</span>key2消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>85c771cb<span class="token operator">-</span>c88f<span class="token operator">-</span>47dd<span class="token operator">-</span>adea<span class="token operator">-</span>f0da57138423收到业务消息：<span class="token number">1</span></code></pre><p>可以看到，我们接收到了被退回的消息，并带上了消息被退回的原因：<code>NO_ROUTE</code>。但是要注意的是， <em>mandatory</em> 参数仅仅是在当消息无法被路由的时候，让生产者可以感知到这一点，只要开启了生产者确认机制，无论是否设置了 <em>mandatory</em> 参数，都会在交换机接收到消息时进行消息确认回调，而且通常消息的返回回调会在消息的确认回调之前。</p><h2 id="备份交换机"><a href="#备份交换机" class="headerlink" title="备份交换机"></a>备份交换机</h2><p>有了 <em>mandatory</em> 参数，我们获得了对无法投递消息的感知能力，有机会在生产者的消息无法被投递时发现并处理。但有时候，我们并不知道该如何处理这些无法路由的消息，最多打个日志，然后触发报警，再来手动处理。而通过日志来处理这些无法路由的消息是很不优雅的做法，特别是当生产者所在的服务有多台机器的时候，手动复制日志会更加麻烦而且容易出错。</p><p>而且设置 <em>mandatory</em> 参数会增加生产者的复杂性，需要添加处理这些被退回的消息的逻辑。如果既不想丢失消息，又不想增加生产者的复杂性，该怎么做呢？</p><p>前面在设置死信队列的文章中，我们提到，可以为队列设置死信交换机来存储那些处理失败的消息，可是这些不可路由消息根本没有机会进入到队列，因此无法使用死信队列来保存消息。</p><p>不要慌，在 RabbitMQ 中，有一种备份交换机的机制存在，可以很好的应对这个问题。</p><p>什么是备份交换机呢？备份交换机可以理解为 <em>RabbitMQ</em> 中交换机的“备胎”，当我们为某一个交换机声明一个对应的备份交换机时，就是为它创建一个备胎，当交换机接收到一条不可路由消息时，将会将这条消息转发到备份交换机中，由备份交换机来进行转发和处理，通常备份交换机的类型为 <em>Fanout</em> ，这样就能把所有消息都投递到与其绑定的队列中，然后我们在备份交换机下绑定一个队列，这样所有那些原交换机无法被路由的消息，就会都进入这个队列了。当然，我们还可以建立一个报警队列，用独立的消费者来进行监测和报警。</p><p>听的不太明白？没关系，看个图就知道是怎么回事了。</p><p><img src="https://i.loli.net/2019/09/01/VsGpZJbk2u7wSv4.png" alt="3.png"></p><p>（emmm，调整了一下配色，感觉还是很丑- - 。急需一个UI来拯救我。）</p><p>接下来，我们就来设置一下备份交换机：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.backup.test.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.backup.test.queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_BACKUP_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.backup.test.backup-exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_BACKUP_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.backup.test.backup-queue"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_BACKUP_WARNING_QUEUE_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.backup.test.backup-warning-queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明业务 Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DirectExchange <span class="token function">businessExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ExchangeBuilder exchangeBuilder <span class="token operator">=</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span>BUSINESS_EXCHANGE_NAME<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"alternate-exchange"</span><span class="token punctuation">,</span> BUSINESS_BACKUP_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>DirectExchange<span class="token punctuation">)</span>exchangeBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明备份 Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> FanoutExchange <span class="token function">backupExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ExchangeBuilder exchangeBuilder <span class="token operator">=</span> ExchangeBuilder<span class="token punctuation">.</span><span class="token function">fanoutExchange</span><span class="token punctuation">(</span>BUSINESS_BACKUP_EXCHANGE_NAME<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>FanoutExchange<span class="token punctuation">)</span>exchangeBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">businessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BUSINESS_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">businessBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span> DirectExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明备份队列</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"backupQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">backupQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BUSINESS_BACKUP_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明报警队列</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"warningQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">warningQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BUSINESS_BACKUP_WARNING_QUEUE_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明备份队列绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">backupBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                   <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明备份报警队列绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">backupWarningBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"warningQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"backupExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们使用 <code>ExchangeBuilder</code> 来声明交换机，并为其设置备份交换机：</p><pre class=" language-java"><code class="language-java"> <span class="token punctuation">.</span><span class="token function">withArgument</span><span class="token punctuation">(</span><span class="token string">"alternate-exchange"</span><span class="token punctuation">,</span> BUSINESS_BACKUP_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为业务交换机绑定了一个队列，为备份交换机绑定了两个队列，一个专门用来做报警用途。</p><p>接下来，分别为业务交换机和备份交换机创建消费者：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMsgConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> BUSINESS_QUEUE_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到业务消息：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessWaringConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> BUSINESS_BACKUP_WARNING_QUEUE_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"发现不可路由消息：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来我们分别发送一条可路由消息和不可路由消息：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMsgProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCustomMsg</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>        correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消息如下：</p><pre class=" language-java"><code class="language-java">消息id<span class="token operator">:</span>5c3a33c9<span class="token operator">-</span><span class="token number">0764</span><span class="token operator">-</span>4d1f<span class="token operator">-</span>bf6a<span class="token operator">-</span>a00d771dccb4<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息id<span class="token operator">:</span>42ac8c35<span class="token operator">-</span>1d0a<span class="token operator">-</span><span class="token number">4413</span><span class="token operator">-</span>a1df<span class="token operator">-</span>c26a85435354<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>收到业务消息：<span class="token number">1</span>发现不可路由消息：<span class="token number">1</span></code></pre><p>这里仅仅使用 <em>error</em> 日志配合日志系统进行报警，如果是敏感数据，可以使用邮件、钉钉、短信、电话等报警方式来提高时效性。</p><p>那么问题来了，<em>mandatory</em> 参数与备份交换机可以一起使用吗？设置 <em>mandatory</em> 参数会让交换机将不可路由消息退回给生产者，而备份交换机会让交换机将不可路由消息转发给它，那么如果两者同时开启，消息究竟何去何从？？</p><p>emmm，想这么多干嘛，试试不就知道了。</p><p>修改一下生产者即可：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMsgProducer</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">,</span> RabbitTemplate<span class="token punctuation">.</span>ReturnCallback<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        rabbitTemplate.setChannelTransacted(true);</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCustomMsg</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>        correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key2"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> correlationData <span class="token operator">!=</span> null <span class="token operator">?</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息确认成功, id:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消息未成功投递, id:{}, cause:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> <span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> String replyText<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span> String routingKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息被服务器退回。msg:{}, replyCode:{}. replyText:{}, exchange:{}, routingKey :{}"</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再来测试一下：</p><pre class=" language-java"><code class="language-java">消息id<span class="token operator">:</span>0a3eca1e<span class="token operator">-</span>d937<span class="token operator">-</span>418c<span class="token operator">-</span>a7ce<span class="token operator">-</span>bfb8ce25fdd4<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息id<span class="token operator">:</span>d8c9e010<span class="token operator">-</span>e120<span class="token operator">-</span>46da<span class="token operator">-</span>a42e<span class="token operator">-</span>1ba21026ff06<span class="token punctuation">,</span> msg<span class="token operator">:</span><span class="token number">1</span>消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>0a3eca1e<span class="token operator">-</span>d937<span class="token operator">-</span>418c<span class="token operator">-</span>a7ce<span class="token operator">-</span>bfb8ce25fdd4消息确认成功<span class="token punctuation">,</span> id<span class="token operator">:</span>d8c9e010<span class="token operator">-</span>e120<span class="token operator">-</span>46da<span class="token operator">-</span>a42e<span class="token operator">-</span>1ba21026ff06发现不可路由消息：<span class="token number">1</span>收到业务消息：<span class="token number">1</span></code></pre><p>可以看到，两条消息都可以收到确认成功回调，但是不可路由消息不会被回退给生产者，而是直接转发给备份交换机。可见备份交换机的处理优先级更高。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上一篇中，我们介绍了事务机制和生产者确认机制来确保消息的可靠投递，相对而言，生产者确认机制更加高效和灵活。本篇中，我们介绍了另外两种确保生产者的消息不丢失的机制，即通过 mandatory 参数和备份交换机来处理不可路由消息。</p><p>通过以上几种机制，我们总算是可以确保消息被万无一失的投递到目的地了。到此，我们的消息可靠投递也就告一段落了。消息可靠投递是我们使用MQ时无法逃避的话题，一次性搞定它，就不会再为其所困。总的来说，方法总比问题多，但如果你不知道这些方法，那么当问题来临时，也许就会不知所措了。</p><p>相信通过这几篇关于 <em>RabbitMQ</em> 文章的学习，对于 <em>RabbitMQ</em> 的理解已经突破天际，那还在等什么，赶紧把接入 <em>RabbitMQ</em> 的项目好好优化一下吧，相信现在你就不会再被那些不知所云的配置和代码所迷惑了。</p><p>到此为止，本篇就完美落幕了，希望能给你带来一些启发，也欢迎关注我的公众号进行留言交流。</p><p><img src="https://i.loli.net/2019/08/11/8MxBPNgyIlTZDRk.png" alt="1565529015677.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【RabbitMQ】如何进行消息可靠投递【上篇】</title>
      <link href="/2020/05/04/rabbitmq/rabbitmq-how-to-ensure-reliable-delivery-of-message/"/>
      <url>/2020/05/04/rabbitmq/rabbitmq-how-to-ensure-reliable-delivery-of-message/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>前几天，突然发生线上报警，钉钉连发了好几条消息，一看是<em>RabbitMQ</em>相关的消息，心头一紧，难道翻车了？</p><p><img src="https://i.loli.net/2019/08/19/o3ZELv7GkRImstJ.jpg" alt="u=1091165172,1855706818&amp;fm=26&amp;gp=0.jpg"></p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>橙色报警<span class="token punctuation">]</span> 应用<span class="token punctuation">[</span>xxx<span class="token punctuation">]</span>在<span class="token punctuation">[</span><span class="token number">08</span><span class="token operator">-</span><span class="token number">15</span> <span class="token number">16</span><span class="token operator">:</span><span class="token number">36</span><span class="token operator">:</span><span class="token number">04</span><span class="token punctuation">]</span>发生<span class="token punctuation">[</span>错误日志异常<span class="token punctuation">]</span>，alertId<span class="token operator">=</span><span class="token punctuation">[</span>xxx<span class="token punctuation">]</span>。由<span class="token punctuation">[</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>BlockingQueueConsumer<span class="token operator">:</span>start<span class="token operator">:</span><span class="token number">620</span><span class="token punctuation">]</span>触发。应用xxx 可能原因如下服务名为： 异常为：org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>BlockingQueueConsumer<span class="token operator">:</span>start<span class="token operator">:</span><span class="token number">620</span> 产生原因如下<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">.</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>QueuesNotAvailableException<span class="token operator">:</span> Cannot prepare queue <span class="token keyword">for</span> listener<span class="token punctuation">.</span> Either the queue doesn't exist or the broker will not allow us to use it<span class="token punctuation">.</span><span class="token operator">||</span>Consumer received fatal<span class="token operator">=</span><span class="token boolean">false</span> exception on startup<span class="token operator">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>应用xxx 可能原因如下服务名为： 异常为：org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>amqp<span class="token punctuation">.</span>rabbit<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>SimpleMessageListenerContainer$AsyncMessageProcessingConsumer<span class="token operator">:</span>run<span class="token operator">:</span><span class="token number">1160</span> 产生原因如下<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">.</span>Stopping container from aborted consumer<span class="token operator">||</span>Stopping container from aborted consumer<span class="token operator">:</span></code></pre><p>定睛一看，看样子像是消费者莫名其妙断开了连接，正逢公司搬家之际，难道是机房又双叒叕。。。。断电了？于是赶紧联系了运维，咨询<em>RabbitMQ</em>是否发生了调整。几分钟后，得到了运维的回复，由于一些不可描述的原因，<em>RabbitMQ</em>进行了重启，emmmm，虽然重启只持续了10分钟，但是导致该集群下所有消费者都挂了，需要将项目重启后才能正常进行消费。</p><p>项目重启后，一切似乎又正常运转起来，但好景不长，没过多久，工单就找上了门来，经过排查，发现是生产者在<em>RabbitMQ</em>重启期间消息投递失败，导致消息丢失，需要手动处理和恢复。</p><p>于是，我开始思考，如何才能进行<em>RabbitMQ</em>的消息可靠投递呢？特别是在这样比较极端的情况，<em>RabbitMQ</em>集群不可用的时候，无法投递的消息该如何处理呢？</p><h2 id="可靠投递"><a href="#可靠投递" class="headerlink" title="可靠投递"></a>可靠投递</h2><p>先来说明一个概念，什么是可靠投递呢？在<em>RabbitMQ</em>中，一个消息从生产者发送到<em>RabbitMQ</em>服务器，需要经历这么几个步骤：</p><ol><li>生产者准备好需要投递的消息。</li><li>生产者与<em>RabbitMQ</em>服务器建立连接。</li><li>生产者发送消息。</li><li><em>RabbitMQ</em>服务器接收到消息，并将其路由到指定队列。</li><li><em>RabbitMQ</em>服务器发起回调，告知生产者消息发送成功。</li></ol><p>所谓可靠投递，就是确保消息能够百分百从生产者发送到服务器。</p><p><img src="https://i.loli.net/2019/08/18/yHcfoILDmTh7qbd.jpg" alt="{6582FAF9-A46E-4239-810B-E1D6883ED070}.png.jpg"></p><p>为了避免争议，补充说明一下，如果没有设置<em>Mandatory</em>参数，是不需要先路由消息才发起回调的，服务器收到消息后就会进行回调确认。</p><p>2、3、5步都是通过<em>TCP</em>连接进行交互，有网络调用的地方就会有事故，网络波动随时都有可能发生，不管是内部机房停电，还是外部光缆被切，网络事故无法预测，虽然这些都是小概率事件，但对于订单等敏感数据处理来说，这些情况下导致消息丢失都是不可接受的。</p><p><img src="https://i.loli.net/2019/08/19/Fwp87UqONIKCZsJ.jpg" alt="20170716034945131.jpg"></p><h2 id="RabbitMQ中的消息可靠投递"><a href="#RabbitMQ中的消息可靠投递" class="headerlink" title="RabbitMQ中的消息可靠投递"></a>RabbitMQ中的消息可靠投递</h2><p>默认情况下，发送消息的操作是不会返回任何信息给生产者的，也就是说，默认情况下生产者是不知道消息有没有正确地到达服务器。</p><p>那么如何解决这个问题呢？</p><p>对此，<em>RabbitMQ</em>中有一些相关的解决方案：</p><ol><li>使用事务机制来让生产者感知消息被成功投递到服务器。</li><li>通过生产者确认机制实现。</li></ol><p>在<em>RabbitMQ</em>中，所有确保消息可靠投递的机制都会对性能产生一定影响，如使用不当，可能会对吞吐量造成重大影响，只有通过执行性能基准测试，才能在确定性能与可靠投递之间的平衡。</p><p>在使用可靠投递前，需要先思考以下问题：</p><ol><li>消息发布时，保证消息进入队列的重要性有多高？</li><li>如果消息无法进行路由，是否应该将该消息返回给发布者？</li><li>如果消息无法被路由，是否应该将其发送到其他地方稍后再重新进行路由？</li><li>如果<em>RabbitMQ</em>服务器崩溃了，是否可以接受消息丢失？</li><li><em>RabbitMQ</em>在处理新消息时是否应该确认它已经为发布者执行了所有请求的路由和持久化？</li><li>消息发布者是否可以批量投递消息？</li><li>在可靠投递上是否有可以接受的平衡性？是否可以接受一部分的不可靠性来提升性能？</li></ol><p>只考虑平衡性不考虑性能是不行的，至于这个平衡的度具体如何把握，就要具体情况具体分析了，比如像订单数据这样敏感的信息，对可靠性的要求自然要比一般的业务消息对可靠性的要求高的多，因为订单数据是跟钱直接相关的，可能会导致直接的经济损失。</p><p>所以不仅应该知道有哪些保证消息可靠性的解决方案，还应该知道每种方案对性能的影响程度，以此来进行方案的选择。</p><h3 id="RabbitMQ的事务机制"><a href="#RabbitMQ的事务机制" class="headerlink" title="RabbitMQ的事务机制"></a>RabbitMQ的事务机制</h3><p><em>RabbitMQ</em>是支持<em>AMQP</em>事务机制的，在生产者确认机制之前，事务是确保消息被成功投递的唯一方法。</p><p>在<em>SpringBoot</em>项目中，使用<em>RabbitMQ</em>事务其实很简单，只需要声明一个事务管理的<em>Bean</em>，并将<em>RabbitTemplate</em>的事务设置为true即可。</p><p>配置文件如下：</p><pre class=" language-yml"><code class="language-yml">spring:  rabbitmq:    host: localhost    password: guest    username: guest    listener:      type: simple      simple:        default-requeue-rejected: false        acknowledge-mode: manual</code></pre><p>先来配置一下交换机和队列，以及事务管理器。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_EXCHANGE_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.tx.demo.simple.business.exchange"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BUSINESS_QUEUEA_NAME <span class="token operator">=</span> <span class="token string">"rabbitmq.tx.demo.simple.business.queue"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明业务Exchange</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> FanoutExchange <span class="token function">businessExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span>BUSINESS_EXCHANGE_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"businessQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Queue <span class="token function">businessQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> QueueBuilder<span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span>BUSINESS_QUEUEA_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 声明业务队列绑定关系</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">businessBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessQueue"</span><span class="token punctuation">)</span> Queue queue<span class="token punctuation">,</span>                                    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"businessExchange"</span><span class="token punctuation">)</span> FanoutExchange exchange<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 配置启用rabbitmq事务     * @param connectionFactory     * @return     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTransactionManager <span class="token function">rabbitTransactionManager</span><span class="token punctuation">(</span>CachingConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTransactionManager</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后创建一个消费者，来监听消息，用以判断消息是否成功发送。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMsgConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> BUSINESS_QUEUEA_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMsg</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到业务消息：{}"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicNack</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是消息生产者：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMsgProducer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setChannelTransacted</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>BUSINESS_EXCHANGE_NAME<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"exception"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"surprise!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息已发送 {}"</span> <span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里有两个注意的地方：</p><ol><li>在初始化方法里，通过使用<code>rabbitTemplate.setChannelTransacted(true);</code> 来开启事务。</li><li>在发送消息的方法上加上 <code>@Transactional</code> 注解，这样在该方法中发生异常时，消息将不会发送。</li></ol><p>在controller中加一个接口来生产消息：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> BusinessMsgProducer producer<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"send"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        producer<span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来验证一下：</p><pre class=" language-shell"><code class="language-shell">msg:1消息已发送 1收到业务消息：1msg:2消息已发送 2收到业务消息：2msg:3消息已发送 3收到业务消息：3msg:exceptionServlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException: surprise!] with root causejava.lang.RuntimeException: surprise!    at com.mfrank.rabbitmqdemo.producer.BusinessMsgProducer.sendMsg(BusinessMsgProducer.java:30)    ...</code></pre><p>当 <code>msg</code> 的值为 <code>exception</code> 时， 在调用<code>rabbitTemplate.convertAndSend</code> 方法之后，程序抛出了异常，消息并没有发送出去，而是被当前事务回滚了。</p><p>当然，你可以将事务管理器注释掉，或者将初始化方法的开启事务注释掉，这样事务就不会生效，即使在调用了发送消息方法之后，程序发生了异常，消息也会被正常发送和消费。</p><p>RabbitMQ中的事务使用起来虽然简单，但是对性能的影响是不可忽视的，因为每次事务的提交都是阻塞式的等待服务器处理返回结果，而默认模式下，客户端是不需要等待的，直接发送就完事了，除此之外，事务消息需要比普通消息多4次与服务器的交互，这就意味着会占用更多的处理时间，所以如果对消息处理速度有较高要求时，尽量不要采用事务机制。</p><h3 id="RabbitMQ的生产者确认机制"><a href="#RabbitMQ的生产者确认机制" class="headerlink" title="RabbitMQ的生产者确认机制"></a>RabbitMQ的生产者确认机制</h3><p><em>RabbitMQ<em>中的生产者确认功能是</em>AMQP<em>规范的增强功能，当生产者发布给所有队列的已路由消息被消费者应用程序直接消费时，或者消息被放入队列并根据需要进行持久化时，一个</em>Basic.Ack<em>请求会被发送到生产者，如果消息无法路由，代理服务器将发送一个</em>Basic.Nack</em> RPC请求用于表示失败。然后由生产者决定该如何处理该消息。</p><p>也就是说，通过生产者确认机制，生产者可以在消息被服务器成功接收时得到反馈，并有机会处理未被成功接收的消息。</p><p>在Springboot中开启RabbitMQ的生产者确认模式也很简单，只多了一行配置：</p><pre class=" language-yml"><code class="language-yml">spring:  rabbitmq:    host: localhost    password: guest    username: guest    listener:      type: simple      simple:        default-requeue-rejected: false        acknowledge-mode: manual    publisher-confirms: true</code></pre><p><code>publisher-confirms: true</code> 即表示开启生产者确认模式。</p><p>然后将消息生产者的代表进行部分修改：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BusinessMsgProducer</span> <span class="token keyword">implements</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        rabbitTemplate.setChannelTransacted(true);</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendCustomMsg</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息id:{}, msg:{}"</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span>CorrelationData correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> b<span class="token punctuation">,</span> String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String id <span class="token operator">=</span> correlationData <span class="token operator">!=</span> null <span class="token operator">?</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"消息确认成功, id:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"消息未成功投递, id:{}, cause:{}"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>让生产者继承自<code>RabbitTemplate.ConfirmCallback</code> 类，然后实现其<code>confirm</code> 方法，即可用其接收服务器回调。</p><p>需要注意的是，在发送消息时，代码也进行了调整：</p><pre class=" language-java"><code class="language-java">CorrelationData correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里我们为消息设置了消息ID，以便在回调时通过该ID来判断是对哪个消息的回调，因为在回调函数中，我们是无法直接获取到消息内容的，所以需要将消息先暂存起来，根据消息的重要程度，可以考虑使用本地缓存，或者存入<em>Redis</em>中，或者<em>Mysql</em>中，然后在回调时更新其状态或者从缓存中移除，最后使用定时任务对一段时间内未发送的消息进行重新投递。</p><p>以下是我盗来的图，原谅我偷懒不想画了[手动狗头]：</p><p><img src="https://i.loli.net/2019/08/19/CO5bs2xwh4WHFpM.png" alt="5b65729e0001439305000294.jpg"></p><p>另外，还需要注意的是，如果将消息发布到不存在的交换机上，那么发布用的信道将会被<em>RabbitMQ</em>关闭。</p><p>此外，生产者确认机制跟事务是不能一起工作的，是事务的轻量级替代方案。因为事务和发布者确认模式都是需要先跟服务器协商，对信道启用的一种模式，不能对同一个信道同时使用两种模式。</p><p>在生产者确认模式中，消息的确认可以是异步和批量的，所以相比使用事务，性能会更好。</p><p>使用事务机制和生产者确认机制都能确保消息被正确的发送至<em>RabbitMQ</em>，这里的“正确发送至RabbitMQ”说的是消息成功被交换机接收，但如果找不到能接收该消息的队列，这条消息也会丢失。至于如何处理那些无法被投递到队列的消息，将会在下篇进行说明。</p><h2 id="结题"><a href="#结题" class="headerlink" title="结题"></a>结题</h2><p>所以当公司机房“断电”时，如何处理那些需要发送的消息呢？相信看完上文之后，你的心中已经有了答案。</p><p>一般来说，这种“断电”不会持续较长时间，一般几分钟到半小时之间，很快能够恢复，所以如果是重要消息，可以保存到数据库中，如果是非重要消息，可以使用<em>redis</em>进行保存，当然，还要根据消息的数量级来进行判断。</p><p>如果消息量比较大，可以考虑将消息发送到另一个集群的死信队列中，事实上，所在公司就有两个<em>RabbitMQ</em>集群，所以当一个集群不可用时，可以往另一个集群发消息，emmm，如果两个机房都停电了的话，当我没说。</p><p><img src="https://i.loli.net/2019/08/19/c8ZGAL7OEPQTeWM.jpg" alt="111.png.jpg"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【最佳实践】如何优雅的进行重试</title>
      <link href="/2020/05/04/best-practice/how-to-retry-elegantly/"/>
      <url>/2020/05/04/best-practice/how-to-retry-elegantly/</url>
      
        <content type="html"><![CDATA[<p>本文口味：冰镇杨梅           预计阅读：20分钟</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>最近公司在搞活动，需要依赖一个第三方接口，测试阶段并没有什么异常状况，但上线后发现依赖的接口有时候会因为内部错误而返回系统异常，虽然概率不大，但总因为这个而报警总是不好的，何况死信队列的消息还需要麻烦运维进行重新投递，所以加上重试机制势在必行。</p><p>重试机制可以保护系统减少因网络波动、依赖服务短暂性不可用带来的影响，让系统能更稳定的运行的一种保护机制。让你原本就稳如狗的系统更是稳上加稳。</p><p><img src="https://i.loli.net/2019/08/04/eAUjdRTgskmWF3f.png" alt="1"></p><p>为了方便说明，先假设我们想要进行重试的方法如下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicLong helloTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> times <span class="token operator">=</span> helloTimes<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发生异常，time：{}"</span><span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HelloRetryException</span><span class="token punctuation">(</span><span class="token string">"发生Hello异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用处：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloRetryService</span> <span class="token keyword">implements</span> <span class="token class-name">IHelloService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloService helloService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> helloService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也就是说，这个接口每调4次才会成功一次。</p><h2 id="手动重试"><a href="#手动重试" class="headerlink" title="手动重试"></a>手动重试</h2><p>先来用最简单的方法，直接在调用的时候进重试：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 手动重试</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> maxRetryTimes <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> retry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> retry <span class="token operator">&lt;=</span> maxRetryTimes<span class="token punctuation">;</span> retry<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloService返回:{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HelloRetryException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloService.hello() 调用失败，准备重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HelloRetryException</span><span class="token punctuation">(</span><span class="token string">"重试次数耗尽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre class=" language-shell"><code class="language-shell">发生异常，time：10:17:21.079413300helloService.hello() 调用失败，准备重试发生异常，time：10:17:21.085861800helloService.hello() 调用失败，准备重试发生异常，time：10:17:21.085861800helloService.hello() 调用失败，准备重试helloService返回:helloservice.helloRetry()：hello</code></pre><p>程序在极短的时间内进行了4次重试，然后成功返回。</p><p>这样虽然看起来可以解决问题，但实践上，由于没有重试间隔，很可能当时依赖的服务尚未从网络异常中恢复过来，所以极有可能接下来的几次调用都是失败的。</p><p>而且，这样需要对代码进行大量的侵入式修改，显然，不优雅。</p><p><img src="https://i.loli.net/2019/08/04/ABwDil3xTFaIfyu.png" alt="3.png"></p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>上面的处理方式由于需要对业务代码进行大量修改，虽然实现了功能，但是对原有代码的侵入性太强，可维护性差。</p><p>所以需要使用一种更优雅一点的方式，不直接修改业务代码，那要怎么做呢？</p><p>其实很简单，直接在业务代码的外面再包一层就行了，代理模式在这里就有用武之地了。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloRetryProxyService</span> <span class="token keyword">implements</span> <span class="token class-name">IHelloService</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> HelloRetryService helloRetryService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> maxRetryTimes <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> retry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> retry <span class="token operator">&lt;=</span> maxRetryTimes<span class="token punctuation">;</span> retry<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                s <span class="token operator">=</span> helloRetryService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloRetryService 返回:{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> s<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HelloRetryException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloRetryService.hello() 调用失败，准备重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HelloRetryException</span><span class="token punctuation">(</span><span class="token string">"重试次数耗尽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样，重试逻辑就都由代理类来完成，原业务类的逻辑就不需要修改了，以后想修改重试逻辑也只需要修改这个类就行了，分工明确。比如，现在想要在重试之间加上一个延迟，只需要做一点点修改即可：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> maxRetryTimes <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    String s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> retry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> retry <span class="token operator">&lt;=</span> maxRetryTimes<span class="token punctuation">;</span> retry<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            s <span class="token operator">=</span> helloRetryService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloRetryService 返回:{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HelloRetryException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"helloRetryService.hello() 调用失败，准备重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 延时一秒</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HelloRetryException</span><span class="token punctuation">(</span><span class="token string">"重试次数耗尽"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代理模式虽然要更加优雅，但是如果依赖的服务很多的时候，要为每个服务都创建一个代理类，显然过于麻烦，而且其实重试的逻辑都大同小异，无非就是重试的次数和延时不一样而已。如果每个类都写这么一长串类似的代码，显然，不优雅！</p><p><img src="https://i.loli.net/2019/08/04/z6JxEGdhUK9y1YW.png" alt="4.png"></p><h2 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h2><p>这时候，动态代理就闪亮登场了。只需要写一个代理处理类，就可以开局一条狗，砍到九十九。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RetryInvocationHandler</span><span class="token punctuation">(</span>Object subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>times <span class="token operator">&lt;</span> RetryConstant<span class="token punctuation">.</span>MAX_TIMES<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                times<span class="token operator">++</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"times:{},time:{}"</span><span class="token punctuation">,</span> times<span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">>=</span> RetryConstant<span class="token punctuation">.</span>MAX_TIMES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 延时一秒</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取动态代理     *     * @param realSubject 代理对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span>Object realSubject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryInvocationHandler</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                realSubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来一发单元测：</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloDynamicProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    IHelloService realService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IHelloService proxyService <span class="token operator">=</span> <span class="token punctuation">(</span>IHelloService<span class="token punctuation">)</span>RetryInvocationHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>realService<span class="token punctuation">)</span><span class="token punctuation">;</span>    String hello <span class="token operator">=</span> proxyService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello:{}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre class=" language-shell"><code class="language-shell">hello times:1发生异常，time：11:22:20.727586700times:1,time:11:22:20.728083hello times:2发生异常，time：11:22:21.728858700times:2,time:11:22:21.729343700hello times:3发生异常，time：11:22:22.729706600times:3,time:11:22:22.729706600hello times:4hello:hello</code></pre><p>在重试了4次之后输出了<code>Hello</code>，符合预期。</p><p>动态代理可以将重试逻辑都放到一块，显然比直接使用代理类要方便很多，也更加优雅。</p><p>不过不要高兴的太早，这里因为被代理的<em>HelloService</em>是一个简单的类，没有依赖其它类，所以直接创建是没有问题的，但如果被代理的类依赖了其它被<em>Spring</em>容器管理的类，则这种方式会抛出异常，因为没有把被依赖的实例注入到创建的代理实例中。</p><p>这种情况下，就比较复杂了，需要从<em>Spring</em>容器中获取已经装配好的，需要被代理的实例，然后为其创建代理类实例，并交给<em>Spring</em>容器来管理，这样就不用每次都重新创建新的代理类实例了。</p><p>话不多说，撸起袖子就是干。</p><p><img src="https://i.loli.net/2019/08/11/w8R6EAGCtkneQhI.jpg" alt="timg.jpg"></p><p>新建一个工具类，用来获取代理实例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryProxyHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ConfigurableApplicationContext context<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span>Class <span class="token class-name">clazz</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. 从Bean中获取对象</span>        DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span>DefaultListableBeanFactory<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">getAutowireCapableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> beans <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> entries <span class="token operator">=</span> beans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProxyBeanNotFoundException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果有多个候选bean, 判断其中是否有代理bean</span>        Object bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>PROXY_BEAN_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    bean <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ProxyBeanNotSingleException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object source <span class="token operator">=</span> beans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object source <span class="token operator">=</span> beans<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 判断该对象的代理对象是否存在</span>        String proxyBeanName <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> PROXY_BEAN_SUFFIX<span class="token punctuation">;</span>        Boolean exist <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>proxyBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exist<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>proxyBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bean<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 3. 不存在则生成代理对象</span>        bean <span class="token operator">=</span> RetryInvocationHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 将bean注入spring容器</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>proxyBeanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用的是<code>JDK动态代理</code>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object subject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RetryInvocationHandler</span><span class="token punctuation">(</span>Object subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>times <span class="token operator">&lt;</span> RetryConstant<span class="token punctuation">.</span>MAX_TIMES<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                times<span class="token operator">++</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"retry times:{},time:{}"</span><span class="token punctuation">,</span> times<span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">>=</span> RetryConstant<span class="token punctuation">.</span>MAX_TIMES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 延时一秒</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取动态代理     *     * @param realSubject 代理对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span>Object realSubject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryInvocationHandler</span><span class="token punctuation">(</span>realSubject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                realSubject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至此，主要代码就完成了，修改一下<em>HelloService</em>类，增加一个依赖：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloService</span> <span class="token keyword">implements</span> <span class="token class-name">IHelloService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> AtomicLong helloTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> NameService nameService<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> times <span class="token operator">=</span> helloTimes<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello times:{}"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发生异常，time：{}"</span><span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HelloRetryException</span><span class="token punctuation">(</span><span class="token string">"发生Hello异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> nameService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><em>NameService</em>其实很简单，创建的目的仅在于测试依赖注入的<em>Bean</em>能否正常运行。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NameService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Frank"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>来一发测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloJdkProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> IllegalAccessException <span class="token punctuation">{</span>    IHelloService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IHelloService<span class="token punctuation">)</span> retryProxyHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String hello <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello:{}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-text"><code class="language-text">hello times:1发生异常，time：14:40:27.540672200retry times:1,time:14:40:27.541167400hello times:2发生异常，time：14:40:28.541584600retry times:2,time:14:40:28.542033500hello times:3发生异常，time：14:40:29.542161500retry times:3,time:14:40:29.542161500hello times:4hello:hello Frank</code></pre><p>完美，这样就不用担心依赖注入的问题了，因为从<em>Spring</em>容器中拿到的<em>Bean</em>对象都是已经注入配置好的。当然，这里仅考虑了单例<em>Bean</em>的情况，可以考虑的更加完善一点，判断一下容器中<em>Bean</em>的类型是Singleton还是<em>Prototype</em>，如果是<em>Singleton</em>则像上面这样进行操作，如果是<em>Prototype</em>则每次都新建代理类对象。</p><p>另外，这里使用的是<code>JDK动态代理</code>，因此就存在一个天然的缺陷，如果想要被代理的类，没有实现任何接口，那么就无法为其创建代理对象，这种方式就行不通了。</p><p><img src="https://i.loli.net/2019/08/11/GzmFVto59SLMgOl.jpg" alt="EDaBTlbkyvbhmng.jpg"></p><h2 id="CGLib-动态代理"><a href="#CGLib-动态代理" class="headerlink" title="CGLib 动态代理"></a>CGLib 动态代理</h2><p>既然已经说到了<code>JDK动态代理</code>，那就不得不提<code>CGLib动态代理</code>了。使用<code>JDK动态代理</code>对被代理的类有要求，不是所有的类都能被代理，而<code>CGLib动态代理</code>则刚好解决了这个问题。</p><p>创建一个<code>CGLib动态代理</code>类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CGLibRetryProxyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要代理的目标对象</span>    <span class="token comment" spellcheck="true">//重写拦截方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> MethodProxy proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>times <span class="token operator">&lt;</span> RetryConstant<span class="token punctuation">.</span>MAX_TIMES<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                times<span class="token operator">++</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"cglib retry :{},time:{}"</span><span class="token punctuation">,</span> times<span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">>=</span> RetryConstant<span class="token punctuation">.</span>MAX_TIMES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 延时一秒</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//定义获取代理对象方法</span>    <span class="token keyword">public</span> Object <span class="token function">getCglibProxy</span><span class="token punctuation">(</span>Object objectTarget<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> objectTarget<span class="token punctuation">;</span>        Enhancer enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>objectTarget<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>想要换用<code>CGLib动态代理</code>，替换一下这两行代码即可：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 3. 不存在则生成代理对象</span><span class="token comment" spellcheck="true">//        bean = RetryInvocationHandler.getProxy(source);</span>CGLibRetryProxyHandler proxyHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CGLibRetryProxyHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bean <span class="token operator">=</span> proxyHandler<span class="token punctuation">.</span><span class="token function">getCglibProxy</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>开始测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloCGLibProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    IHelloService proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IHelloService<span class="token punctuation">)</span> retryProxyHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>HelloService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String hello <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello:{}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    hello <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello:{}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-text"><code class="language-text">hello times:1发生异常，time：15:06:00.799679100cglib retry :1,time:15:06:00.800175400hello times:2发生异常，time：15:06:01.800848600cglib retry :2,time:15:06:01.801343100hello times:3发生异常，time：15:06:02.802180cglib retry :3,time:15:06:02.802180hello times:4hello:hello Frankhello times:5发生异常，time：15:06:03.803933800cglib retry :1,time:15:06:03.803933800hello times:6发生异常，time：15:06:04.804945400cglib retry :2,time:15:06:04.805442hello times:7发生异常，time：15:06:05.806886500cglib retry :3,time:15:06:05.807881300hello times:8hello:hello Frank</code></pre><p>这样就很棒了，完美的解决了<code>JDK动态代理</code>带来的缺陷。优雅指数上涨了不少。</p><p>但这个方案仍旧存在一个问题，那就是需要对原来的逻辑进行侵入式修改，在每个被代理实例被调用的地方都需要进行调整，这样仍然会对原有代码带来较多修改。</p><p><img src="https://i.loli.net/2019/08/11/IczsWOdt4PL6vom.jpg" alt="fuuTyTbkyvbhmsa.jpg"></p><h2 id="Spring-AOP"><a href="#Spring-AOP" class="headerlink" title="Spring AOP"></a>Spring AOP</h2><p>想要无侵入式的修改原有逻辑？想要一个注解就实现重试？用<code>Spring AOP</code>不就能完美实现吗？使用<code>AOP</code>来为目标调用设置切面，即可在目标方法调用前后添加一些额外的逻辑。</p><p>先创建一个注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>METHOD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Retryable</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">retryTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">retryInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>有两个参数，<em>retryTimes</em> 代表最大重试次数，<em>retryInterval</em>代表重试间隔。</p><p>然后在需要重试的方法上加上注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>retryTimes <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> retryInterval <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> times <span class="token operator">=</span> helloTimes<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello times:{}"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发生异常，time：{}"</span><span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HelloRetryException</span><span class="token punctuation">(</span><span class="token string">"发生Hello异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> nameService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着，进行最后一步，编写<em>AOP</em>切面：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.mfrank.springboot.retry.demo.annotation.Retryable)"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">retryMethodCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"retryMethodCall()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">retry</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取重试次数和重试间隔</span>        Retryable retry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span>joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Retryable<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxRetryTimes <span class="token operator">=</span> retry<span class="token punctuation">.</span><span class="token function">retryTimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> retryInterval <span class="token operator">=</span> retry<span class="token punctuation">.</span><span class="token function">retryInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Throwable error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> retryTimes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> retryTimes <span class="token operator">&lt;=</span> maxRetryTimes<span class="token punctuation">;</span> retryTimes<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Object result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>                error <span class="token operator">=</span> throwable<span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"调用发生异常，开始重试，retryTimes:{}"</span><span class="token punctuation">,</span> retryTimes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>retryInterval <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RetryExhaustedException</span><span class="token punctuation">(</span><span class="token string">"重试次数耗尽"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>开始测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> HelloService helloService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">helloAOP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String hello <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello:{}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre class=" language-text"><code class="language-text">hello times:1发生异常，time：16:49:30.224649800调用发生异常，开始重试，retryTimes:1hello times:2发生异常，time：16:49:32.225230800调用发生异常，开始重试，retryTimes:2hello times:3发生异常，time：16:49:34.225968900调用发生异常，开始重试，retryTimes:3hello times:4hello:hello Frank</code></pre><p>这样就相当优雅了，一个注解就能搞定重试，简直不要更棒。</p><p><img src="https://i.loli.net/2019/08/11/fOegoZhjwECGbA9.jpg" alt="IStGDBbkyvbhmow.jpg"></p><h2 id="Spring-的重试注解"><a href="#Spring-的重试注解" class="headerlink" title="Spring 的重试注解"></a>Spring 的重试注解</h2><p>实际上<em>Spring</em>中就有比较完善的重试机制，比上面的切面更加好用，还不需要自己动手重新造轮子。</p><p>那让我们先来看看这个轮子究竟好不好使。</p><p>先引入重试所需的jar包：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后在启动类或者配置类上添加<em>@EnableRetry*注解，接下来在需要重试的方法上添加</em>@Retryable*注解（嗯？好像跟我自定义的注解一样？竟然抄袭我的注解！ [手动滑稽] ） </p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retryable</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> times <span class="token operator">=</span> helloTimes<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello times:{}"</span><span class="token punctuation">,</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>times <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"发生异常，time：{}"</span><span class="token punctuation">,</span> LocalTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">HelloRetryException</span><span class="token punctuation">(</span><span class="token string">"发生Hello异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> nameService<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>默认情况下，会重试三次，重试间隔为1秒。当然我们也可以自定义重试次数和间隔。这样就跟我前面实现的功能是一毛一样的了。</p><p>但<em>Spring</em>里的重试机制还支持很多很有用的特性，比如说，可以指定只对特定类型的异常进行重试，这样如果抛出的是其它类型的异常则不会进行重试，就可以对重试进行更细粒度的控制。默认为空，会对所有异常都重试。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retryable</span><span class="token punctuation">{</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>HelloRetryException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">2</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>也可以使用<em>include</em>和<em>exclude</em>来指定包含或者排除哪些异常进行重试。</p><p>可以用<em>maxAttemps</em>指定最大重试次数，默认为3次。</p><p>可以用<em>interceptor</em>设置重试拦截器的bean名称。</p><p>可以通过<em>label</em>设置该重试的唯一标志，用于统计输出。</p><p>可以使用<em>exceptionExpression</em>来添加异常表达式，在抛出异常后执行，以判断后续是否进行重试。</p><p>此外，<em>Spring</em>中的重试机制还支持使用<em>backoff</em>来设置重试补偿机制，可以设置重试间隔，并且支持设置重试延迟倍数。</p><p>举个例子：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>HelloRetryException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> maxAttempts <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>           backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span> multiplier <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>该方法调用将会在抛出<em>HelloRetryException</em>异常后进行重试，最大重试次数为5，第一次重试间隔为1s，之后以2倍大小进行递增，第二次重试间隔为2s，第三次为4s，第四次为8s。</p><p>重试机制还支持使用 <code>@Recover</code> 注解来进行善后工作，当重试达到指定次数之后，将会调用该方法，可以在该方法中进行日志记录等操作。</p><p>这里值得注意的是，想要 <code>@Recover</code> 注解生效的话，需要跟被 <code>@Retryable</code> 标记的方法在同一个类中，且被 <code>@Retryable</code> 标记的方法不能有返回值，否则不会生效。</p><p>并且如果使用了 <code>@Recover</code> 注解的话，重试次数达到最大次数后，如果在 <code>@Recover</code> 标记的方法中无异常抛出，是不会抛出原异常的。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Recover</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">recover</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"达到最大重试次数"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>除了使用注解外，<code>Spring Retry</code> 也支持直接在调用时使用代码进行重试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">normalSpringRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 表示哪些异常需要重试,key表示异常的字节码,value为true表示需要重试</span>    Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Throwable</span><span class="token operator">></span><span class="token punctuation">,</span> Boolean<span class="token operator">></span> exceptionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exceptionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>HelloRetryException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建重试模板实例</span>    RetryTemplate retryTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置重试回退操作策略，主要设置重试间隔时间</span>    FixedBackOffPolicy backOffPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedBackOffPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> fixedPeriodTime <span class="token operator">=</span> 1000L<span class="token punctuation">;</span>    backOffPolicy<span class="token punctuation">.</span><span class="token function">setBackOffPeriod</span><span class="token punctuation">(</span>fixedPeriodTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置重试策略，主要设置重试次数</span>    <span class="token keyword">int</span> maxRetryTimes <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    SimpleRetryPolicy retryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRetryPolicy</span><span class="token punctuation">(</span>maxRetryTimes<span class="token punctuation">,</span> exceptionMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    retryTemplate<span class="token punctuation">.</span><span class="token function">setRetryPolicy</span><span class="token punctuation">(</span>retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>    retryTemplate<span class="token punctuation">.</span><span class="token function">setBackOffPolicy</span><span class="token punctuation">(</span>backOffPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>    Boolean execute <span class="token operator">=</span> retryTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//RetryCallback</span>        retryContext <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String hello <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用的结果:{}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// RecoverCallBack</span>        retryContext <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//RecoveryCallback</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"已达到最大重试次数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此时唯一的好处是可以设置多种重试策略：</p><pre class=" language-java"><code class="language-java">NeverRetryPolicy：只允许调用RetryCallback一次，不允许重试AlwaysRetryPolicy：允许无限重试，直到成功，此方式逻辑不当会导致死循环SimpleRetryPolicy：固定次数重试策略，默认重试最大次数为<span class="token number">3</span>次，RetryTemplate默认使用的策略TimeoutRetryPolicy：超时时间重试策略，默认超时时间为<span class="token number">1</span>秒，在指定的超时时间内允许重试ExceptionClassifierRetryPolicy：设置不同异常的重试策略，类似组合重试策略，区别在于这里只区分不同异常的重试CircuitBreakerRetryPolicy：有熔断功能的重试策略，需设置<span class="token number">3</span>个参数openTimeout、resetTimeout和delegateCompositeRetryPolicy：组合重试策略，有两种组合方式，乐观组合重试策略是指只要有一个策略允许即可以重试，悲观组合重试策略是指只要有一个策略不允许即可以重试，但不管哪种组合方式，组合中的每一个策略都会执行</code></pre><p>可以看出，<code>Spring</code> 中的重试机制还是相当完善的，比上面自己写的 <code>AOP</code> 切面功能更加强大。</p><p>这里还需要再提醒的一点是，由于<code>Spring Retry</code>用到了<code>Aspect</code>增强，所以就会有使用<code>Aspect</code>不可避免的坑——方法内部调用，如果被 <code>@Retryable</code> 注解的方法的调用方和被调用方处于同一个类中，那么重试将会失效。</p><p>但也还是存在一定的不足，<code>Spring</code>的重试机制只支持对异常进行捕获，而无法对返回值进行校验。</p><p><img src="https://i.loli.net/2019/08/11/9CuPZHtqMbpLA8a.jpg" alt="dtFxiMbkyvbhlzo.jpg"></p><h2 id="Guava-Retry"><a href="#Guava-Retry" class="headerlink" title="Guava Retry"></a>Guava Retry</h2><p>最后，再介绍另一个重试利器——<code>Guava Retry</code>。</p><p>相比<code>Spring Retry</code>，<code>Guava Retry</code>具有更强的灵活性，可以根据返回值校验来判断是否需要进行重试。</p><p>先来看一个小栗子：</p><p>先引入jar包：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.rholder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava-retrying<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后用一个小Demo来感受一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">guavaRetry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Retryer<span class="token operator">&lt;</span>String<span class="token operator">></span> retryer <span class="token operator">=</span> RetryerBuilder<span class="token punctuation">.</span>&lt;String<span class="token operator">></span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">retryIfExceptionOfType</span><span class="token punctuation">(</span>HelloRetryException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">retryIfResult</span><span class="token punctuation">(</span>StringUtils<span class="token operator">:</span><span class="token operator">:</span>isEmpty<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withWaitStrategy</span><span class="token punctuation">(</span>WaitStrategies<span class="token punctuation">.</span><span class="token function">fixedWait</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">withStopStrategy</span><span class="token punctuation">(</span>StopStrategies<span class="token punctuation">.</span><span class="token function">stopAfterAttempt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        retryer<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> helloService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>先创建一个<em>Retryer</em>实例，然后使用这个实例对需要重试的方法进行调用，可以通过很多方法来设置重试机制，比如使用<em>retryIfException</em>来对所有异常进行重试，使用<em>retryIfExceptionOfType</em>方法来设置对指定异常进行重试，使用<em>retryIfResult</em>来对不符合预期的返回结果进行重试，使用<em>retryIfRuntimeException</em>方法来对所有<em>RuntimeException</em>进行重试。</p><p>还有五个以<em>with</em>开头的方法，用来对重试策略/等待策略/阻塞策略/单次任务执行时间限制/自定义监听器进行设置，以实现更加强大的异常处理。</p><p>通过跟 <code>Spring AOP</code> 的结合，可以实现比 <code>Spring Retry</code> 更加强大的重试功能。</p><p>仔细对比之下，<code>Guava Retry</code> 可以提供的特性有：</p><ol><li>可以设置任务单次执行的时间限制，如果超时则抛出异常。</li><li>可以设置重试监听器，用来执行额外的处理工作。</li><li>可以设置任务阻塞策略，即可以设置当前重试完成，下次重试开始前的这段时间做什么事情。</li><li>可以通过停止重试策略和等待策略结合使用来设置更加灵活的策略，比如指数等待时长并最多10次调用，随机等待时长并永不停止等等。</li></ol><p><img src="https://i.loli.net/2019/08/11/MFpbWwysvP6Zqo7.jpg" alt="GBvgTpbkyvbhlEB.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文由浅入深的对多种重试的姿势进行了360度无死角教学，从最简单的手动重试，到使用静态代理，再到 <code>JDK动态代理</code> 和 <code>CGLib动态代理</code> ，再到 <code>Spring AOP</code>，都是手工造轮子的过程，最后介绍了两种目前比较好用的轮子，一个是<code>Spring Retry</code>，使用起来简单粗暴，与 <code>Spring</code> 框架天生搭配，一个注解搞定所有事情，另一个便是 <code>Guava Retry</code>，不依赖于 <code>Spring</code> 框架，自成体系，使用起来更加灵活强大。</p><p>个人认为，大部分场景下，<code>Spring Retry</code> 提供的重试机制已经足够强大，如果不需要 <code>Guava Retry</code> 提供的额外灵活性，使用 <code>Spring Retry</code> 就很棒了。当然，具体情况具体分析，但没有必要的情况下，不鼓励重复造轮子，先把别人的轮子研究清楚再想想还用不用自己动手。</p><p>本文到此就告一段落了，又用了一天的时间完成了完成了一篇文章，写作的目的在于总结和分享，我相信最佳实践是可以总结和积累下来的，在大多数场景下都是适用的，这些最佳实践会在逐渐的积累过程中，成为比经验更为重要的东西。因为经验不总结就会忘记，而总结出来的内容却不会被丢失。</p><p>如果对于重试你有更好的想法，欢迎提出交流探讨，也欢迎关注我的公众号进行留言交流。</p><p><img src="https://i.loli.net/2019/08/11/8MxBPNgyIlTZDRk.png" alt="1565529015677.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最佳实践 </tag>
            
            <tag> 优雅重试 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础篇】四、Java 类与对象</title>
      <link href="/2020/05/04/java/basic/java-class/"/>
      <url>/2020/05/04/java/basic/java-class/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-类与对象"><a href="#Java-类与对象" class="headerlink" title="Java 类与对象"></a>Java 类与对象</h1><blockquote><p><strong>“Sometimes we stare so long at a door that is closing that we see too late the one that is open.”</strong></p><p>— Alexander Graham Bell, Inventor</p><p><strong>「我们有时候专注于消失中的机会太久，以致于太晚发现开启的机会。」</strong>– 亚历山大‧贝尔 (发明家)</p></blockquote><h2 id="关卡说明"><a href="#关卡说明" class="headerlink" title="关卡说明"></a>关卡说明</h2><p>关卡描述：<code>Java</code> 是一门面向对象的语言，<code>类</code>和<code>对象</code>是 <code>Java</code> 中最重要的概念，本关将介绍这两个重要的概念，并通过一个简单的栗子来进行说明，你能否通过本关的考验呢？</p><p>过关条件：理解面向对象编程的特点，理解 <code>Java</code> 中<code>类</code>和<code>对象</code>的关系，以及如何使用它们</p><p>关卡难度：⭐️⭐️</p><h2 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h2><p><strong>面向对象编程</strong>（Object Oriented Programming 简称OOP）是当今主流的程序设计规范，<em>Java</em>是完全面向对象的，所以必须熟悉++OOP++才能编写出优秀的<em>Java</em>代码。</p><p><strong>面向对象编程</strong>，顾名思义，重点就在于这个对象，没有对象怎么编程（手动滑稽）。咳咳，言归正传，面向对象的程序是由许许多多的对象组成，每个对象具有一定的属性和行为，通过对象之间的交互来实现软件的功能。从根本上来说，只要这个对象能满足功能要求，就不必关心它的具体实现过程。换句话说，<strong>不管是黑猫白猫，能抓耗子的猫就是好猫</strong>。</p><p>传统的程序设计是面向过程编程，在传统的程序设计过程中，通常需要先设计一系列的算法来求解问题，然后再考虑存储数据的方式。这就是所谓的：</p><blockquote><p>算法 + 数据结构 = 程序</p></blockquote><p>在面向过程的设计中，算法是放在第一位的，数据结构是为了适应算法而存在的。</p><p>而在OOP中，这个顺序刚好相反，数据结构放在第一位，然后再考虑操作数据的算法。</p><p>两种开发方式各有利弊，一些简单的问题，使用面向过程的开发方式是比较容易的，因为它符合人们的惯常思考方式，先这样做，再那样做，最后得到一个什么样的结果。而面向对象的编程适合于解决更复杂的问题。比如实现一个网站也许需要1000个函数，这些过程可能会对一组全局的数据进行操作。如果采用面向对象的方式来设计，可能只需要大约100个类，每个类10个方法，而且大多数情况下，面向过程开发的代码中有很多设计是可以使用面向对象的方式简化和复用的。所以后者显然更容易掌握和维护，而且如果万一某个数据出了问题，在10个方法中排查总比在1000个函数中排查要容易得多。</p><h2 id="Java中的类和对象"><a href="#Java中的类和对象" class="headerlink" title="Java中的类和对象"></a>Java中的类和对象</h2><p>既然面向对象编程这么优秀，那么我们就来好好认识一下这其中的主人公——类和对象。</p><p>“类”是对具有相同属性的一系列事物的抽象，比如说，“人类”，描述的就是有“人”这个共同属性和行为的群体，普通的人都有两只手，两只脚等基本外貌特征，也具有说话，吃东西等能力，比如“轿车”描述的是有四个轮子，可以驾驶，可以载人的小型车辆，不管你是黑色的奔驰还是白色的宝马，都可以叫做轿车。</p><p>那么什么是对象呢？对象就是类的某个具体实例，就好比你和我都是“人类”的一个具体实例，所以我们都是“人类”的一个对象。你家车库里的那辆轿车（不管是奔驰还是大众），也是“轿车”的一个对象。</p><blockquote><p>类是抽象的概念，是对具有共同特征的事物的抽象，而对象则是具体的概念，是指某一个具体的实例。</p></blockquote><p>类可以看作是对象的模子，可以用它来生产任意多个对象。</p><h2 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h2><p>先来看一个小栗子，我们来定义一个人类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始吃饭..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，我今年"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们定义了一个类，类的名字叫做<code>Person</code>，它有两个属性，一个是<code>name</code>，一个是<code>age</code>。并且有三个方法，一个是构造函数，两个是Person的行为，吃饭和说话。</p><p>可以看到，定义类的时候，我们是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>定义类的格式为：</p><blockquote><p>[访问权限修饰符] + class + [类名] </p></blockquote><p>其中访问权限修饰符用来表示类是否可以被外部类访问，<code>public</code>是最宽松的访问权限，表示这个类可以被外部的类访问和使用。关于访问权限修饰符，后面还会有更详细的介绍。</p><p><code>class</code>是用来声明一个类的关键字。什么是关键字呢？可以理解为一种声明，就像武功招式一样，大都会有一个起手式。<code>Java</code> 中的关键字其实不多，常用的就更少，所以在之后的学习过程中慢慢掌握就好了，不用太担心。</p><p>关于类名，跟变量名一样，必须以字母开头，可以由字母、数字和下划线和$组成，但跟变量命名不同的是，Java中的类名规范通常使用大驼峰命名法，即每个单词的首字母都大写。比如：<em>SmallCar</em>、<em>SecondhandBook</em>。</p><h2 id="类的组成"><a href="#类的组成" class="headerlink" title="类的组成"></a>类的组成</h2><p>一个类主要由实例域和方法域组成，实例域由类的成员变量组成，上面的栗子中，Person类的实例域为：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></code></pre><p>这是Person类的两个成员变量，也叫Person类的属性，一个人有名字和年龄，在这里对应的两个属性就是<code>name</code>和<code>age</code>。</p><p>成员变量定义的规则为：</p><blockquote><p>[访问修饰符] + [成员变量类型] + [变量名]</p></blockquote><p>接下来是方法域，顾名思义便是由各种方法组成的。方法的定义规则为：</p><blockquote><p>[访问修饰符] + [方法返回值类型] + [方法名]</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始吃饭..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"，我今年"</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">"岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里，<code>void</code>表示当前方法无返回值。方法的命名跟变量的命名规则一样，也使用小驼峰命名法。需要注意的一点是，无论是类名、方法名还是变量名，都需要具有一定的意义，也就是要能够传达出它代表的含义，做到见名知义。像<code>a1</code>、<code>a2</code>这样的命名就尽量不要出现。</p><p>也许你会好奇，上面不是还有一个方法吗？为什看起来有点奇怪呢？为什么它不使用小驼峰，为什么它跟类名是一样的？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这是一个好问题，它叫做<strong>构造函数</strong>，是创建变量时使用的一个特殊的方法，与类名同名。这个方法有两个参数，一个是<code>String</code>类型，一个是<code>int</code>类型，<code>name</code>和<code>age</code>是参数名，跟变量名类似。这里面还用了一个<code>this</code>关键字，代表当前对象，可以看到参数名跟上面的成员变量名相同，为了将它们区分开来，就使用了<code>this.name</code>和<code>this.age</code>来表示成员变量。这个方法的作用就是接收传进来的两个参数，并将它们分别赋值给成员变量。关于构造函数的具体作用会在之后的篇章里做说明，这里就先不详细介绍了。</p><h2 id="对象的创建和使用"><a href="#对象的创建和使用" class="headerlink" title="对象的创建和使用"></a>对象的创建和使用</h2><p>既然已经有了类，那么如何创建对象呢？这时候就需要使用新的招式——<code>new</code>关键字。下面我们在<em>Person</em>类中加入一个main方法（如果不记得<em>main</em>方法是干嘛的了，可以翻看一下上一篇的内容），并在其中创建一个<em>Person</em>对象并调用它的方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Person alice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alice<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        alice<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><pre class=" language-bash"><code class="language-bash">我叫Alice，我今年18岁开始吃饭<span class="token punctuation">..</span>.</code></pre><p>老规矩，我们来逐行分析，首先我们使用了<code>new</code>关键字创建了一个对象：</p><pre class=" language-java"><code class="language-java">Person alice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在前面我们已经介绍过变量的声明方式了，回顾一下：</p><blockquote><p>[类名] + [变量名]</p></blockquote><p><em>Person</em>是类名，<em>alice</em>是变量的名字，后面半段的作用是创建对象。往里面传了两个参数：<code>Alice</code>和<code>18</code>。创建好对象后，赋值给<em>alice</em>变量。</p><p>然后我们分别调用了两个方法，<code>say</code>和<code>eat</code>。方法调用的格式为：</p><blockquote><p>[对象] + 点号 + [方法名] + [参数]</p></blockquote><pre class=" language-java"><code class="language-java">alice<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alice<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这两个方法都不需要传参数，可以直接调用。这样，我们就完成了创建对象并调用的全过程。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本篇文章到此就告一段落了，本篇内容相对较多一点，而且也是相当重要的一篇，希望能仔细阅读，能通过本篇的学习了解类和对象是什么，以及如何使用。</p><p>也许到这里你还有很多疑惑，但没有关系，在之后的学习和练习的过程中，相信你会慢慢理解的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础篇】三、Java 变量</title>
      <link href="/2020/05/04/java/basic/java-variable/"/>
      <url>/2020/05/04/java/basic/java-variable/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>“The superior man makes the difficulty to be overcome his first interest; success comes only later.”</strong></p><p>— William Jennings Bryan</p><p><strong>「优秀的人将克服困难当做第一优先，成功只是之后的附带品。」</strong>    – 威廉‧詹宁斯‧布莱恩 (政客)</p></blockquote><h2 id="关卡说明"><a href="#关卡说明" class="headerlink" title="关卡说明"></a>关卡说明</h2><p>关卡描述：变量是<em>Java</em>程序中最常见的内容，是设计<em>Java</em>程序必不可少的部分。</p><p>过关条件：理解什么是变量，为什么需要使用变量，以及如何使用它们</p><p>关卡难度：⭐️</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>什么是变量？为什么要有变量？怎么使用它？</p><p>如果你不能很好的回答这三个问题，那么就带着这些疑问来完成本次挑战吧，相信你必能有所收获。</p><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><p>在一个<em>Java</em>程序中，通常需要很多个步骤才能实现我们想要的功能，比如之前设计的计算器，就需要先提示用户输入，读取输入的值，然后再将它们相加后输出。我们日常生活中的事情也是类似的，拿吃饭而言，我们需要先把饭盛到碗里，然后再加点菜，再往嘴里塞。</p><p>这里的碗就相当于变量，我们用它来盛饭，也就是存放中间过程的一些处理结果，饭是我们从锅里盛出来的，是经过我们处理过的。</p><p>也许这样说还是有些抽象，我们继续看之前的栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请再输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这两个数的和为:"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在第三行，我们定义了一个变量<em>in</em>，用来存放<em>Scanner</em>实例引用，在第四行，我们定义了一个变量<em>a</em>，用来存放用户输入的第一个整数，第六行里我们又定义了一个变量<em>b</em>，用来接收用户输入的第二个整数，然后在第七行定义了一个变量<em>sum</em>，用来存放变量<em>a</em>和变量<em>b</em>的和。</p><p>虽然是一个简单的程序，但是我们已经使用了四个变量，可见其应用的广泛性和重要性。变量就如同程序的血液，是一个程序能顺利运转的不可或缺的部分。</p><h3 id="为什么需要变量"><a href="#为什么需要变量" class="headerlink" title="为什么需要变量"></a>为什么需要变量</h3><p>那么有没有可能不使用任何变量呢？其实也是可以的，比如这样：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我是一个最简单的程序，我不使用变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>但毕竟这样的需求只是极少的一部分，绝大部分的应用还是比较繁杂的，所以变量便不可避免的需要使用。</p><p>另外，使用变量还可以使得程序逻辑变得更加清晰，通过使用变量，将整个流程的步骤变得更加清晰明确。就好比说吃饭，不再是模糊的一个概念，而是分为盛饭，夹菜，吃饭这几个具体的步骤了。</p><h3 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h3><p>要想使用变量，就必须先定义一个变量，或者说声明一个变量。声明变量的格式为：</p><pre class=" language-java"><code class="language-java"><span class="token punctuation">[</span>类名<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>变量名<span class="token punctuation">]</span></code></pre><p>例如：<code>int a</code> 中 <code>int</code> 是变量的类型，<code>a</code> 是变量的名字。</p><p>可以在声明变量的同时给它赋一个初始值，也可以在之后改变变量的值。声明变量之后，必须使用赋值语句对变量显式初始化，千万不要使用未初始化的变量，否则会被编译器视为错误的代码。</p><p>想要对一个变量进行赋值，就需要将变量放在<code>=</code> 左边，然后将<em>Java</em>表达式放在等号的右边。</p><p>举个小栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变量a的值为："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变量a的值为："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变量a的值为："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变量b的值为："</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> a<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"变量b的值为："</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么程序将会输出：</p><pre class=" language-java"><code class="language-java">变量a的值为：<span class="token number">1</span>变量a的值为：<span class="token number">2</span>变量a的值为：<span class="token number">3</span>变量b的值为：<span class="token number">0</span>变量b的值为：<span class="token number">3</span></code></pre><p>补充说明一下，<code>System.out.println</code> 与 <code>System.out.print</code> 的区别是，前者会在内容输出完成之后添加一个换行。</p><h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><p>变量名必须以字母开头，并且由字母、数字或者下划线和$构成，对于长度理论上来说是没有限制的，此外，<em>Java</em>中的保留字是不能用作变量名的，保留字也就是<em>Java</em>中的关键字，比如之前的 <code>public</code>、<code>static</code>、<code>int</code>、<code>void</code>等等，在后续的学习中，会不断接触到各种关键字。</p><p>变量命名最好符合它使用的意义，能表现其作用，因为往往在一个程序中会出现非常多的变量，如果变量命名都像<code>a1</code>、<code>a2</code>、<code>a3</code>这样看了让人摸不着头脑的形式，那么将使得代码的阅读和维护变得十分困难。永远不要忘记，代码是用来阅读的。</p><p>在<em>Java</em>中，变量的命名通常使用小驼峰命名法，也就是第一个单词的首字母小写，其余单词的首字母大写，比如：<code>totalDays</code>、<code>paperWidth</code>。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，关于变量的介绍就结束了，变量是Java中最重要也是最基础的组成部分，希望你能很好的理解和掌握它。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础篇】二、Java 程序基本结构</title>
      <link href="/2020/05/04/java/basic/java-simple-structure/"/>
      <url>/2020/05/04/java/basic/java-simple-structure/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“No matter how small and unimportant what we are doing may seem, if we do it well, it may soon become the step that will lead us to better things.”                — Channing Pollock, Writer</p><p>「不管我们现在所做的事看起来有么的微不足道或不重要，如果我们认真的做，它可能很快就会成为通往美好事物的踏石阶。」                                – 詹宁‧布鲁克 (作家)</p></blockquote><h2 id="关卡说明"><a href="#关卡说明" class="headerlink" title="关卡说明"></a>关卡说明</h2><p>关卡描述：<code>Java</code> 程序具有一些固定的形式，本篇将来对此进行简单的说明介绍。</p><p>过关条件：理解 <code>Java</code> 程序的基本组成结构</p><p>关卡难度：⭐️</p><h2 id="一个简单的程序"><a href="#一个简单的程序" class="headerlink" title="一个简单的程序"></a>一个简单的程序</h2><p>为了简单起见，本篇以及之后的很多篇里，都会设计很多“玩具”代码，与实际中 <code>Java</code> 的设计可能相去甚远，本系列中的代示例都是为了说明一些相关概念，让你能够更好的理解 <code>Java</code> 的相关特性。</p><p>下面再来看看上一篇中的栗子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hello<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCalculator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请再输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这两个数的和为:"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这是一个非常简单的能够运行的<em>Java</em>程序，它有一些基本的结构，下面将对其一一介绍。</p><p>前面两句的作用已经在<a href="../introduction/java-package.md">上一篇</a>中进行说明了，这里就不赘述了。接下来是类的定义：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCalculator</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这里是定义了一个叫做<em>SimpleCalculator</em>的类，<code>public</code> 称为<em>访问修饰符</em>，用于控制代码的访问级别，关于这部分的内容，会在之后的章节中进行详细的介绍。在这里，<code>public</code> 表示这个类的访问权限为任何外部类均可以访问。<code>class</code> 是定义一个类的关键字，它的后面是类。关于类的命名规范在之后也会有详细说明。不要忘了后面还有一对大括号，表示类的内部内容。</p><p>需要注意的是，<strong>Java是区分大小写的</strong>，如果出现了大小写拼写错误，程序是无法正确运行的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>在类的内部定义了一个<em>main</em>方法，为什么说它是一个方法而不是类呢？因为它位于一个类的内部，并且没有用<em>class</em>关键字修饰，而且符合方法的定义规范。<code>public</code>同样可以修饰方法，表示这个方法对于外部类是公开的，可以访问的，<code>static</code>表示这是一个静态方法（先不要纠结什么是静态方法），<code>void</code>表示这个方法的返回值类型，<code>main</code>为方法名，后面跟上一对小括号，里面是参数列表，这里为<code>String[] args</code>，表示它接受一个<em>String</em>数组作为参数，<code>args</code>为参数名。</p><p>也许上面还有许多概念你还不清楚是什么意思，不要着急，先不要纠结于这些细节，先从整体上把握，继续看下去，后面的文章中会有说明。</p><p>需要注意的是，<code>main</code>方法是<em>Java</em>程序中一个十分特殊的方法，它是整个程序的入口，也就是说，程序会从<code>main</code>方法开始执行，因此，如果想要代码能够执行，在类的源文件中必须包含一个<code>main</code>方法。</p><p>方法中的方法体则是我们为了实现功能而设计的自定义代码，在<em>Java</em>中，每个句子必须用分号结束。</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请再输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这两个数的和为:"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><em>Java</em>中，点号是用来调用方法或者使用对象的，如：<code>System.out.print(...)</code>表示使用<code>System.out</code>对象并调用它的<code>print</code>方法。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>至此，本篇的<em>Java</em>的基本结构就介绍完毕了，希望通过本篇，你能知道一个简单<em>Java</em>程序的结构是怎样的以及<em>main</em>方法有什么作用。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础篇】一、Java package与import</title>
      <link href="/2020/05/04/java/basic/java-package/"/>
      <url>/2020/05/04/java/basic/java-package/</url>
      
        <content type="html"><![CDATA[<blockquote><p>共道人间惆怅事，不知今夕是何年。  – 《周秦行纪》</p></blockquote><h2 id="关卡说明"><a href="#关卡说明" class="headerlink" title="关卡说明"></a>关卡说明</h2><p>关卡描述：不知你是否还记得上一篇中的代码，前面的两行，这是在 <code>Java</code> 中特定的格式，想要知道它们是什么含义吗？通过本关你就能获得答案。</p><p>过关条件：理解 <code>Java</code> 中 <code>package</code> 与 <code>import</code> 的作用以及如何使用它们</p><p>关卡难度：⭐️</p><h2 id="什么是-package"><a href="#什么是-package" class="headerlink" title="什么是 package"></a>什么是 package</h2><p>现在再来回顾一下我们上一篇中的代码，首先我们创建了一个类，叫做 <code>SimpleCalculator</code> ，文件名叫做 <code>SimpleCalculator.java</code>。</p><p>在最开头有这么一行：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hello<span class="token punctuation">;</span></code></pre><p>第一行会声明这个类所在的包名，因为这个类文件是在 <code>hello</code> 包下的，所以第一行的含义就是表明这个类的位置。</p><h2 id="为什么要使用package"><a href="#为什么要使用package" class="headerlink" title="为什么要使用package"></a>为什么要使用package</h2><p>聪明的你也许会想到，同一个包下面应该不允许存在两个相同的文件名，也就是不允许存在相同的类名。确实如此，这也是 <code>package</code> 的一个很重要的作用，为类提供一个类似命名空间的管理，避免同名的类产生冲突。</p><p>试想一下，如果没有 <code>package</code> ，所有类都在同一个地方，那就要争先恐后的使用类名了，后来者可能就要为取名想破脑袋，就像注册游戏名时经常感慨好名字都被🐷拱了那样。</p><p><code>package</code> 的另一个作用便是用来将 <code>Java</code> 文件进行分类管理，比如有同一种用处的类放到同一个包下，方便查找和管理。</p><h2 id="package命名规范"><a href="#package命名规范" class="headerlink" title="package命名规范"></a>package命名规范</h2><p>虽然理论上来说，你可以随心所欲、为所欲为的命名你项目中的包，但还是建议你遵循一定的规范，因为如果大家都遵循规范来设计的话，会减少很多交流成本。</p><p><code>package</code> 的命名一般分为几个部分，<code>身份标识.开发者名/团队名/公司名.项目名.模块名</code>，对于身份标识，主要是用来标识是个人开发还是团队开发，个人开发主要使用的标识有：<em>indi</em>（个体项目）、<em>onem</em>（单人项目）、<em>pers</em>（个人项目）、<em>priv</em>（私有项目），团队开发主要使用的标识有：<em>team</em>（团队项目）、<em>com</em>（公司项目）。</p><p>但其实没有特殊要求的话，使用域名倒写是最常见的，因为域名是不会重复的。</p><p>所以比较常见的命名类似于：<em>com.frank.hello.controller<em>，</em>frank<em>是我的英文名，（假装）</em>frank.com<em>是我的域名，</em>hello</em> 是项目名，<em>controller</em> 则代表这个包都用途，表明在下面我会放控制器（先不用纠结控制器是什么）。</p><p>所以，如果还没有英文名的话，赶紧给自己找一个吧。你也许会问，如果有人用了跟自己一样的英文名怎么办？</p><p>没有关系，反正极大概率上来说，你又不会使用他的包，即使真遇上了，还是有解决办法的，改改项目名，改改包名，就ok了。</p><h2 id="使用package的注意事项"><a href="#使用package的注意事项" class="headerlink" title="使用package的注意事项"></a>使用package的注意事项</h2><ol><li><code>package</code> 必须是程序中可执行的第一行代码</li><li><code>package</code> 语句只能有一句，且语句后面有分号</li><li><code>package</code> 命名要求包含的所有字符均为小写，同时不能有特殊字符</li><li><code>package</code> 可以有多层，每一层有<code>.</code>隔开，例如：<code>package com.frank.hello;</code>（com是一个文件夹，<em>frank</em> 是 <em>com</em> 下的一个文件夹，<em>hello</em> 是 <em>frank</em> 文件夹下的一个文件夹）</li><li>包的路径符合所开发的系统模块的定义</li><li>如果定义类的时候没有使用 <em>package*，那么 *java</em> 就认为我们所定义的类位于默认包里面(java.lang)。</li></ol><h2 id="import的作用"><a href="#import的作用" class="headerlink" title="import的作用"></a>import的作用</h2><p>在之前的 <code>SimpleCalculator</code> 类中，我们还看到了这么一句代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span></code></pre><p>那么 <code>import</code> 又是做什么用的呢？</p><p><code>import</code> 是在 <em>java</em> 文件开头的地方，先说明会用到那些类所在的全路径名，这样我们就能在代码中使用对应的类名，而不是使用全路径。</p><p>开发中需要引用到其他包下的类，比如 <em>JDK</em> 中一些常用的类，那么就需要先使用 <em>import</em> 告诉编译器我们要引用的类的位置，比如说这里的 <em>Scanner</em> 。那么你也许会注意到，代码中不是有 <code>System</code> 吗，是怎么回事呢？为什么不用引入 <code>System</code> 所在的包呢？</p><p>这是一个很好的问题。原因是 <em>java.lang</em> 这个包实在是太常用了，所以默认可以不用写，编译器会自动引入，编译器只要看到没有使用 <code>import</code> 引入包名的类，就会去 <em>java.lang</em> 中找。</p><p>那如果要引入一个包下所有类该怎么办呢？</p><p>有时候需要用到的类刚好有有多在同一个包下面，一个一个引入，显然太费事，别着急，还有更好的解决办法，可以使用<code>*</code>来匹配所有，比如说：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*</code></pre><p>那么就会引入<code>java.util</code>包下的所有类。</p><p>也许你会觉得，那都使用<code>*</code>的方式不就好了。如果这样想，那就大错特错了，包的存在就是为了减少类名冲突，这样每次都使用<code>*</code>将大量类引入的话，会更容易产生类名冲突，那就适得其反了。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>本篇讲解了 <code>package</code> 和 <code>import</code> 的用途，希望通过本篇，你能知道代码中前面的那些代码有什么作用，也能在之后的代码编写中知道如何去正确使用它们。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java基础篇】启航</title>
      <link href="/2020/05/04/java/basic/java-basic/"/>
      <url>/2020/05/04/java/basic/java-basic/</url>
      
        <content type="html"><![CDATA[<blockquote><p>无论最终的结果是什么，只要这是自己选择的道路。 – 《龙与虎》</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>Java开发入门篇</strong>十分简单，相信聪明的你已经完成了新手村的任务，顺利打败了小Boss，开启这一新的篇章。​</p><p>本篇是<strong>Java基础篇</strong>，主要内容是介绍 <code>Java</code> 开发中的<em>基础概念</em>和<em>基本知识</em>，包括 <code>Java</code> 程序的基本组成，<code>Java</code> 中的<code>类</code>与<code>对象</code>、<code>数据类型</code>、<code>变量</code>与<code>常量</code>、<code>运算符</code>、<code>控制流程</code>、<code>接口</code>、<code>封装</code>、<code>继承</code>与<code>多态</code>等等。这些基本要素是组成 <code>Java</code> 程序必不可少的部分，要想对 <code>Java</code> 有一个全面的认识，那么就必须认真掌握好这些基本知识。</p><p>就像学习高深莫测的武林秘籍之前必须要先学会一些基本的内功心法和基础招式那样，本篇的重要性不言自明，只有打好基础，才能在更高深的技能上有所突破。</p><p>为了不让这个过程太过枯燥，本篇将继续完善上一篇中的计算器，以它为基础进行分析，并随着学习的深入，让它的功能变得越来越强大。当然，除了这个计算器之外，还会有很多小栗子伴随其中，以加深大家对这个部分的理解。</p><p>之后的每一篇开头，都会引用一句话来作为鼓励，希望它能成为激励你继续前进的精神力量。</p><p>那么，年轻的勇士，继续你的征程吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】使用Hexo+github pages+travis ci搭建好看的个人博客（二）</title>
      <link href="/2020/05/03/hexo/hexo-config/"/>
      <url>/2020/05/03/hexo/hexo-config/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>上一篇里，介绍了使用 <code>Hexo</code> + <code>github pages</code> + <code>travis ci</code> 实现自动化博客部署，我们已经收获了一个属于自己的博客，但现在还比较简陋，里面的设置信息都是默认的数据，所以我们需要把它们改成我们想要的内容。</p><p>所以这一篇里，主要介绍 <code>Hexo</code> 的配置文件如何设置。通过本篇的学习，你将知道 <code>Hexo</code> 配置文件的各个属性是什么意思，并给出我使用的配置，这样你就能随心所欲的进行配置了。</p><h2 id="站点信息"><a href="#站点信息" class="headerlink" title="站点信息"></a>站点信息</h2><p>先来看第一部分，站点信息的配置。先说明一下各个字段的含义：</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述，主要用于 SEO，告诉搜索引擎关于站点的简要信息</td></tr><tr><td>keywords</td><td>网站的关键词。使用半角逗号, 分隔多个关键词。</td></tr><tr><td>author</td><td>你的名字</td></tr><tr><td>language</td><td>网站使用的语言，常见的有 zh-Hans 、zh-CN 、 en</td></tr><tr><td>timezone</td><td>网站时区。默认使用本地时区。也可以指定其它时区，如 America/New_York, Japan, 和 UTC 。一般的，对于中国大陆地区可以使用 Asia/Shanghai。</td></tr></tbody></table><p>下面是我的配置，可以作为参考：</p><pre class=" language-yml"><code class="language-yml"># Sitetitle: FunHubsubtitle: 'We Always Having Fun ！！！'description: '铭记过去，拥抱未来，心中有梦，眼里有光'keywords: 生活,编程,阅读,音乐,电影author: FunHublanguage: zh-CNtimezone: ''</code></pre><h2 id="网址信息"><a href="#网址信息" class="headerlink" title="网址信息"></a>网址信息</h2><p>网址信息配置主要是设置网站的地址和文章链接格式。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>url</td><td>网址</td><td></td></tr><tr><td>root</td><td>网站根目录</td><td></td></tr><tr><td>permalink</td><td>文章的永久链接</td><td>格式    :year/:month/:day/:title/</td></tr><tr><td>permalink_defaults</td><td>永久链接中各部分的默认值</td><td></td></tr><tr><td>pretty_urls</td><td>改写 permalink 的值来美化 URL</td><td></td></tr><tr><td>pretty_urls.trailing_index</td><td>是否在永久链接中保留尾部的 index.html，设置为 false 时去除</td><td>true</td></tr><tr><td>pretty_urls.trailing_html</td><td>是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效)</td><td>true</td></tr></tbody></table><p>例如：</p><pre class=" language-yml"><code class="language-yml"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.htmlpretty_urls:  trailing_index: false# 此时页面的永久链接会变为 http://example.com/foo/bar/</code></pre><p>这里通常只需要修改 <code>url</code> 和 <code>root</code>，如果博客是使用 <code>github pages</code> 进行部署的，<code>url</code> 配置成对应的博客地址即可。这里需要注意的是 <code>root</code> 的值，如果是按照我们上一篇中的方式进行部署的，则需要把 <code>root</code> 的值设置为 <code>/项目名/</code>。</p><p>下面是我的配置：</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://mfrank2016.github.io/root: /permalink: :year/:month/:day/:title/permalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks</code></pre><h2 id="目录信息"><a href="#目录信息" class="headerlink" title="目录信息"></a>目录信息</h2><p>目录信息是指定各类目录对应的位置，通常不需要修改。</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>source_dir</td><td>资源文件夹，这个文件夹用来存放博客 <code>md</code> 等文件。</td><td>source</td></tr><tr><td>public_dir</td><td>公共文件夹，这个文件夹用于存放生成的站点静态文件。</td><td>public</td></tr><tr><td>tag_dir</td><td>标签文件夹</td><td>tags</td></tr><tr><td>archive_dir</td><td>归档文件夹</td><td>archives</td></tr><tr><td>category_dir</td><td>分类文件夹</td><td>categories</td></tr><tr><td>code_dir</td><td><code>Include code</code> 文件夹，<code>source_dir</code> 下的子目录</td><td>downloads/code</td></tr><tr><td>i18n_dir</td><td>国际化（i18n）文件夹</td><td>:lang</td></tr><tr><td>skip_render</td><td>跳过指定文件的渲染。匹配到的文件将会被不做改动地复制到 <code>public</code> 目录中。您可使用 <code>glob</code> 表达式来匹配路径。</td><td></td></tr></tbody></table><p>例如：</p><pre class=" language-yml"><code class="language-yml">skip_render: "mypage/**/*"# 将会直接将 `source/mypage/index.html` 和 `source/mypage/code.js` 不做改动地输出到 'public' 目录# 你也可以用这种方法来跳过对指定文章文件的渲染skip_render: "_posts/test-post.md"# 这将会忽略对 'test-post.md' 的渲染</code></pre><p>我的配置如下：</p><pre class=" language-yml"><code class="language-yml"># Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:</code></pre><h2 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h2><p>这一部分是配置与文章相关的各类属性。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>new_post_name</code></td><td align="left">新文章的文件名称</td><td align="left">:title.md</td></tr><tr><td align="left"><code>default_layout</code></td><td align="left">预设布局</td><td align="left">post</td></tr><tr><td align="left"><code>auto_spacing</code></td><td align="left">在中文和英文之间加入空格</td><td align="left">false</td></tr><tr><td align="left"><code>titlecase</code></td><td align="left">把标题转换为 <code>title case</code></td><td align="left">false</td></tr><tr><td align="left"><code>external_link</code></td><td align="left">在新标签中打开链接</td><td align="left">true</td></tr><tr><td align="left"><code>external_link.enable</code></td><td align="left">在新标签中打开链接</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>external_link.field</code></td><td align="left">对整个网站（<code>site</code>）生效或仅对文章（<code>post</code>）生效</td><td align="left"><code>site</code></td></tr><tr><td align="left"><code>external_link.exclude</code></td><td align="left">需要排除的域名。主域名和子域名如 <code>www</code> 需分别配置</td><td align="left"><code>[]</code></td></tr><tr><td align="left"><code>filename_case</code></td><td align="left">把文件名称转换为 (1) 小写或 (2) 大写</td><td align="left">0</td></tr><tr><td align="left"><code>render_drafts</code></td><td align="left">显示草稿</td><td align="left">false</td></tr><tr><td align="left"><code>post_asset_folder</code></td><td align="left">启动 <code>Asset</code> 文件夹</td><td align="left">false</td></tr><tr><td align="left"><code>relative_link</code></td><td align="left">把链接改为与根目录的相对位址</td><td align="left">false</td></tr><tr><td align="left"><code>future</code></td><td align="left">显示未来的文章</td><td align="left">true</td></tr><tr><td align="left"><code>highlight</code></td><td align="left">代码块的设置</td><td align="left"></td></tr><tr><td align="left"><code>highlight.enable</code></td><td align="left">开启代码块高亮</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>highlight.auto_detect</code></td><td align="left">如果未指定语言，则启用自动检测</td><td align="left"><code>false</code></td></tr><tr><td align="left"><code>highlight.line_number</code></td><td align="left">显示行数</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>highlight.tab_replace</code></td><td align="left">用 n 个空格替换 <code>tabs</code>；如果值为空，则不会替换 <code>tabs</code></td><td align="left"><code>''</code></td></tr><tr><td align="left"><code>highlight.wrap</code></td><td align="left">把代码块用 `` 包裹</td><td align="left"><code>true</code></td></tr><tr><td align="left"><code>highlight.hljs</code></td><td align="left">为 highlight 的 css 文件中的类添加 <code>hljs-*</code> 前缀</td><td align="left"><code>false</code></td></tr></tbody></table><p><code>auto_spacing</code> 建议开启，这样的话看起来更美观，<code>titlecase</code> 是指关键单词首字母大写，如果不太清楚，可以看下面的说明：</p><blockquote><p>Titles should be written in title case. This means only using capital letters for the principal words. Articles, conjunctions, and prepositions do not get capital letters unless they start the title. For example:<br>The Last of the Mohicans </p></blockquote><p><code>post_asset_folder</code> 建议开启，这样会在生成新的文章时，同时会同一目录下生成同名文件夹，这样可以把该文章相关的图片等资源放进去，方便引用和管理。</p><p>下面是我的配置：</p><pre class=" language-yml"><code class="language-yml">new_post_name: :title.md # File name of new postsdefault_layout: postauto_spacing: truetitlecase: false # Transform title into titlecaseexternal_link:  enable: true # Open external links in new tab  field: post # Apply to the whole site  exclude: ''filename_case: 0render_drafts: falsepost_asset_folder: truerelative_link: falsefuture: true# highlight:#   enable: true#   line_number: true#   auto_detect: false#   tab_replace: ''#   wrap: true#   hljs: falsehighlight:  enable: false# 代码高亮prism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><p>这里我使用了另一个代码高亮插件，如果通常使用默认的 <code>hljs</code> 高亮即可。如果也想要使用这个插件，可以查看<a href="https://github.com/ele828/hexo-prism-plugin" target="_blank" rel="noopener">这里</a>，需要先进行安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> i -S hexo-prism-plugin</code></pre><h2 id="分类和标签信息"><a href="#分类和标签信息" class="headerlink" title="分类和标签信息"></a>分类和标签信息</h2><p>这里配置的是别名，即映射信息，如果文章使用的是英文名分类，这里可以不用设置，如果使用了中文名分类，最好配置一些对应的英文名，否则在对应的分类链接中就会出现 <code>URL</code> 编码的中文，比如这样：</p><pre><code>http://localhost:4000/categories/programming/life/%E6%B5%8B%E8%AF%95/</code></pre><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>default_category</code></td><td align="left">默认分类</td><td align="left"><code>uncategorized</code></td></tr><tr><td align="left"><code>category_map</code></td><td align="left">分类别名</td><td align="left"></td></tr><tr><td align="left"><code>tag_map</code></td><td align="left">标签别名</td><td align="left"></td></tr></tbody></table><p>我的配置如下：</p><pre class=" language-yml"><code class="language-yml"># Category & Tagdefault_category: uncategorizedcategory_map:  编程: programming  生活: life  阅读: reading  随想: thoughts  理财: financetag_map:  敏捷开发: agile-development  环境搭建: environment-building</code></pre><h2 id="日期-时间格式"><a href="#日期-时间格式" class="headerlink" title="日期 / 时间格式"></a>日期 / 时间格式</h2><p><code>Hexo</code> 使用 <a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>date_format</code></td><td align="left">日期格式</td><td align="left"><code>YYYY-MM-DD</code></td></tr><tr><td align="left"><code>time_format</code></td><td align="left">时间格式</td><td align="left"><code>HH:mm:ss</code></td></tr><tr><td align="left"><code>use_date_for_updated</code></td><td align="left">启用以后，如果 Front Matter 中没有指定 <code>updated</code>， <code>post.updated</code> 将会使用 <code>date</code> 的值而不是文件的创建时间。在 Git 工作流中这个选项会很有用</td><td align="left"><code>true</code></td></tr></tbody></table><p>我的配置如下：</p><pre class=" language-yml"><code class="language-yml"># Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss## Use post's date for updated date unless set in front-matteruse_date_for_updated: true</code></pre><h2 id="分页信息"><a href="#分页信息" class="headerlink" title="分页信息"></a>分页信息</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left"><code>per_page</code></td><td align="left">每页显示的文章量 (0 = 关闭分页功能)</td><td align="left"><code>10</code></td></tr><tr><td align="left"><code>pagination_dir</code></td><td align="left">分页目录</td><td align="left"><code>page</code></td></tr></tbody></table><p>我的配置如下：</p><pre class=" language-yml"><code class="language-yml"># Pagination## Set per_page to 0 to disable paginationper_page: 12pagination_dir: page</code></pre><h2 id="扩展信息"><a href="#扩展信息" class="headerlink" title="扩展信息"></a>扩展信息</h2><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>theme</code></td><td align="left">当前主题名称。值为<code>false</code>时禁用主题</td></tr><tr><td align="left"><code>theme_config</code></td><td align="left">主题的配置文件。在这里放置的配置会覆盖主题目录下的 <code>_config.yml</code> 中的配置</td></tr><tr><td align="left"><code>deploy</code></td><td align="left">部署部分的设置</td></tr><tr><td align="left"><code>meta_generator</code></td><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta#属性" target="_blank" rel="noopener">Meta generator</a> 标签。 值为 <code>false</code> 时 Hexo 不会在头部插入该标签</td></tr></tbody></table><p>这里设置 <code>theme</code> 即可开启对应的主题，具体如何设置会在后面的文章进行详细说明。</p><p><code>theme_config</code> 可以在这里配置主题文件里的各个参数进行覆盖，这样就不用维护两份 <code>config</code> 文件了，不过个人觉得还是不同主题文件使用不同配置文件比较好。</p><p><code>deploy</code> 是部署相关的配置，比如 <code>git</code> 部署，除此之外，还有很多其它部署姿势，比如：<code>Heroku</code>、<code>Netlify</code> 等，但都需要先安装对应的插件。</p><p>我的配置如下：</p><pre class=" language-yml"><code class="language-yml"># Extensionstheme: hexo-theme-matery# Deploymentdeploy:  type: 'git'  repo: git@github.com:MFrank2016/breeze-blog  branch: gh-pages</code></pre><h2 id="包括或不包括目录和文件"><a href="#包括或不包括目录和文件" class="headerlink" title="包括或不包括目录和文件"></a>包括或不包括目录和文件</h2><p>在 <code>Hexo</code> 配置文件中，通过设置 <code>include/exclude</code> 可以让 <code>Hexo</code> 进行处理或忽略某些目录和文件夹。可以使用 <a href="https://github.com/isaacs/minimatch" target="_blank" rel="noopener">glob 表达式</a> 对目录和文件进行匹配。</p><p><code>include</code> 和 <code>exclude</code> 选项都只能应用于 <code>source/</code> 文件夹, 但 <code>ignore</code> 选项可以应用于所有文件夹。</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>include</code></td><td align="left"><code>Hexo</code> 默认会忽略隐藏文件和文件夹（包括名称以下划线和 <code>.</code> 开头的文件和文件夹，<code>Hexo</code> 的 <code>_posts</code> 和 <code>_data</code> 等目录除外）。通过设置此字段将使 Hexo 处理他们并将它们复制到 <code>source</code> 目录下。</td></tr><tr><td align="left"><code>exclude</code></td><td align="left"><code>Hexo</code> 会忽略这些文件和目录</td></tr><tr><td align="left"><code>ignore</code></td><td align="left">忽略文件或文件夹</td></tr></tbody></table><p>举例：</p><pre class=" language-yml"><code class="language-yml"># Include/Exclude Files/Foldersinclude:  - ".nojekyll"  # 包括 'source/css/_typing.css'  - "css/_typing.css"  # 包括 'source/_css/' 中的任何文件，但不包括子目录及其其中的文件。  - "_css/*"  # 包含 'source/_css/' 中的任何文件和子目录下的任何文件  - "_css/**/*"exclude:  # 不包括 'source/js/test.js'  - "js/test.js"  # 不包括 'source/js/' 中的文件、但包括子目录下的所有目录和文件  - "js/*"  # 不包括 'source/js/' 中的文件和子目录下的任何文件  - "js/**/*"  # 不包括 'source/js/' 目录下的所有文件名以 'test' 开头的文件，但包括其它文件和子目录下的单文件  - "js/test*"  # 不包括 'source/js/' 及其子目录中任何以 'test' 开头的文件  - "js/**/test*"  # 不要用 exclude 来忽略 'source/_posts/' 中的文件。你应该使用 'skip_render'，或者在要忽略的文件的文件名之前加一个下划线 '_'  # 在这里配置一个 - "_posts/hello-world.md" 是没有用的。ignore:  # Ignore any folder named 'foo'.  - "**/foo"  # Ignore 'foo' folder in 'themes/' only.  - "**/themes/*/foo"  # Same as above, but applies to every subfolders of 'themes/'.  - "**/themes/**/foo"</code></pre><p>列表中的每一项都必须用单引号或双引号包裹起来。</p><p><code>include</code> 和 <code>exclude</code> 并不适用于 <code>themes/</code> 目录下的文件。如果需要忽略 <code>themes/</code> 目录下的部分文件或文件夹，可以使用 <code>ignore</code> 或在文件名之前添加下划线 <code>_</code>。</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hexo】使用Hexo+github pages+travis ci搭建好看的个人博客（一）</title>
      <link href="/2020/05/02/hexo/hexo-start/"/>
      <url>/2020/05/02/hexo/hexo-start/</url>
      
        <content type="html"><![CDATA[<h2 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h2><p>本系列文章将会详细说明使用 <code>Hexo</code> + <code>github pages</code> 来搭建个人博客，并对主题进行配置，然后使用 <code>travis ci</code> 来进行自动化部署的全过程。</p><p>搭建一个赏心悦目的博客，写文章和阅读也会更加舒适，一次搭建，终生使用，而且还全程免费，何乐而不为呢。</p><p>通过本系列文章的学习，你将收获一个免费且漂亮的个人博客，并熟悉搭建、写作、部署的全流程以及其中一些很好用的工具。</p><h2 id="二、成品展示"><a href="#二、成品展示" class="headerlink" title="二、成品展示"></a>二、成品展示</h2><p><a href="https://mfrank2016.github.io/">在线 Demo</a></p><p><img src="https://i.loli.net/2020/05/02/j6fIGtNmqB9Vlgi.jpg" alt="hexo-1.jpg"><br><img src="https://i.loli.net/2020/05/02/Eko6AGPpxIfrUMX.jpg" alt="hexo-2.jpg"><br><img src="https://i.loli.net/2020/05/02/g8FYkmlAK7dX2qc.jpg" alt="hexo-3.jpg"><br><img src="https://i.loli.net/2020/05/02/pcWruwXdm3aO7VZ.jpg" alt="hexo-4.jpg"><br><img src="https://i.loli.net/2020/05/02/OCNwnEh3SdvBUe4.jpg" alt="hexo-5.jpg"></p><p>这只是其中的一个主题，如果不喜欢，也可以很方便的切换其它主题。</p><p><code>hexo</code> 主题相当丰富，可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">这里</a>选择喜欢的主题进行切换即可。</p><h2 id="三、前期准备"><a href="#三、前期准备" class="headerlink" title="三、前期准备"></a>三、前期准备</h2><p>在开始搭建之前，需要准备以下几样东西：</p><ul><li>本地安装 <code>node.js</code></li><li>本地安装 <code>git</code></li><li>一个 <code>github</code> 账号</li><li>创建一个 <code>github</code> 仓库</li><li>一个 <code>travis ci</code> 账号</li></ul><p>已经有过安装经验的同学，可以根据自己情况选择性的跳过部分章节。</p><h3 id="本地安装-node-js"><a href="#本地安装-node-js" class="headerlink" title="本地安装 node.js"></a>本地安装 node.js</h3><p><code>windows</code> 系统可以在<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">这里</a>下载 <code>installer</code> 安装包进行安装。</p><p><code>mac</code> 系统可以在<a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">这里</a>下载 <code>pkg</code> 安装包，也可以使用 <code>homebrew</code> 进行安装：</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> node</code></pre><p>然后在命令行输入以下命令来验证是否正确安装:</p><pre class=" language-bash"><code class="language-bash">node -v</code></pre><h3 id="本地安装-git"><a href="#本地安装-git" class="headerlink" title="本地安装 git"></a>本地安装 git</h3><p><code>windows</code> 系统可以从<a href="https://gitforwindows.org/" target="_blank" rel="noopener">这里</a>下载安装包后进行安装。</p><p><code>mac</code> 系统可以从<a href="https://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">这里</a>下载安装包进行安装。</p><p>也可以使用 <code>homebrew</code> 进行安装：</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span></code></pre><p>输入以下命令来查看是否正确安装好了 <code>git</code> ：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> --version</code></pre><p>然后设置自己的用户名和邮箱：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"你的用户名"</span><span class="token function">git</span> config --global user.email <span class="token string">"你的公司或个人邮箱"</span></code></pre><h3 id="github-账号"><a href="#github-账号" class="headerlink" title="github 账号"></a>github 账号</h3><p>首先，需要注册一个 <code>github</code> 账号，<a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">点击这里</a>。</p><p>填写好用户名和密码，验证完成后，便可以将一个 <code>github</code> 账号收入囊中。</p><p>创建好账号之后，我们还需要把我们本地的 <code>SSH Key</code> 添加到 <code>github</code> 中去，这样我们之后才能有权限将本地代码推送到 <code>github</code> 中。</p><p>先本地生成一对 <code>RSA</code> 密钥：</p><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -b 4096 -C <span class="token string">"你的邮箱"</span></code></pre><p>然后用食指敲击你的回车键三次，记住，要用食指，但别问为什么。</p><p>找到你刚才创建的密钥，<code>windows</code> 用户可以在 <code>C://用户//admin//.ssh</code> 目录下查找，mac 用户可以在 <code>~/.ssh</code> 目录下找到。复制 <code>id_rsa.pub</code> 文件里的信息，然后到<a href="https://github.com/settings/keys" target="_blank" rel="noopener">这里</a>添加新的 <code>SSHKEY</code> 。</p><p><img src="https://i.loli.net/2020/05/02/k3uVFawNbvL84eB.jpg" alt="hexo-10.jpg"></p><p><img src="https://i.loli.net/2020/05/02/ijrXcU1ZT96QqsP.jpg" alt="hexo-11.jpg"></p><p>把我们刚才的 <code>key</code> 复制进行后保存即可。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>点击<a href="https://github.com/new" target="_blank" rel="noopener">这里</a>，创建一个新的仓库。</p><p><img src="https://i.loli.net/2020/05/02/zoDx4HQrACMSYbI.png" alt="hexo-5.jpg"></p><p>仓库名称可以随便取，比如：<code>blog</code>、<code>my-blog</code>，随便取一个就好。仓库说明也可以随便写，可以大概描述一下你这个仓库是做什么的。可以参考一下<a href="https://github.com/MFrank2016/breeze-blog" target="_blank" rel="noopener">我的仓库</a></p><p>然后把仓库地址记下来，是下图中箭头标示的 <code>git</code> 开头的地址，后面需要用到。</p><p><img src="https://i.loli.net/2020/05/02/e36Vp8isyRfYvaw.jpg" alt="hexo-12.jpg"></p><p>创建好仓库之后，就可以进行下一步了。</p><h3 id="travis-ci-账号"><a href="#travis-ci-账号" class="headerlink" title="travis ci 账号"></a>travis ci 账号</h3><p><code>travis ci</code> 账号是跟 <code>github</code> 账号关联的，所以需要先创建好 <code>github</code> 账号，创建好之后，点击<a href="https://travis-ci.org/signin" target="_blank" rel="noopener">这里</a>进行账号关联登陆。</p><p>在设置里进行一次<a href="https://travis-ci.org/account/repositories" target="_blank" rel="noopener">账户同步</a>：</p><p><img src="https://i.loli.net/2020/05/02/Th5tdWvNYlXbz3D.jpg" alt="hexo-7.jpg"></p><p>同步完后刷新一下页面，刚才创建的仓库应该就会出现在这里：</p><p><img src="https://i.loli.net/2020/05/02/vznkDHh9frOMlIX.jpg" alt="hexo-8.jpg"></p><h2 id="四、安装-Hexo"><a href="#四、安装-Hexo" class="headerlink" title="四、安装 Hexo"></a>四、安装 Hexo</h2><p><code>hexo</code> 是一款静态网站生成工具，可以根据设置的主题样式和配置文件，来生成丰富多彩的网页，通常配置文件设置好之后不需要经常修改，我们只需要负责写好我们的博文，写好之后就能使用命令一键生成网站，而且还可以为所欲为的切换主题，可以说是写博客的一大利器。</p><p><code>hexo</code> 的安装其实很简单，只需要输入以下咒语：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>然后轻轻的敲击你的回车键，<code>hexo</code> 便能成功的安装在你的电脑中。</p><p>可以使用以下命令进行验证：</p><pre class=" language-bash"><code class="language-bash">hexo -v</code></pre><h2 id="五、使用-hexo-搭建博客"><a href="#五、使用-hexo-搭建博客" class="headerlink" title="五、使用 hexo 搭建博客"></a>五、使用 hexo 搭建博客</h2><p>选择一个准备放置博客网站的目录，然后使用以下命令来初始化一个项目：</p><pre class=" language-bash"><code class="language-bash">hexo init breeze-blog<span class="token function">cd</span> breeze-blog<span class="token function">npm</span> <span class="token function">install</span></code></pre><p>该命令将会在当前目录下，生成一个名为 <code>breeze-blog</code> 的新目录，当然，你可以把这个名字换成任何你想要的名字，并将 <code>hexo</code> 的初始化文件写入其中。</p><p>新建完成后，<code>breeze-blog</code> 文件夹的目录如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── _config.yml├── package.json├── node_modules├── scaffolds├── <span class="token function">source</span><span class="token operator">|</span>   ├── _drafts<span class="token operator">|</span>   └── _posts└── themes</code></pre><p><code>_config.yml</code> 是配置文件，里面有很多可以配置的数据，这里暂时不多介绍，后面的文章里会进行详细说明。</p><p><code>package.json</code> 是应用程序信息，通常不需要关心。</p><p><code>node_modules</code> 用来存放 <code>node</code> 相关的模块，通常不需要关心。</p><p><code>scaffolds</code> 里面是模版文件，也就是每次新建文章时，都会根据模版文件来创建对应的 <code>md</code> 文件，这一点也会在后续的文章里进行详细介绍。</p><p><code>source</code> 是资源文件夹，用来存放用户资源的地方。除 <code>_posts</code> 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。</p><p><code>theme</code> 是主题文件夹，每个主题的配置都会有些不一样，需要根据具体主题情况来定，后续介绍主题的文章里会有说明。</p><p>在 <code>breeze-blog</code> 目录下使用以下命令来运行我们的博客：</p><pre class=" language-bash"><code class="language-bash">hexo server</code></pre><p>在默认情况下，服务会使用 <code>4000</code> 端口，如果已经被占用，也可以添加 <code>-p</code> 参数来换用其它端口：</p><pre class=" language-bash"><code class="language-bash">hexo server -p 8080</code></pre><p>打开 <code>http://localhost:4000</code> 即可访问我们生成的网站了。</p><p><img src="https://i.loli.net/2020/05/02/ntX31VrhMTjFozQ.jpg" alt="hexo-9.jpg"></p><p>这样，我们的博客就搭建起来了。</p><h2 id="六、部署到-github-pages"><a href="#六、部署到-github-pages" class="headerlink" title="六、部署到 github pages"></a>六、部署到 github pages</h2><p><code>github pages</code> 可以理解为 <del>gayhub</del> <code>github</code> 提供的免费网页空间，可以用来存放你的静态网页文件，并通过 <code>https://用户名.github.io/项目名/</code> 的方式来访问，比如我新创建的 <code>blog</code> 地址就是：<code>https://mfrank2016.github.io/</code>。</p><p>利用 <code>github pages</code> 就能创建我们的免费博客站点了，至于为什么要使用免费站点，而不选择购买服务器来搭建，是因为根据之前使用服务器经常忘记续费，导致博客数据丢失，损失惨重。<code>github</code> 已经稳定运行了很多年，是全球最大的 <del>同性交友网站</del> 开发者网站，他们的服务值得信赖。而且是免费的。</p><p>我们之前已经注册好 <code>github</code> 的账号并创建好了对应的仓库，本地也安装好了 <code>git</code> ，现在让我们来把他们利用起来。（如果还没有完成的同学可以往上面翻翻，先完成前面的步骤）</p><blockquote><p>注意：有两种类型的 <code>github pages</code>，一种是使用 <code>用户名.github.io</code> 作为项目名，一种是使用其它名称。虽然看起来只是名字不一样，但两种方式其实是有差异的，前一种方式里，网页静态文件只能存放在 master 分支，所以如果想要把博客源文件也存到同一个仓库，必须使用其它分支来存放，相应的 travis ci 监听和推送的分支也需要修改，当然也可以使用另一个新的仓库来存放。后一种方式则没这个限制，通常使用名为 <code>gh-pages</code> 作为分支名，<code>Hexo</code> 内默认设置的分支也是叫这个名字。这里我们使用的是后一种方案，即源文件和生成的网页静态文件存放在同一个仓库，源文件在 <code>master</code> 分支，静态文件在 <code>gh-pages</code> 分支。</p></blockquote><p>首先，我们将本地的文件推送到 <code>github</code> 上。</p><p>在 <code>breeze-blog</code> 目录下，初始化 <code>git</code> 仓库，将现有文件添加到 <code>git</code> 仓库中，并创建 <code>gh-pages</code> 分支：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> breeze-blog<span class="token function">git</span> init<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -am<span class="token string">"init blog"</span><span class="token function">git</span> remote add origin 仓库地址</code></pre><p>仓库地址是前面我们创建仓库时说过的地址，比如我的地址是： <code>git@github.com:MFrank2016/breeze-blog.git</code> ，把它复制到这里来替换即可。</p><p>然后我们使用最后一句咒语，把代码推送到仓库中去。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push -u origin master</code></pre><p>如果你的仓库原来已经有数据了，可以添加 -f 参数来强制推送，但这样会使得你原来的数据丢失，所以慎用。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> push -f -u origin master</code></pre><p>然后创建一个新的本地分支 <code>gh-pages</code>，并关联远程分支：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout -b gh-pages<span class="token function">git</span> push -u origin gh-pages</code></pre><p>⚠️不要改用其它分支名。</p><p>然后在项目 <code>settings</code> 页面里开启 <code>github pages</code>：</p><p><img src="https://i.loli.net/2020/05/02/bQWKGwMsAVYk5hp.jpg" alt="hexo-13.jpg"></p><p><img src="https://i.loli.net/2020/05/02/HqpxGos7J9mLRkC.jpg" alt="hexo-14.jpg"></p><p>这里要选择 <code>gh-pages</code> 分支，不要选 <code>master</code> 分支。</p><p>然后我们修改一下 <code>hexo</code> 的配置文件(<code>_config.yml</code>)，找到对应的地方进行修改，指定我们的仓库信息，并修改 <code>root</code> 和 <code>url</code> 信息。</p><pre class=" language-bash"><code class="language-bash">url: https://mfrank2016.github.io/root: /deploy:  type: <span class="token string">'git'</span>  repo: git@github.com:MFrank2016/breeze-blog  branch: gh-pages</code></pre><p>把这里的 <code>repo</code> 地址修改为你的仓库地址即可。</p><p>安装 <code>hexo-deployer-git</code>：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> breeze-blog<span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>万事具备，发车！</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo generatehexo deploy</code></pre><p>运行完成后，我们的博客文件就顺利部署到 <code>github pages</code> 上了，现在我们打开下面网址来查看我们的博客效果：</p><pre class=" language-bash"><code class="language-bash">https://用户名.github.io/项目名/</code></pre><p>之后每次我们添加或修改完本地文件后，使用：</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g -d</code></pre><p>即可重新生成项目文件，并推送到 <code>github</code> 项目的 <code>gh-pages</code> 分支，为了备份数据，也方便我们在不同设备上进行编辑，最好将我们修改的文件推送到 <code>master</code> 分支进行保存：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> checkout master<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -am <span class="token string">"这里可以写一下修改的备注信息"</span><span class="token function">git</span> push</code></pre><h2 id="七、使用-travis-ci-进行自动化部署"><a href="#七、使用-travis-ci-进行自动化部署" class="headerlink" title="七、使用 travis ci 进行自动化部署"></a>七、使用 travis ci 进行自动化部署</h2><p>如果我们每次都按前面的方式进行操作，也会略显麻烦，使用 <code>travis ci</code> 后，可以将前面部署的步骤自动化，我们只需要将本地修改的文件推送到 <code>github</code> 仓库，就会触发 <code>travis ci</code> 的自动部署。</p><p><code>travis ci</code> 的配置也很简单，而且只需要配置一次，之后就不需要修改了。</p><p>首先，我们需要把<em>_config.yml</em>文件里的<em>repo</em>信息注释一下，不需要在配置文件里指定仓库地址，<code>travis ci</code> 会直接在其监听项目上进行部署。</p><pre class=" language-yml"><code class="language-yml">deploy:  type: 'git'#  repo: git@github.com:MFrank2016/breeze-blog  branch: gh-pages</code></pre><p>在本地博客目录下创建一个名为 <code>.travis.yml</code> 的文件，与 <code>_config.yml</code> 要在同级目录。</p><p>然后在文件中写入以下内容：</p><pre class=" language-yml"><code class="language-yml">sudo: falselanguage: node_jsnode_js:  - 12cache: npmbranches:  only:    - master # build master branch onlyscript:  - hexo generatedeploy:  provider: pages  skip-cleanup: true  github-token: $GH_TOKEN  keep-history: true  on:    branch: master  local-dir: public</code></pre><p>这里没有任何东西需要修改，直接复制粘贴即可。</p><p>接下来，需要在 <code>travis</code> 里配置一个环境变量，<code>GH_TOKEN</code> 。</p><p>前面我们已经将 <code>travis</code> 关联了 <code>github</code> 账号，并同步了项目，如果操作正确，<a href="https://travis-ci.org/dashboard" target="_blank" rel="noopener">这里</a>应该会出现我们的仓库信息。</p><p><img src="https://i.loli.net/2020/05/02/Xc2OGJvDNFbhYPs.jpg" alt="hexo-15.jpg"></p><p><img src="https://i.loli.net/2020/05/02/E7QyHTNMdjJWP26.jpg" alt="hexo-16.jpg"></p><p><img src="https://i.loli.net/2020/05/02/qjJkhAgErKL5tUR.jpg" alt="hexo-17.jpg"></p><p>这里的 <code>access token</code> 是指 <code>github token</code>，可以在<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">这里</a>获取：</p><p><img src="https://i.loli.net/2020/05/02/K35fhMCGLJ7xiUw.jpg" alt="hexo-18.jpg"></p><p><img src="https://i.loli.net/2020/05/02/7wNrX19YqGZKLOs.jpg" alt="hexo-19.jpg"></p><p>选好后，点击 <code>generate</code> 即可生成一个新的 <code>access token</code>，这个 <code>token</code> 即是用于权限验证的，好好保存，不要泄露，千万不要直接写到 <code>config</code> 文件里，而且之后是无法进行查看的，所以需要记录在一个安全的地方。</p><p>创建好之后，把这个 <code>token</code> 填写到前面的 <code>travis ci</code> 的项目环境变量中保存，这样一切就准备好了。</p><p>现在让我们在本地创建一篇新的博客，然后推送到远程仓库：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> breeze-blog<span class="token function">git</span> checkout masterhexo new <span class="token string">"my first blog"</span><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -am<span class="token string">"add a new blog"</span><span class="token function">git</span> push</code></pre><p>然后我们可以在 <code>travis ci</code> 中看到构建过程被触发了，等待一会即可完成部署，然后再打开我们的博客，查看一下我们新生成的文章是否已经在上面了。（浏览器有缓存，所以可能需要刷新几次才有效果）</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>整个过程看起来有些麻烦，距上次部署博客已经有很长时间了，我也是摸索了几次后才大致掌握，因为不想每次都重新来一遍，所以还是记录一下为好，利人利己。</p><p>写博客是一种生活态度，记录并整理生活和编程中的心得和经验并分享，在漫漫人生路上留下自己一路走来的印记，这样以后再回过头来看时，就不会感慨时间都去哪了。如果能因此遇到有共同兴趣爱好的人，那也将会是人生里的不错点缀。</p><p>这里只是完成了博客搭建和自动化部署的过程，关于博客的配置和主题的配置以及博客写作的一些技巧会在后面的文章中进行说明，敬请关注～</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Hexo </tag>
            
            <tag> github pages </tag>
            
            <tag> travis ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】小结</title>
      <link href="/2020/05/01/java/introduction/java-primer-conclusion/"/>
      <url>/2020/05/01/java/introduction/java-primer-conclusion/</url>
      
        <content type="html"><![CDATA[<blockquote><p>只要你在，我便无所不能。 – 《进击的巨人》</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，<code>Java</code> 入门篇就告一段落了，通过本篇的学习，希望你能掌握以下内容：</p><ol><li><code>Java</code> 有哪些用途</li><li>部署 <code>JDK</code></li><li>安装 <code>IDEA</code></li><li>使用 <code>IDEA</code> 创建一个类</li><li>使用 <code>IDEA</code> 开发一个简单的计算器</li></ol><p><code>Java入门篇</code>的内容很简单，目的也只是为了让零基础的人能够快速上手 <code>Java</code> 并开发一个可以运行的程序，降低学习的门槛，增加学习的乐趣。</p><p>如果你已经顺利完成了以上内容的学习，那么恭喜你，已经完成了新手的第一阶段试炼。后面的篇章就要真正开始 <code>Java</code> 中核心内容的介绍了，如果你学习的热情有幸还没有被浇灭，那么就拿着你的新手套装，在这场征程里继续前行吧。😆</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】六、Java简单示例</title>
      <link href="/2020/05/01/java/introduction/java-simple-example/"/>
      <url>/2020/05/01/java/introduction/java-simple-example/</url>
      
        <content type="html"><![CDATA[<blockquote><p>人都有两面，一面天使，一面恶魔</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为了统一风格，也为了增加趣味性，以后的文章都会以关卡的形式进行展示，这样也能让大家明确每一篇的目标，带着目的来阅读会更有方向感。</p><p>之前已经写过了 <code>Hello World</code>，所以这次就换一个吧，这次的小目标便是——<code>Java简易版计算器</code>。</p><h2 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h2><p>第一版的 <code>Java</code> 计算器仅需要支持加法运算，用户输入两个数字，然后输出它们的和。</p><h2 id="方法预习"><a href="#方法预习" class="headerlink" title="方法预习"></a>方法预习</h2><p>如果是刚开始接触编程，也许你会毫无头绪，莫方，这是很正常的现象，因为你对于如何与计算机尤其是命令行进行交互毫无头绪。</p><p>所以在开始编码前，需要先预习一些必要的知识。</p><h3 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h3><p>先来认识一个方法 <code>System.out.println()</code>，这个方法会将你传入的信息输出到<code>控制台</code>中，emmm，什么是<code>控制台</code>？你运行程序后出现的那个黑不拉几的东西就叫做<code>控制台</code>，它是我们与计算机交互的一个最简单原始的方式。</p><p>来试验一下，还记得如何用 <code>idea</code> 创建一个类吗？不记得的话翻看一下<a href="../java-ide">这里</a>。</p><p>这次我们继续在 <code>hello</code> 包下面创建一个类叫做 <code>PrintTest</code> ，然后添加以下方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hello<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后我们点击运行，或者按键（<code>ctrl+shift+R</code>），就能看到下面的输出了：</p><p><img src="https://i.loli.net/2020/05/02/7tNkXUYGDI9bAo8.png" alt="java-simple-example-1.png"></p><p>先不要问这个 <code>System</code> 是个什么东西，只要知道这样可以输出一行信息就行了，需要注意的是这个方法默认会在末尾加一个换行符，如果想要不换行，可以试试 <code>System.out.print()</code>。</p><h3 id="输入信息"><a href="#输入信息" class="headerlink" title="输入信息"></a>输入信息</h3><p>上面已经说过如何输出信息了，现在来看看如何输入信息并进行读取。</p><p>先来认识一下 <code>Scanner</code> 类，<code>Scanner</code> 类是用来从各种输入源读取信息的，它可以从各种输入源中读取信息，最常用的当然就是控制台输入。</p><p>那如何用 <code>Scanner</code> 读取控制台的输入呢？这就要用到 <code>System.in</code> 了，来看栗子，我们再新建一个 <code>InputTest</code> 类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hello<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InputTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"刚才输入的整数为："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后再运行一下，并且输入一个数字然后按回车键，这里我输入的是20：</p><p><img src="https://i.loli.net/2020/05/02/LlMGZuJ1C6SgvUm.png" alt="java-simple-example-2.png"></p><p>如果对于具体的细节还不清楚，没有关系，先照做就好了。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>那么接下来就开始设计这个最简单的计算器了，首先我们要提示用户输入一个整数，就像上面那样：</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后用一个 <code>int</code> 变量来存储，什么？不知道变量是干嘛的？没事，你可以先把它当做一个盒子，用来把用户输入的信息存放进去。</p><pre class=" language-java"><code class="language-java">Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后提示用户再输入一个整数：</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入另一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后再用一个 <code>int</code> 变量来存储。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>接下来计算两者的和，并存到第三个变量中：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></code></pre><p>最后输出这个和：</p><pre class=" language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这两个数的和为:"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以整体代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hello<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleCalculator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请再输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这两个数的和为:"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出如下：</p><p><img src="https://i.loli.net/2020/05/02/apKXJ3bZmunBSW9.png" alt="java-simple-example-3.png"></p><p>这样，我们的简易版计算器就完成了。虽然简单，但还是建议你在自己电脑上实现一次，看代码和写代码是完全不一样的两种体验。</p><p>回顾一下本篇，我们设计了一个类<code>SimpleCalculator</code>，并编写了一个main方法，并在里面完成了简易版计算器的逻辑设计。也许你对于自己写的东西还有很多疑问，对象是什么？类又是什么含义？Scanner还可以做什么？前面的package有什么作用，import又是在干嘛？别着急，接着看后面的文章，相信你的疑问会一点一点消失。</p><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ol><li>写一个支持减法的计算器。</li></ol><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】五、Java 开发简介</title>
      <link href="/2020/05/01/java/introduction/java-introduction/"/>
      <url>/2020/05/01/java/introduction/java-introduction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每个人都衣冠楚楚，从来没有人会关心光芒万丈的外表下那藏在角落的，发了霉的落寞。  – 《西风》</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>万事开头难，如果你已经顺利通过了前面安装环境的考验，那么恭喜你已经拿到了 <code>Java</code> 世界的钥匙。</p><p>在打开这扇大门之前，我想再说说我玩这个游戏的一些经验，希望能帮助你在这个游戏里有更好的体验。</p><p>前面两篇已经介绍了 <code>Java</code> 开发环境搭建和 <code>IDE</code> 的下载安装，如果进行顺利的话，那么现在世界上最好的语言之一和世界上最好用的 <code>Java IDE</code>（没有之一，不接受反驳）已经握在了你的手中。所以现在你所需要学习的，就是如何使用这些工具。</p><p>但在此之前，还想先说一说其他的内容。</p><h2 id="关于方向"><a href="#关于方向" class="headerlink" title="关于方向"></a>关于方向</h2><p>当你下定决心走上 <code>Java</code> 的探索之旅时，你需要确定一个大概的方向，有方向才会有学习下去的动力。</p><p>如果只是单纯的想体验一下 <code>Java</code> 开发是怎样的，那么可以跟着本系列文章进行尝试，选择学习使用 <code>Java</code> 来开发一个你想要的功能。</p><p>比如学习如何用 <code>Java</code> 来开发一个<code>定时提醒功能</code>，在固定时间或者某些特定事件发生后给你发送<code>闹铃提示</code>或者<code>邮件提示</code>。又比如使用 <code>Java</code> 来开发 <code>QQ</code>、<code>微信机器人</code>，自动接收群友消息并自动回复。兴趣是最好的老师，选择一个你感兴趣的方向，你才能走的更远。</p><p>如果你打算使用 <code>Java</code> 来找工作，并有较充沛的学习时间预算，那么我建议你多花一点时间在基础的内容上，把 <code>Java</code> 基础的部分啃透会让你在之后的学习里轻松很多。</p><p>如果你对 <code>Java</code> 有着强烈的兴趣，对 <code>Java</code> 有过一段时间的自学，但却因为无法坚持而中途放弃，那么我建议你找一批共同学习的伙伴，在相互交流探讨中，也许可以激发你学习的动力。</p><p>很多人会问，我不是学计算机相关的专业，我以前从未接触过编程，但是我想学 <code>Java</code> ，以后会不会不好找工作？跟别人比是不是没有竞争力？</p><p>对此，我只能负责任的说，是的，但也不全是。</p><p>有时候，选择比努力更重要，别人选了计算机专业，软件工程专业，在IT行业找工作，相对而言确实比非相关专业的人要容易一点。别人学了计算机四年，比你有优势不是应该的吗。</p><p>但也不要因此就觉得跨专业，跨行业是不可能的事情，事实上，很多 <code>Java</code> 从业者都不是计算机相关专业，他们带着各种各样的目的，通过各自的方法也同样走上了这条道路。</p><p>我也是如此，我的专业是工商管理，但现在也在服务端开发的路上越走越远，这个过程虽然有些艰辛，也有不少曲折，但我觉得，对大多数愿意付出努力的人来说，是完全可行的。</p><p>我分享的初衷，是希望能给那些对编程充满热情，但是却对未来充满迷茫和困惑的人提供一点方向。</p><h2 id="关于努力"><a href="#关于努力" class="headerlink" title="关于努力"></a>关于努力</h2><p>确定了方向，剩下的事情就只有努力了，就像在学生时代那样，想要考出更好的成绩，只需要不断的刷题学习和总结。</p><p>其实 <code>Java</code> 学习过程也一样，在 <code>Java</code> 这个游戏里，必须不断打怪升级才能提升自己，才能接到奖励更丰富的任务，也能获得更高的声望，声望高的人才能在这个游戏里获得别人的认可。</p><p>那如何在这个游戏里获得更好的游戏体验，如何更快更好的提升自我呢？那就是借助前人的经验，在这个游戏里有大批的老玩家，他们在这个游戏世界里已经徜徉了多年，有的满足于每天接<code>循环任务</code>来获取金币，有的喜欢去野外探险，寻找 <code>boss</code> 挑战，有的喜欢刷<code>副本</code>，企图刷出<code>绝世装备</code>。</p><p>他们大都有一个自己的<code>经验法则</code>来帮助他们在这个游戏里更好的生存和发展。如果能在这个游戏里交到一个亦师亦友的朋友，那么无疑能给你极大的帮助。</p><p>但需要说明的一点是，努力的方式并不一定是通用的，因为每个人擅长的领域不一样，有的人反应很快，擅长<code>单挑</code>，喜欢极限操作，所以通常是<code>竞技场</code>的常客，有的人擅长<code>指挥</code>，副本里队长名单里总有他们的身影。 就像之前所说，选择有时候比努力更重要，选择自己擅长的领域和方向去发展，也许会让你在这个游戏里有更重要的价值。</p><p>至于如何努力，我个人觉得，<code>看书</code>应该是首选，经典的书籍往往经过了反复斟酌的优质内容，才有了现在的口碑，所以书籍内容不会有太多漏洞，不会像有些不负责任的博主，写博客只是为了博得关注，遇到不确定的地方，要么仅凭自己猜测，要么一笔带过，误导了很多读者。(希望我的博客至少不要误导人，哈哈)</p><p>如果看书实在看不下去的话，可以看看经典的视频教程，<code>慕课网</code>的教程个人觉得还算不错，讲解比较形象，有兴趣的话可以去看看。</p><p>如果还是不行，那就找两个有意思的项目来研究一下。想想看如何用 <code>Java</code> 来提高生活质量，或者来帮助你完成一些重复性的体力劳动。比如用 <code>Java</code> 来批量爬取图片，批量将 <code>txt</code> 文件导入 <code>Excel</code> 等等。</p><h2 id="正式起航"><a href="#正式起航" class="headerlink" title="正式起航"></a>正式起航</h2><p>这几篇大概把我平生的废话都说完了，一本正经的胡说八道了这么久，有点不习惯。如果让你感到无聊了，十分抱歉。【面壁中】</p><p>如果你看完这些废话，觉得自己还是很有兴趣继续看下去，那么就让我们红尘作伴，活得潇潇洒洒。啊，说错了，让我们一起开始Java游戏世界的试炼吧！</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】四、Java开发环境搭建——IDE</title>
      <link href="/2020/05/01/java/introduction/java-ide/"/>
      <url>/2020/05/01/java/introduction/java-ide/</url>
      
        <content type="html"><![CDATA[<blockquote><p>不相信自己的人 连努力的价值都没有。 –《火影忍者》</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面我们已经安装好了 <code>JDK</code> ，现在 <code>Java</code> 这款大型开放式沙盒游戏已经安装在我们的电脑里了，接下来我们就要准备学习如何玩这个游戏了。</p><p>在入门阶段，我建议选择简单模式来进行，那么一个好的 <code>IDE</code> 是必不可少的。</p><h2 id="什么是IDE"><a href="#什么是IDE" class="headerlink" title="什么是IDE"></a>什么是IDE</h2><p><code>IDE（integrated development enviroment）</code> 就是集成开发环境，是用于提供程序开发环境的应用程序，一般包括<code>代码编辑器</code>、<code>编译器</code>、<code>调试器</code>和<code>图形用户界面</code>等工具。集成了代码编写功能、分析功能、编译功能、调试功能等一体化的开发软件服务套。所有具备这一特性的软件或者软件套（组）都可以叫集成开发环境。</p><p>简单来说， <code>IDE</code> 就是将一系列工具集成到了一个应用里，让你的开发之旅变得更加容易。</p><h2 id="为什么需要IDE"><a href="#为什么需要IDE" class="headerlink" title="为什么需要IDE"></a>为什么需要IDE</h2><p>很多老玩家在指导刚入坑的新手时，都喜欢循循善诱，教导新手使用 <code>文本编辑器</code> 而非 <code>IDE</code> ，这样可以提高对整个编译流程的理解。</p><p>讲道理，确实是这样的，但是却将开发的复杂度增加了许多，对于新手而言，每增加一个步骤，就是增加了无数种失败的姿势，很多人的学习热情就消耗在了这种无关痛痒的小问题上，很容易产生挫败感，觉得这个游戏怎么这么难。</p><p>所以我个人认为，<code>开局一条狗，砍到99</code>的打法并不适合每一个人，对于新手而言，先给一个<code>新手套装</code>，再来做任务会更加轻松。</p><h2 id="安装IDE"><a href="#安装IDE" class="headerlink" title="安装IDE"></a>安装IDE</h2><p>接下来，我们去官网下载 <code>IDEA</code> ：<code>http://www.jetbrains.com/idea/</code></p><p><img src="https://i.loli.net/2020/05/02/P2ZVXphwkvzrTqj.png" alt="java-ide-1.png"></p><p><img src="https://i.loli.net/2020/05/02/amnrtAJkhV87yqb.png" alt="java-ide-2.png"></p><p>根据自己的系统进行选择安装即可，这里就不分系统进行介绍了，下载的时候，可以选 <code>ultimate</code> 版，也可以选 <code>community</code> 版，建议选择 <code>ultimate</code> 版。</p><p>下载好以后安装，要激活码的时候可以看一看这个地址：<code>http://idea.lanyus.com/</code> 使用前请将“0.0.0.0 account.jetbrains.com”添加到 <code>hosts</code> 文件中，然后输入激活码就能成功激活了。当然，此方法仅供学习研究使用，有条件的盆友还是自觉购买正版产品吧。如果该方法已失效，则需要自行搜索<a href="https://www.baidu.com/s?wd=idea%20%E6%BF%80%E6%B4%BB%E7%A0%81" target="_blank" rel="noopener">其它姿势</a>了。</p><p>安装的时候，所有的都按默认选项进行安装即可。</p><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>然后开始我们的第一个新手任务——<code>HelloWorld</code>。</p><p><img src="https://i.loli.net/2020/05/02/IvMY16wh5pU9WNE.png" alt="java-ide-3.png"></p><p><img src="https://i.loli.net/2020/05/02/CrWpUA13NszeytF.png" alt="java-ide-4.png"></p><p><img src="https://i.loli.net/2020/05/02/qhDGHiVAOawZk9J.png" alt="java-ide-5.png"></p><p>创建好以后，右键src文件夹，添加package，名字叫hello，然后在package里添加HelloWorld类</p><p><img src="https://i.loli.net/2020/05/02/MKGcT3CD7t2msRH.png" alt="java-ide-6.png"></p><p><img src="https://i.loli.net/2020/05/02/buyAFqTGB9QjEzU.png" alt="java-ide-7.png"></p><p><img src="https://i.loli.net/2020/05/02/nGU3f2zLcNHlXoT.png" alt="java-ide-8.png"></p><p>然后在文件里放上代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> hello<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>System<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>点击 <code>Run</code> ，运行程序，选择 <code>HelloWorld</code> ，代码就跑起来了。</p><p><img src="https://i.loli.net/2020/05/02/O8f6ePSNw4BWFph.png" alt="java-ide-9.png"></p><p>至此，<code>IDE</code> 设置完成，我们的第一个项目也完工。</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】三、Java开发环境搭建——Mac篇</title>
      <link href="/2020/05/01/java/introduction/java-environment-mac/"/>
      <url>/2020/05/01/java/introduction/java-environment-mac/</url>
      
        <content type="html"><![CDATA[<blockquote><p>人非圣贤，孰能无过？过而能改，善莫大焉。 –《左传》</p></blockquote><h2 id="步骤说明"><a href="#步骤说明" class="headerlink" title="步骤说明"></a>步骤说明</h2><p>主要分为以下几个步骤：</p><p>1.到 <code>Oracle</code> 官网下载 <code>JDK</code> 安装包。(我在这里选择的是 <code>JDK1.8</code>，也可以选择其它版本)</p><p>2.打开获取到的安装包按步骤安装到系统上。</p><p>3.配置系统的环境变量。</p><p>4.验证 <code>JDK</code> 是否安装成功。</p><p>【由于电脑上已经安装过了 <code>JDK1.8</code>，所以偷懒把别人的文章搬过来了，<a href="https://blog.csdn.net/deliciousion/article/details/78046007" target="_blank" rel="noopener">原文链接</a>】</p><h2 id="一、下载JDK8"><a href="#一、下载JDK8" class="headerlink" title="一、下载JDK8"></a>一、下载JDK8</h2><p>通过下面 <code>Oracle</code> 官网找到对应的 <code>JDK1.8</code> 安装包</p><p><a href="https://www.oracle.com/index.html" target="_blank" rel="noopener">https://www.oracle.com/index.html</a></p><p>打开后如下所示，<code>Oracle</code> 主页内容经常变动，读者打开后很有可能不一样。</p><p><img src="https://i.loli.net/2020/05/02/munYUqTkJg5IxDR.png" alt="1-jdk-mac.png"></p><p>拉到页面底部，找到“Download Java for Developers”，如下红框所示。</p><p><img src="https://i.loli.net/2020/05/02/GOvJdf7zLWrTCEb.png" alt="2-jdk-mac.png"></p><p>点开链接后，如下图所示，再点击红框位置，只下载 <code>JDK1.8</code> ，红框右边的链接是 <code>JDK1.8</code> 加上 <code>NetBeans</code> ，一个挺好用的 <code>JAVA IDE</code>（集成化开发环境），有需要的可以下载。</p><p><img src="https://i.loli.net/2020/05/02/FakO2WjeMR1hi79.png" alt="3-jdk-mac.png"></p><p>进入页面后第一步，点击“Accept License Agreement”同意许可证协议。第二步选择 <code>JDK</code> 对应的操作系统。本次选择“MAC OS X”，最后把相应的安装包下载到本地。</p><p><img src="https://i.loli.net/2020/05/02/I3XBT1vUJQGHDcK.png" alt="4-jdk-mac.png"></p><h2 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h2><p>下载完成后，我们得到一个dmg的安装包，如下图所示，名称为 <code>jdk-8u144-macosx-x64.dmg</code> ，表示这是 <code>Java 8</code> 版本号为 <code>144</code> 的 <code>JDK</code>安装包，如果选择的是其它版本，名称也会有所不同。</p><p><img src="https://i.loli.net/2020/05/02/PSbdcZGVfY1n4Oz.png" alt="5-jdk-mac.png"></p><p>双击 <code>dmg</code> 安装包，打开如下图所示窗口。按照红框的提示，便可轻松完成安装。</p><p><img src="https://i.loli.net/2020/05/02/bDiVGkgKOrQJS5w.png" alt="6-jdk-mac.png"></p><p>再双击中间的 <code>pkg</code> 文件，开始安装，如下图所示。</p><p><img src="https://i.loli.net/2020/05/02/kMa9bSmKOY2seFD.png" alt="7-jdk-mac.png"></p><p><img src="https://i.loli.net/2020/05/02/ICbJmudG73f52lx.png" alt="9-jdk-mac.png"></p><p><img src="https://i.loli.net/2020/05/02/e92Dx1XPzBI5WVO.png" alt="10-jdk-mac.png"></p><h2 id="三、配置系统的环境变量"><a href="#三、配置系统的环境变量" class="headerlink" title="三、配置系统的环境变量"></a>三、配置系统的环境变量</h2><p>上一步骤，实标上，我们只是把 <code>JDK1.8</code> 的文件复制到操作系统上。但是我们如果要在 <code>terminal</code> 终端上使用 <code>JAVA</code> 命令，还需要让其它应用知道 <code>JDK1.8</code> 环境的存在，那我们还需要配置系统的环境变量。</p><p>首先我们得知道 <code>JDK</code> 目录安装在哪里，按照下面的路径我们可以找到 <code>JDK</code> 的主目录，如下图所示。这里有两个目录是因为本机较早前安装过早期版本的 <code>JDK1.8</code>。</p><pre class=" language-bash"><code class="language-bash">/Library/Java/JavaVirtualMachines</code></pre><p><img src="https://i.loli.net/2020/05/02/ewjVCx6Wdiz7hE5.png" alt="11-jdk-mac.png"></p><p>由于 <code>MAC</code> 文件系统结构，与 <code>WINDOWS</code> 有所不一样，所以 <code>JDK</code>的真实主目录如下</p><pre class=" language-bash"><code class="language-bash">/Library/Java/JavaVirtualMachines/jdk1.8.0_144.jdk/Contents/Home</code></pre><p>打开 <code>terminal</code> 终端，默认打开在自身 <code>home</code> 目录下，也可通过 <code>cd</code> 命令直接跳到主目录。</p><p><img src="https://i.loli.net/2020/05/02/bFOD8ViUStJYdBW.png" alt="12-jdk-mac.png"></p><p>通过 <code>vim .bash_profile</code> 命令打开启动文件，修改内容</p><p><img src="https://i.loli.net/2020/05/02/u51VTvULm6HtJcn.png" alt="13-jdk-mac.png"></p><p>进入 <code>vim</code>，按 <code>i</code> 键进入编辑状态。添加如下内容，如下图所示。再按 <code>ESC</code> 键，输入“:wq”保存退出。配置系统环境变量结束。</p><p><img src="https://i.loli.net/2020/05/02/93vEFplMf4Vjg8O.png" alt="14-jdk-mac.png"></p><p>添加如下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home</code></pre><p>注意将 <code>jdk1.8.0_45</code> 这里改为你下载的 <code>JDK</code> 版本，不清楚的话，到 <code>/Library/Java/JavaVirtualMachines/</code> 这个目录下找找。</p><h2 id="四、验证JDK1-8是否安装成功。"><a href="#四、验证JDK1-8是否安装成功。" class="headerlink" title="四、验证JDK1.8是否安装成功。"></a>四、验证JDK1.8是否安装成功。</h2><p>在终端输入 <code>java</code>,有如下画面，证明配置成功</p><p><img src="https://i.loli.net/2020/05/02/S3X7JwZfONlvqsM.png" alt="15-jdk-mac.png"></p><p>或输入 <code>java -version</code>，会出现版本信息</p><p><img src="https://i.loli.net/2020/05/02/zlKysIfgXDL1E4C.png" alt="16-jdk-mac.png"></p><p>至此，整个安装 <code>JDK</code> 过程结束。</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】二、Java开发环境搭建——Windows篇</title>
      <link href="/2020/05/01/java/introduction/java-environment-windows/"/>
      <url>/2020/05/01/java/introduction/java-environment-windows/</url>
      
        <content type="html"><![CDATA[<blockquote><p>你为了你的正义，我为了我的正义。 – 《火影忍者》</p></blockquote><h2 id="一、安装JDK"><a href="#一、安装JDK" class="headerlink" title="一、安装JDK"></a>一、安装JDK</h2><p>官网下载链接：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p><p><img src="https://i.loli.net/2020/05/02/CvASgTp3BQFGlks.png" alt="1-jdk-windows.png"></p><h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p>需要配置以下几个环境变量：</p><table><thead><tr><th>环境变量名</th><th>说明</th></tr></thead><tbody><tr><td>JAVA_HOME</td><td>配置JDK安装路径</td></tr><tr><td>PATH</td><td>配置JDK命令文件的位置</td></tr><tr><td>CLASSPATH</td><td>配置类库文件的位置｜</td></tr></tbody></table><h3 id="1、我的电脑（右键）–-gt-属性–-gt-高级系统设置"><a href="#1、我的电脑（右键）–-gt-属性–-gt-高级系统设置" class="headerlink" title="1、我的电脑（右键）–>属性–>高级系统设置"></a>1、我的电脑（右键）–&gt;属性–&gt;高级系统设置</h3><p><img src="https://i.loli.net/2020/05/02/KkW2HEcewYmfyLC.png" alt="2-jdk-windows.png"></p><h3 id="2、环境变量–-gt-新建"><a href="#2、环境变量–-gt-新建" class="headerlink" title="2、环境变量–>新建"></a>2、环境变量–&gt;新建</h3><p><img src="https://i.loli.net/2020/05/02/Iybmol7AfZ2JjPV.png" alt="3-jdk-windows.png"></p><p><img src="https://i.loli.net/2020/05/02/iaUDGuIA2dFVLsb.png" alt="4-jdk-windows.png"></p><p><img src="https://i.loli.net/2020/05/02/Fm6WAQtRjKyxPv3.png" alt="5-jdk-windows.png"></p><p>(1)新建-&gt;变量名”JAVA_HOME”，变量值”C:/Java/jdk1.8.0_144”（即JDK的安装路径），在此，我安装的是 <code>java8</code> 版本，如果选择其它版本，设置对应的路径和名称即可。 </p><p>(2)编辑-&gt;变量名”Path”，在原变量值的最后面加上“;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin” </p><p>(3)新建-&gt;变量名“CLASSPATH”,变量值“.;%JAVA_HOME%/lib;%JAVA_HOME%/lib/dt.jar;%JAVA_HOME%/lib/tools.jar”</p><h3 id="3、确认环境配置是否正确"><a href="#3、确认环境配置是否正确" class="headerlink" title="3、确认环境配置是否正确"></a>3、确认环境配置是否正确</h3><p>在控制台分别输入 <code>java</code>，<code>javac</code>，<code>java -version</code> 命令，出现如下所示的 <code>JDK</code> 的编译器信息，包括修改命令的语法和参数选项等信息。</p><p><code>java</code> 命令：</p><p><img src="https://i.loli.net/2020/05/02/4rDZIYn6yL5lGEp.png" alt="6-jdk-windows.png"></p><p><code>javac</code> 命令：</p><p><img src="https://i.loli.net/2020/05/02/WagrjY8X9AcwPNI.png" alt="7-jdk-windows.png"></p><p><code>java -version</code> 命令：</p><p><img src="https://i.loli.net/2020/05/02/wBrWpu7P8KIA1c6.png" alt="8-jdk-windows.png"></p><h3 id="4、在控制台下验证第一个java程序："><a href="#4、在控制台下验证第一个java程序：" class="headerlink" title="4、在控制台下验证第一个java程序："></a>4、在控制台下验证第一个java程序：</h3><p>右键–》新建–》文本文档</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>用记事本编写好，点击“保存”，并保存在桌面后，先在控制台中进入桌面的目录。</p><pre class=" language-bash"><code class="language-bash">C:<span class="token function">cd</span> /Users/<span class="token punctuation">[</span>用户名<span class="token punctuation">]</span>/Desktop</code></pre><p>上面的[用户名]改成你的计算机用户名即可，不清楚的话打开我的电脑，进C盘目录：<code>C:/Users</code> 找一下。</p><p>输入 <code>javac Test.java</code> 和 <code>java Test</code> 命令，即可运行程序（打印出结果“Hello Java”）。</p><p><img src="https://i.loli.net/2020/05/02/InRJXZb54T1veuc.png" alt="9-jdk-windows.png"></p><p>至此，<code>Java</code> 开发环境搭建成功。</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】一、Java开发环境搭建——概念说明</title>
      <link href="/2020/05/01/java/introduction/java-environment/"/>
      <url>/2020/05/01/java/introduction/java-environment/</url>
      
        <content type="html"><![CDATA[<blockquote><p>如果不能忠于自己的心，胜负又有什么价值呢？</p></blockquote><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>前面说到 <code>Java</code> 也有一个大工厂，可以让你随心所欲的创建想要创建的事物，但是想要使用这个工厂，还得先部署这个工厂，它就是 <code>JDK</code> 。</p><p>在此之前，先介绍几个概念：<code>JVM</code>、<code>JRE</code>、<code>JDK</code>。</p><h2 id="JVM（Java-Virtual-Machine）"><a href="#JVM（Java-Virtual-Machine）" class="headerlink" title="JVM（Java Virtual Machine）"></a>JVM（Java Virtual Machine）</h2><p><code>JVM</code> 即 <code>Java虚拟机</code>，是 <code>Java</code> 这个大工厂中的熔炉，也是驱动这个工厂运行的核心组件。</p><p><code>Java</code>     是能够跨平台运行的，也就是说，同样的代码可以不经修改的在 <code>windows</code> 系统、<code>linux</code>系统、<code>mac</code>系统上运行并得到相同的结果。</p><p><code>JVM</code> 在这个过程中扮演着十分重要的角色，它就像一位翻译官，由它间接的与具体的系统打交道。不同系统有着不同的指令集，可以理解为有不同的语言和方言，但 <code>JVM</code> 这位翻译官精通各个系统的语言，可以将我们的代码翻译给系统去执行。 <code>Java</code> 代码被编译为 <code>.class</code> 文件后，由虚拟机将字节码文件解释成具体平台上的机器指令。</p><p><code>JVM</code> 其实是一种规范，只要按这种规范设计的产品都可以叫做虚拟机，目前来说比较主流的虚拟机有，<code>HotSpot</code>、<code>J9 VM</code>、<code>Zing VM</code>。</p><h2 id="JRE（Java-Runtime-Environment）"><a href="#JRE（Java-Runtime-Environment）" class="headerlink" title="JRE（Java Runtime Environment）"></a>JRE（Java Runtime Environment）</h2><p><code>JRE</code> 即 Java运行时环境，是运行 <code>Java</code> 程序必不可少的，既然是运行，自然要包含 <code>JVM</code>，同时还包含了 <code>JVM</code> 标准实现及 <code>Java</code> 核心类库，提供了 <code>Java</code> 运行时必要的基础信息。</p><p>光有 <code>JVM</code> 无法完成 <code>class</code> 的执行，因为在解释 <code>class</code> 的时候 <code>JVM</code> 需要调用解释所需要的类库 <code>lib</code> 。 可以这样理解，<code>JVM</code> 只是一名翻译官，还需要各个助理才能完成各项具体任务。</p><p>有了 <code>JRE</code>, <code>Java</code> 程序就能顺利的跑起来了，但 <code>JRE</code> 并不是一个开发环境，所以没有包含任何开发工具（如编译器和调试器）。</p><h2 id="JDK（Java-Development-Kit）"><a href="#JDK（Java-Development-Kit）" class="headerlink" title="JDK（Java Development Kit）"></a>JDK（Java Development Kit）</h2><p><code>JDK</code> 是 <code>Java</code> 语言的软件开发工具包，是 <code>Java</code> 开发者所必须的内容，也就是我们之后要部署的东西，主要包含了各种类库和工具，当然也包含了一个 <code>JRE</code>。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>综上所述，<code>JDK</code> 中包含有 <code>JRE</code> ，<code>JRE</code> 中包含有 <code>JVM</code> ，所以 <code>JDK</code> 在手，天下我有【手动滑稽】。</p><p>想要进行 <code>Java</code> 开发，就必须要部署 <code>JDK</code> 环境，但如果只是想要运行 <code>Java</code> 开发的软件，那么安装一个JRE就足够了。</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Java入门篇】起航</title>
      <link href="/2020/05/01/java/introduction/java-started/"/>
      <url>/2020/05/01/java/introduction/java-started/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最害怕的东西，最应该去突破</p></blockquote><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><p>之前博主在<a href="http://www.cnblogs.com/mfrank/" target="_blank" rel="noopener">博客园</a>已经陆续发了几十篇文章，但总体并没有一个很好的串联，在内容编排上也存在许多问题，因此特地将之前的文章做一个整理。</p><p>一是将原有文章进行润色，让表达更加生动清晰，二是尽可能的将各个知识点连接成线，整理出自己的一套体系，并剔除其中的错误。</p><p>本系列文章不会鼓吹Java怎么怎么好，也不打算尝试怂恿那些在Java边缘徘徊的人来学习Java，只想根据自己的学习经验来给那些想要学习Java却不得其法的人提供一点自己的经验和看法。</p><p><code>Java 入门篇</code> 是为零基础的人准备的，内容不多，主要包括环境搭建、IDE设置和使用等方面的介绍，最后会以一个简单的程序结束本篇。</p><p>通过本篇的学习，你可以掌握以下内容：</p><ul><li>如何搭建 Java 开发环境</li><li>如何使用 IDEA 进行开发</li><li>完成简单的 Java 代码</li></ul><h2 id="编程的世界观"><a href="#编程的世界观" class="headerlink" title="编程的世界观"></a>编程的世界观</h2><p>编程写代码其实跟玩游戏很相似，不断学习，不断提升，然后写代码来完成各种工作，就跟打怪升级，赚钱买装备，最终打倒BOSS是一样的。</p><p>每一款好的游戏都有一个较为统一完整的世界观，也会有一个统一的背景设定，你需要先接受和理解这个设定的背景，然后慢慢了解这个游戏的完整世界观，这样才能真正融入这个游戏。</p><p>比如说，<code>《剑网3》</code>的世界观设计一直遵循“纯武侠，真江湖”设计，背景设定便是唐宋时期，武林纷争，各大门派先后崛起，而你出身草芥，通过自己的努力，不断完成各种新手任务来提升等级，然后加入门派，再通过不断升级武器装备、完成各种副本来提升自我。</p><p>又比如<code>《饥荒》</code>这款游戏，是关于一名科学家被恶魔传送到了异世界荒野的故事，游戏的主题是生存，所以你的目标是尽可能的利用各种资源来存活更长时间，同时要抵御各种外来威胁来保证自己的安全。</p><p>如果把编程开发也比作游戏的话，它更像是《我的世界》这样的自由度很高的沙盒游戏。有的人会将《我的世界》玩成一款生存游戏，享受被僵尸追杀的快感，有人会将它玩成一款建筑游戏，打造属于自己的王国。带着不同的目的人，会有完全不同的游戏体验。</p><p>编程也是如此，在编程的世界里，你拥有的是一个万能工厂，而你是一位工程师，在这里你可以生产出任何产品，汽车、轮船、火箭，如果你足够厉害，甚至可以创造一个新的世界，所有你需要做的，便是给出合格的设计图，接下来的事情，交给这个<code>万能工厂</code>就好了。</p><p>每个人拥有这个<code>万能工厂</code>的人都有着不同的目的，有的人只是为了参观，有的人是为了制作出性能强悍的跑车，有的人是为了制作自己用的小玩具，而有的人只是为了用它来谋生。不同的目的就会有完全不同的前进方向，也会有完全不同的体验，有的人会觉得枯燥，有的人会觉得无聊，而有的人却会感觉激情四射，爱不释手。如果你能真正体会到其中的乐趣，那么你一定会爱上这个工厂。</p><p>但做出一张好的<code>设计图</code>并不是一件简单的事情，所以你需要不断的学习它的规范，设计出符合规范的<code>设计图</code>，才能使用这个<code>万能工厂</code>正确生产出你想要的产品。</p><p>等到你真正掌握了这个规范，就会发现，只满足于正确性还远远不够，于是渐渐的会开始追求效率和美感。为了提高设计效率，前辈们已经总结出很多种<code>设计模式</code>，适用于不同的应用场景，掌握了它们，在设计产品的时候便能更加随心所欲。</p><p>而关于编程美学，也是一门用经验堆积起来的学问。毕竟，作为工程师的我们，需要与其他工程师不断交流切磋，我们会观摩欣赏别人的<code>设计图</code>，也会把自己的<code>设计图</code>和别人探讨。所以<code>设计图</code>不仅仅是为了给这个万能工厂来运转，也是为了阅读。</p><p>当然，这都是后话了。</p><h2 id="Java编程的世界观"><a href="#Java编程的世界观" class="headerlink" title="Java编程的世界观"></a>Java编程的世界观</h2><p><code>Java</code> 是一门<code>高级编程语言</code>，所谓的高级，是相对于汇编等<code>机器语言</code>而言的，有更高层次的抽象，更加接近自然语言和数学公式，基本脱离了机器的硬件系统。</p><p>前面说到，每种编程语言都是一个<code>万能工厂</code>，<code>Java</code> 也有一个<code>万能工厂</code>。不同语言代表的不同工厂有着各自的擅长领域。</p><p>目前来说，<code>Java</code> 的主流应用领域便是 <code>Web/APP后端开发</code> 、<code>嵌入式设备</code> 、<code>大数据</code> 、<code>安卓开发</code> ，当然，<code>Java</code> 也可以开发桌面应用程序，也可以写游戏，但那些并不是 <code>Java</code> 擅长的领域。就像你可以用菜刀砍树，用斧头切菜一样，可以做，但是会有些别扭，有其他更好用的工具为什么要选择这样蹩脚的方式呢。</p><p>不要忘了你的目标，如果你是为了探索和享受其中的乐趣，那可以尽管去做。如果是为了完成某项功能，那请别忘了，这些工厂都只是一个工具而已，你的最终目的是实现你的要的功能。</p><blockquote><p>吾生也有涯，而知也无涯。以有涯随无涯，殆已！</p></blockquote><p>简单来说，不管黑猫白猫，能抓住耗子的猫就是好猫。</p><p>所以对待各种编程语言，首先要保持理智和克制，他们都只是一个工具，通常来说，我们的目的是为了解决问题，不要陷入对某种语言的盲目崇拜的陷阱里，脱离场景而进行语言之间的对比是毫无意义的。</p><p><code>Java</code> 有很多开发方向，本系列文章将主要以 <code>JavaWeb</code> 开发为目标进行探索，利用 <code>Java</code> 这个大工厂来开发网站后端应用，为我们的前台页面提供强劲稳定的功能支持。</p><p>相对于桌面开发而言，<code>JavaWeb</code> 开发更多的时候开发出的产品是默默的在后台工作的，需要通过前台 <code>html</code> 页面或者 <code>手机app</code>，亦或是 <code>桌面app</code> 才能进行间接的交互。</p><p>比如你打开淘宝，看到的那些页面架构和好看的图片大都是前端和UI的功劳，而你看到的那些文字和数字内容，大都是后端的数据驱动的成果。（当然，现在可能更多的功劳又要归功于基于大数据的推荐系统了）</p><p>但不要因此而觉得 <code>Java</code> 后端开发很无聊，其实一个网站的后端就像一个程序的大脑，绝大部分的数据逻辑处理是由后端完成的，不仅要负责对数据进行处理，还需要跟数据库，各种消息中间件打交道，利用各种算法来实现特定的功能。</p><p>前端则负责展示处理后的结果，并做出相应的响应，是一个应用的门面。前端侧重展示和交互，后端侧重程序的逻辑，都是为了提供更好的用户体验，只是着力点不一样而已。</p><p><code>Java</code> 这个大工厂能量无穷，想要完全掌控它的妙用需要一段较长的修炼时间，毕竟想要设计一张足够精巧的设计图纸并不是一件简单的事情，所以需要不断的学习。</p><p>这个过程难免会遇到挫折和困难，其中很多坑对于新手而言是致命的，最简单的比如环境安装，很多人的兴趣就是夭折在环境的折腾上。其实很多坑，早有无数人踩过，也有很多人在网上分享过相关的解决办法，所以当你遇到问题的时候，可以先上百度找找，你要相信一定有人遇到过同样的问题，如果没找到，想想换个姿势搜索。</p><p>当然也许苦苦搜寻之后，还是无法解决你的问题，这时候，来自共同学习的小伙伴的支持就显得弥足珍贵了，为此，博主创建了一个QQ群【529253292】，这里也许可以找到你想要的答案。</p><p><code>Java</code> 的学习深造过程，就像是升级打怪过关卡，每个知识点都有些小boss，把它们打倒后便能获得相应的经验值，可以提升你的等级，但是随着你的等级的提升，这些小怪小boss对你的修炼的帮助已经聊胜于无了，于是你需要进行更艰难的修炼，去挑战更厉害的boss。</p><h2 id="起航"><a href="#起航" class="headerlink" title="起航"></a>起航</h2><p>在这个世界里，自由度很大，大到也许会让刚接触的你迷失方向，不知所措。所以本系列文章将会提供给你一条前往 <code>JavaWeb</code> 开发的修炼道路，虽然并不一定是最优路线，但至少总体方向不会错，如果你刚好想往这个方向发展，那么本系列文章将会给你提供一些帮助。注意，本系列文章主张的是夯实基础，先修炼内功，然后再修炼外功，所以如果你想要的是捷径，想要知道如何在一两个月之内找到工作，那么这个系列文章可能不太适合你。</p><p>当你的经验累积到一定的值时，就能获得相应的头衔，在 <code>JavaWeb</code> 的发展中主要有两条升级路线，一条是技术路线，一条是管理路线，大致就像这样:</p><p><img src="https://i.loli.net/2020/05/02/SkyFbiuZjdQTOaW.png" alt="java-started-1.png"></p><p>两条路线的升级加点方式不太一样，但是都是当技术积累到一定程度后才能选择不同的升级路线。</p><p>所以，年轻的勇士，不要犹豫了，拿起你的桃木剑，在 <code>Java</code> 这个世界探索出自己的道路吧！</p><p><img src="https://i.loli.net/2020/05/02/AfHOY5RXge9tlVo.png" alt="微信公众号"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java入门 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
